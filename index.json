{
  "api/index.html": {
    "href": "api/index.html",
    "title": "代码文档 Api Documentation | Panzer War Document",
    "keywords": "代码文档 Api Documentation 代码文档提供游戏侧的 API，可以帮助你快速了解游戏内有哪些 API，以及他们的使用方法。 The code documentation provides in-game APIs, which can help you quickly understand the available APIs within the game and their usage methods."
  },
  "api/ShanghaiWindy.Core.AbstractBattlePlayer.html": {
    "href": "api/ShanghaiWindy.Core.AbstractBattlePlayer.html",
    "title": "Class AbstractBattlePlayer | Panzer War Document",
    "keywords": "Class AbstractBattlePlayer 战斗玩家数据 Battle Player Inheritance object AbstractBattlePlayer Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public abstract class AbstractBattlePlayer Fields Info Declaration [DocGen] public object Info Field Value Type Description object NickName 昵称 Nick name Declaration [DocGen] public string NickName Field Value Type Description string Uid 唯一 Id Uid Declaration [DocGen] public int Uid Field Value Type Description int Vehicle 载具 Vehicle Declaration [DocGen] public BaseInitSystem Vehicle Field Value Type Description BaseInitSystem VehicleInfo 载具信息 Vehicle Info Declaration [DocGen] public VehicleInfo VehicleInfo Field Value Type Description VehicleInfo Properties IsAlive Declaration [DocGen] public bool IsAlive { get; } Property Value Type Description bool OnGameObjectDestroyed 载具物体被删除回调 On vehicle gameobject removed callback Declaration [DocGen] public UnityEvent OnGameObjectDestroyed { get; set; } Property Value Type Description UnityEvent OnVehicleDestroyed 载具被击毁回调 On vehicle destroyed callback Declaration [DocGen] public UnityEvent OnVehicleDestroyed { get; set; } Property Value Type Description UnityEvent OnVehicleLoaded 载具生成回调 On vehicle loaded callback Declaration [DocGen] public UnityEvent OnVehicleLoaded { get; set; } Property Value Type Description UnityEvent Methods CreateVehicle(VehicleInfo, Vector3, Quaternion) 创建载具 Create Vehicle Declaration [DocGen] public BaseInitSystem CreateVehicle(VehicleInfo vehicleInfo, Vector3 pos, Quaternion rot) Parameters Type Name Description VehicleInfo vehicleInfo Vector3 pos Quaternion rot Returns Type Description BaseInitSystem GetTeam() 获得队伍 Get Team Declaration [DocGen] public abstract TeamManager.Team GetTeam() Returns Type Description TeamManager.Team GetTotalDamage() 获取总伤害 Get total damaged Declaration [DocGen] public int GetTotalDamage() Returns Type Description int GetTotalDestroyed() 获取总击毁数 Get total destroyed number Declaration [DocGen] public int GetTotalDestroyed() Returns Type Description int GetVehicleName() Declaration [DocGen] public string GetVehicleName() Returns Type Description string IsLocalPlayer() Declaration [DocGen] public abstract bool IsLocalPlayer() Returns Type Description bool"
  },
  "api/ShanghaiWindy.Core.API.ArmyAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.ArmyAPI.html",
    "title": "Class ArmyAPI | Panzer War Document",
    "keywords": "Class ArmyAPI 陆军相关 API Army-related API Inheritance object ArmyAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class ArmyAPI Methods GetWeaponConrollerList(ArmyInitSystem) 从陆军载具中获取所有武器控制器。 Get all the weapon controllers from the army vehicle. Declaration [DocGen] public static List<WeaponController> GetWeaponConrollerList(ArmyInitSystem vehicle) Parameters Type Name Description ArmyInitSystem vehicle 目标陆军载具 Target army vehicle Returns Type Description List<WeaponController> 武器控制器列表 List of weapon controllers"
  },
  "api/ShanghaiWindy.Core.API.AssetAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.AssetAPI.html",
    "title": "Class AssetAPI | Panzer War Document",
    "keywords": "Class AssetAPI 资源相关 API Asset-related API Inheritance object AssetAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class AssetAPI Methods ForceResolvePackage() 强制解析资源包 Force resolve package Declaration [DocGen] public static void ForceResolvePackage() LoadAssetBundle(string, string, AssetLoadedDelegate) （弃用）加载资源包 （Deprecated）Load Asset Bundle Declaration [DocGen] public static void LoadAssetBundle(string abName, string format, AssetLoadedDelegate callBack) Parameters Type Name Description string abName 资源包名称 Asset Bundle Name string format 资源包格式 Asset Bundle Format AssetLoadedDelegate callBack 资源加载完成时的回调 Callback when the asset is loaded LoadPoolAsset(string, string, LoadPoolAssetDelegate) 从对象池加载资源 Load asset from object pool Declaration [DocGen] public static void LoadPoolAsset(string id, string fileName, LoadPoolAssetDelegate callBack) Parameters Type Name Description string id string fileName LoadPoolAssetDelegate callBack ReleasePoolAsset(AssetPoolRef) 将对方返回对象池 Release asset to object pool Declaration [DocGen] public static void ReleasePoolAsset(AssetPoolRef assetPoolRef) Parameters Type Name Description ShanghaiWindy.Core.AssetPoolRef assetPoolRef ReloadConfig() 重新加载配置表 Reload config Declaration [DocGen] public static void ReloadConfig()"
  },
  "api/ShanghaiWindy.Core.API.BattlePlayerAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.BattlePlayerAPI.html",
    "title": "Class BattlePlayerAPI | Panzer War Document",
    "keywords": "Class BattlePlayerAPI 战斗玩家 Battle Player Inheritance object BattlePlayerAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class BattlePlayerAPI Methods CreateOfflineBotPlayer(int, string, object) 创建离线单机 Bot Create offline bot Declaration [DocGen] public static OfflineBotBattlePlayer CreateOfflineBotPlayer(int uid, string nickName, object info) Parameters Type Name Description int uid string nickName object info Returns Type Description ShanghaiWindy.Core.OfflineBotBattlePlayer CreateOfflineMainPlayer(int, object) 创建 Declaration [DocGen] public static OfflineMainBattlePlayer CreateOfflineMainPlayer(int uid, object info) Parameters Type Name Description int uid object info Returns Type Description ShanghaiWindy.Core.OfflineMainBattlePlayer"
  },
  "api/ShanghaiWindy.Core.API.BotAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.BotAPI.html",
    "title": "Class BotAPI | Panzer War Document",
    "keywords": "Class BotAPI Inheritance object BotAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class BotAPI Methods AddCaptureTaskToBot(TankBotTaskLogic) Declaration [DocGen] public static CaptureZoneTask AddCaptureTaskToBot(TankBotTaskLogic logic) Parameters Type Name Description ShanghaiWindy.Core.TankBotTaskLogic logic Returns Type Description CaptureZoneTask GetTankBotTaskLogic() Declaration [DocGen] public static TankBotTaskLogic GetTankBotTaskLogic() Returns Type Description ShanghaiWindy.Core.TankBotTaskLogic GetTankDefenceBotLogic() Declaration [DocGen] public static DefenceBotLogic GetTankDefenceBotLogic() Returns Type Description ShanghaiWindy.Core.DefenceBotLogic"
  },
  "api/ShanghaiWindy.Core.API.BuffAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.BuffAPI.html",
    "title": "Class BuffAPI | Panzer War Document",
    "keywords": "Class BuffAPI Buff API Inheritance object BuffAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class BuffAPI Methods AddBuff(BaseInitSystem, ILuaBuffCaster) 为载具添加 Buff Add a buff to vehicle Declaration [DocGen] public static void AddBuff(BaseInitSystem vehicle, ILuaBuffCaster buffCaster) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle ILuaBuffCaster buffCaster ILuaBuffCaster RemoveBuff(BaseInitSystem, ILuaBuffCaster, bool) 为载具删除 Buff Remove a buff to vehicle Declaration [DocGen] public static void RemoveBuff(BaseInitSystem vehicle, ILuaBuffCaster buffCaster, bool isInterrupt) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle ILuaBuffCaster buffCaster ILuaBuffCaster bool isInterrupt 是否打断 Is Interrupt TryGetBuffReceiverAsArmy(IBuffReceiver, out ArmyInitSystem) 尝试获取 IBuffReceiver 上的步兵类型 Try to get buff receiver as army Declaration [DocGen] public static bool TryGetBuffReceiverAsArmy(IBuffReceiver buffReceiver, out ArmyInitSystem armyInitSystem) Parameters Type Name Description ShanghaiWindy.Core.IBuffReceiver buffReceiver ArmyInitSystem armyInitSystem Returns Type Description bool TryGetBuffReceiverAsFlight(IBuffReceiver, out FlightInitSystem) 尝试获取 IBuffReceiver 上的飞机类型 Try to get buff receiver as flight Declaration [DocGen] public static bool TryGetBuffReceiverAsFlight(IBuffReceiver buffReceiver, out FlightInitSystem flightInitSystem) Parameters Type Name Description ShanghaiWindy.Core.IBuffReceiver buffReceiver ShanghaiWindy.Core.FlightInitSystem flightInitSystem Returns Type Description bool TryGetBuffReceiverAsTank(IBuffReceiver, out TankInitSystem) 尝试获取 IBuffReceiver 上的坦克类型 Try to get buff receiver as tank Declaration [DocGen] public static bool TryGetBuffReceiverAsTank(IBuffReceiver buffReceiver, out TankInitSystem tankInitSystem) Parameters Type Name Description ShanghaiWindy.Core.IBuffReceiver buffReceiver TankInitSystem tankInitSystem Returns Type Description bool"
  },
  "api/ShanghaiWindy.Core.API.CameraAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.CameraAPI.html",
    "title": "Class CameraAPI | Panzer War Document",
    "keywords": "Class CameraAPI 摄像机 API Camera API Inheritance object CameraAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class CameraAPI Methods GetBackGroundCamera() 获取背景摄像机 Get background camera Declaration [DocGen] public static Camera GetBackGroundCamera() Returns Type Description Camera GetCameraTransform() 获取摄像机 Transform Get camera transform Declaration [DocGen] public static Transform GetCameraTransform() Returns Type Description Transform GetGameCamera() 获取当前的游戏摄像机 Get the current main game camera Declaration [DocGen] public static Camera GetGameCamera() Returns Type Description Camera GetScreenPosition(Vector3, out EIconPosition) 获取挂边 UI 位置 Get screen position Declaration [DocGen] public static Vector3 GetScreenPosition(Vector3 worldPos, out EIconPosition iconPosition) Parameters Type Name Description Vector3 worldPos EIconPosition iconPosition Returns Type Description Vector3 ScreenToWorldPoint(Camera, Vector3) 屏幕位置转为世界坐标 Screen point to world point Declaration [DocGen] public static Vector3 ScreenToWorldPoint(Camera camera, Vector3 screenPoint) Parameters Type Name Description Camera camera Vector3 screenPoint Returns Type Description Vector3 SetBackgroundCameraEulerAngles(Vector3) 设置背景摄像机旋转 Set background camera euler angles Declaration [DocGen] public static void SetBackgroundCameraEulerAngles(Vector3 eulerAngles) Parameters Type Name Description Vector3 eulerAngles SetBackgroundCameraPosition(Vector3) 设置背景摄像机位置 Set background camera position Declaration [DocGen] public static void SetBackgroundCameraPosition(Vector3 position) Parameters Type Name Description Vector3 position WorldToScreenPoint(Camera, Vector3) 世界坐标转为屏幕位置 World point to screen point Declaration [DocGen] public static Vector3 WorldToScreenPoint(Camera camera, Vector3 worldPoint) Parameters Type Name Description Camera camera Vector3 worldPoint Returns Type Description Vector3"
  },
  "api/ShanghaiWindy.Core.API.CaptureZoneAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.CaptureZoneAPI.html",
    "title": "Class CaptureZoneAPI | Panzer War Document",
    "keywords": "Class CaptureZoneAPI Inheritance object CaptureZoneAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class CaptureZoneAPI Methods AddCaptureZone(string, Vector3, float) 增加一个可占领区域 Add a capture zone Declaration [DocGen] public static long AddCaptureZone(string zoneName, Vector3 point, float radius) Parameters Type Name Description string zoneName Vector3 point float radius Returns Type Description long CapturingZone(int, Team, float) 占领某个区域 Capture a capture zone Declaration [DocGen] public static void CapturingZone(int id, TeamManager.Team team, float delta) Parameters Type Name Description int id TeamManager.Team team float delta GetCaptureZone(long) 获取占领点 Get capture zone Declaration [DocGen] public static CaptureZoneInfo GetCaptureZone(long id) Parameters Type Name Description long id Returns Type Description CaptureZoneInfo GetCaptureZoneFromName(string) 从名称获取占领点 Get capture zone from index Declaration [DocGen] public static CaptureZoneInfo GetCaptureZoneFromName(string name) Parameters Type Name Description string name Returns Type Description CaptureZoneInfo GetCaptureZoneInfos() 获取占领点列表 Get capture zone infos Declaration [DocGen] public static CaptureZoneInfo[] GetCaptureZoneInfos() Returns Type Description CaptureZoneInfo[] RemoveCaptureZone(int) 销毁一个占领区域 Remove a capture zone Declaration [DocGen] public static void RemoveCaptureZone(int id) Parameters Type Name Description int id"
  },
  "api/ShanghaiWindy.Core.API.ColorAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.ColorAPI.html",
    "title": "Class ColorAPI | Panzer War Document",
    "keywords": "Class ColorAPI Inheritance object ColorAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class ColorAPI Methods GetColor(float, float, float, float) Declaration [DocGen] public static Color GetColor(float r, float g, float b, float a) Parameters Type Name Description float r float g float b float a Returns Type Description Color"
  },
  "api/ShanghaiWindy.Core.API.ComponentAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.ComponentAPI.html",
    "title": "Class ComponentAPI | Panzer War Document",
    "keywords": "Class ComponentAPI Inheritance object ComponentAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class ComponentAPI Methods GetLuaComponent(GameObject, string) 根据类名获取指定 GameObject 上的 Lua 组件。 Gets a Lua component with the specified class name on the given GameObject. Declaration [DocGen] public static LuaTable GetLuaComponent(GameObject target, string className) Parameters Type Name Description GameObject target 目标 GameObject。 string className Lua 组件的类名。 Returns Type Description LuaTable 指定的 Lua 组件，如果不存在则返回 null。The specified Lua component, or null if it does not exist. GetLuaComponents(GameObject, string) 根据类名获取指定 GameObject 上的所有 Lua 组件。 Gets all Lua components with the specified class name on the given GameObject. Declaration [DocGen] public static LuaTable[] GetLuaComponents(GameObject target, string className) Parameters Type Name Description GameObject target 目标 GameObject。 string className Lua 组件的类名。 Returns Type Description LuaTable[] 指定的 Lua 组件数组。An array of the specified Lua components. GetLuaComponentsInChildren(GameObject, string) 在指定 GameObject 的子级中，根据类名获取所有 Lua 组件。 Gets all Lua components with the specified class name in the children of the given GameObject. Declaration [DocGen] public static LuaTable[] GetLuaComponentsInChildren(GameObject target, string className) Parameters Type Name Description GameObject target 目标 GameObject。 string className Lua 组件的类名。 Returns Type Description LuaTable[] 指定的 Lua 组件数组。An array of the specified Lua components. GetLuaComponentsInParent(GameObject, string) 在指定 GameObject 的父级中，根据类名获取所有 Lua 组件。 Gets all Lua components with the specified class name in the parent hierarchy of the given GameObject. Declaration [DocGen] public static LuaTable[] GetLuaComponentsInParent(GameObject target, string className) Parameters Type Name Description GameObject target 目标 GameObject。 string className Lua 组件的类名。 Returns Type Description LuaTable[] 指定的 Lua 组件数组。An array of the specified Lua components. GetNativeComponent(GameObject, string) 根据组件类型名获取指定 GameObject 上的原生组件。 Gets the native component with the specified type name on the given GameObject. Declaration [DocGen] public static Component GetNativeComponent(GameObject target, string componentName) Parameters Type Name Description GameObject target 目标 GameObject。 string componentName 组件类型名。 Returns Type Description Component 指定的原生组件。The specified native component. GetNativeComponents(GameObject, string) 根据组件类型名获取指定 GameObject 上的所有原生组件。 Gets all native components with the specified type name on the given GameObject. Declaration [DocGen] public static Component[] GetNativeComponents(GameObject target, string componentName) Parameters Type Name Description GameObject target 目标 GameObject。 string componentName 组件类型名。 Returns Type Description Component[] 指定的原生组件数组。An array of the specified native components. GetNativeComponentsInChildren(GameObject, string) 在指定 GameObject 的子级中，根据组件类型名获取所有原生组件。 Gets all native components with the specified type name in the children of the given GameObject. Declaration [DocGen] public static Component[] GetNativeComponentsInChildren(GameObject target, string componentName) Parameters Type Name Description GameObject target 目标 GameObject。 string componentName 组件类型名。 Returns Type Description Component[] 指定的原生组件数组。An array of the specified native components. GetNativeComponentsInParent(GameObject, string) 在指定 GameObject 的父级中，根据组件类型名获取所有原生组件。 Gets all native components with the specified type name in the parent hierarchy of the given GameObject. Declaration [DocGen] public static Component[] GetNativeComponentsInParent(GameObject target, string componentName) Parameters Type Name Description GameObject target 目标 GameObject。 string componentName 组件类型名。 Returns Type Description Component[] 指定的原生组件数组。An array of the specified native components."
  },
  "api/ShanghaiWindy.Core.API.ConfigAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.ConfigAPI.html",
    "title": "Class ConfigAPI | Panzer War Document",
    "keywords": "Class ConfigAPI Inheritance object ConfigAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class ConfigAPI Methods GetCaptureZoneConfig(string) 获取占领区任务配置 Get capture zone config Declaration [DocGen] public static CaptureZoneModeConfig GetCaptureZoneConfig(string guid) Parameters Type Name Description string guid Returns Type Description CaptureZoneModeConfig GetCaptureZoneConfigs() 获取占领点配置列表 Get capture zone config list Declaration [DocGen] public static CaptureZoneModeConfig[] GetCaptureZoneConfigs() Returns Type Description CaptureZoneModeConfig[] GetWaveMissionConfig(string) 获取防守任务配置 Get wave mission config Declaration [DocGen] public static WaveMissionConfig GetWaveMissionConfig(string guid) Parameters Type Name Description string guid Returns Type Description WaveMissionConfig GetWaveMissionConfigs() 获取防守任务配置列表 Get wave mission config list Declaration [DocGen] public static WaveMissionConfig[] GetWaveMissionConfigs() Returns Type Description WaveMissionConfig[]"
  },
  "api/ShanghaiWindy.Core.API.ConvertAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.ConvertAPI.html",
    "title": "Class ConvertAPI | Panzer War Document",
    "keywords": "Class ConvertAPI 将 Lua Table 转为 C# 对象 Convert Lua Table to C# object Inheritance object ConvertAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class ConvertAPI Methods CovertToBuffCaster(LuaTable) 将 Lua Class 转换为 IBuffCaster 对象 Covert Lua Class to IBuffCaster Object Declaration [DocGen] public static ILuaBuffCaster CovertToBuffCaster(LuaTable luaTable) Parameters Type Name Description LuaTable luaTable Returns Type Description ILuaBuffCaster"
  },
  "api/ShanghaiWindy.Core.API.CustomOptionUIAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.CustomOptionUIAPI.html",
    "title": "Class CustomOptionUIAPI | Panzer War Document",
    "keywords": "Class CustomOptionUIAPI 自定义 Option UI Custom Option UI Inheritance object CustomOptionUIAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class CustomOptionUIAPI Methods AddButton(string, string, Action) 添加按钮 Add Button Declaration [DocGen] public static void AddButton(string optionName, string buttonName, Action onValueChanged) Parameters Type Name Description string optionName string buttonName Action onValueChanged AddOption(string, string, string[], Action<string>) 添加选项 Add option Declaration [DocGen] public static void AddOption(string optionName, string defaultValue, string[] options, Action<string> onValueChanged) Parameters Type Name Description string optionName 选项名称 Option Name string defaultValue 默认值 Default Value string[] options 选项 Options Action<string> onValueChanged 值变化 OnValueChanged AddSlider(string, float, float, float, bool, Action<float>) 增加滑条 Add Slider Declaration [DocGen] public static void AddSlider(string optionName, float defaultValue, float minVal, float maxVal, bool isWholeNumbers, Action<float> onValueChanged) Parameters Type Name Description string optionName float defaultValue float minVal float maxVal bool isWholeNumbers Action<float> onValueChanged AddTextField(string, Action<string>) 添加文本框 Add text Declaration [DocGen] public static void AddTextField(string optionName, Action<string> onInputChanged) Parameters Type Name Description string optionName Action<string> onInputChanged AddTitle(string) 添加标题 Add Title Declaration [DocGen] public static void AddTitle(string optionName) Parameters Type Name Description string optionName ClearOptions() 清空 Options Clear Options Declaration [DocGen] public static void ClearOptions() ToggleUI(bool) 切换是否显示自定义 Option UI Toggle Option UI Declaration [DocGen] public static void ToggleUI(bool state) Parameters Type Name Description bool state"
  },
  "api/ShanghaiWindy.Core.API.FlightAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.FlightAPI.html",
    "title": "Class FlightAPI | Panzer War Document",
    "keywords": "Class FlightAPI 飞行器相关 API Flight-related API Inheritance object FlightAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class FlightAPI Methods GetFlightFireList(FlightInitSystem) 从飞行载具中获取所有飞行火力系统。 Get all the flight fire systems from the flight vehicle. Declaration [DocGen] public static List<FlightFireSystem> GetFlightFireList(FlightInitSystem vehicle) Parameters Type Name Description ShanghaiWindy.Core.FlightInitSystem vehicle 目标飞行载具 Target flight vehicle Returns Type Description List<FlightFireSystem> 飞行火力系统列表 List of flight fire systems"
  },
  "api/ShanghaiWindy.Core.API.FontAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.FontAPI.html",
    "title": "Class FontAPI | Panzer War Document",
    "keywords": "Class FontAPI Inheritance object FontAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class FontAPI Methods ReplaceAsMainFont(GameObject) Declaration [DocGen] public static void ReplaceAsMainFont(GameObject instance) Parameters Type Name Description GameObject instance"
  },
  "api/ShanghaiWindy.Core.API.GameAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.GameAPI.html",
    "title": "Class GameAPI | Panzer War Document",
    "keywords": "Class GameAPI 游戏相关全局 API Game related global api Inheritance object GameAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class GameAPI Methods RegisterVehicleDestroyedEvent(OnGameVehicleDestroyedDelegate) 注册车辆销毁事件 Register Vehicle Destroyed Event Declaration [DocGen] public static void RegisterVehicleDestroyedEvent(OnGameVehicleDestroyedDelegate gameVehicleDestroyedDelegate) Parameters Type Name Description OnGameVehicleDestroyedDelegate gameVehicleDestroyedDelegate 车辆销毁委托 - Vehicle Destroyed Delegate RegisterVehicleGameObjectDestroyedEvent(OnGameVehicleGameObjectRemovedDelegate) 注册车辆物体销毁事件 Register Vehicle GameObject Destroyed Event Declaration [DocGen] public static void RegisterVehicleGameObjectDestroyedEvent(OnGameVehicleGameObjectRemovedDelegate gameVehicleGameObjectDestroyedDelegate) Parameters Type Name Description OnGameVehicleGameObjectRemovedDelegate gameVehicleGameObjectDestroyedDelegate 车辆物体销毁委托 - Vehicle GameObject Destroyed Delegate RegisterVehicleLoadedEvent(OnGameVehicleLoadedDelegate) 注册车辆生成事件 Register Vehicl eLoaded Event Declaration [DocGen] public static void RegisterVehicleLoadedEvent(OnGameVehicleLoadedDelegate gameVehicleLoadedDelegate) Parameters Type Name Description OnGameVehicleLoadedDelegate gameVehicleLoadedDelegate 车辆生成委托 - Vehicle Loaded Delegate UnRegisterVehicleDestroyedEvent(OnGameVehicleDestroyedDelegate) 注销车辆销毁事件 UnRegister Vehicle Destroyed Event Declaration [DocGen] public static void UnRegisterVehicleDestroyedEvent(OnGameVehicleDestroyedDelegate gameVehicleDestroyedDelegate) Parameters Type Name Description OnGameVehicleDestroyedDelegate gameVehicleDestroyedDelegate 车辆销毁委托 - Vehicle Destroyed Delegate UnRegisterVehicleGameObjectDestroyedEvent(OnGameVehicleGameObjectRemovedDelegate) 注销车辆物体销毁事件 UnRegister Vehicle GameObject Destroyed Event Declaration [DocGen] public static void UnRegisterVehicleGameObjectDestroyedEvent(OnGameVehicleGameObjectRemovedDelegate gameVehicleGameObjectDestroyedDelegate) Parameters Type Name Description OnGameVehicleGameObjectRemovedDelegate gameVehicleGameObjectDestroyedDelegate 车辆物体销毁委托 - Vehicle GameObject Destroyed Delegate UnRegisterVehicleLoadedEvent(OnGameVehicleLoadedDelegate) 注销车辆生成事件 UnRegister Vehicle Loaded Event Declaration [DocGen] public static void UnRegisterVehicleLoadedEvent(OnGameVehicleLoadedDelegate gameVehicleLoadedDelegate) Parameters Type Name Description OnGameVehicleLoadedDelegate gameVehicleLoadedDelegate 车辆生成委托 - Vehicle Loaded Delegate"
  },
  "api/ShanghaiWindy.Core.API.GameObjectAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.GameObjectAPI.html",
    "title": "Class GameObjectAPI | Panzer War Document",
    "keywords": "Class GameObjectAPI Inheritance object GameObjectAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class GameObjectAPI Methods Clone(GameObject) 复制物体 Clone object Declaration [DocGen] public static GameObject Clone(GameObject go) Parameters Type Name Description GameObject go Returns Type Description GameObject DestroyObject(GameObject) 销毁物体 Destroy object Declaration [DocGen] public static void DestroyObject(GameObject go) Parameters Type Name Description GameObject go DontDestroyOnLoad(GameObject) 切换场景时候保留物体 Do not destroy the target Object when loading a new Scene Declaration [DocGen] public static void DontDestroyOnLoad(GameObject go) Parameters Type Name Description GameObject go Find(GameObject, string) 寻找路径物体 Find path Declaration [DocGen] public static GameObject Find(GameObject go, string path) Parameters Type Name Description GameObject go string path Returns Type Description GameObject SetActive(GameObject, bool) 是否激活物体 Set object active Declaration [DocGen] public static void SetActive(GameObject go, bool isActive) Parameters Type Name Description GameObject go bool isActive SetVisible(GameObject, bool) 是否显示物体 Set object visible Declaration [DocGen] public static void SetVisible(GameObject go, bool isVisible) Parameters Type Name Description GameObject go bool isVisible"
  },
  "api/ShanghaiWindy.Core.API.html": {
    "href": "api/ShanghaiWindy.Core.API.html",
    "title": "Namespace ShanghaiWindy.Core.API | Panzer War Document",
    "keywords": "Namespace ShanghaiWindy.Core.API Classes ArmyAPI 陆军相关 API Army-related API AssetAPI 资源相关 API Asset-related API BattlePlayerAPI 战斗玩家 Battle Player BotAPI BuffAPI Buff API CameraAPI 摄像机 API Camera API CaptureZoneAPI ColorAPI ComponentAPI ConfigAPI ConvertAPI 将 Lua Table 转为 C# 对象 Convert Lua Table to C# object CustomOptionUIAPI 自定义 Option UI Custom Option UI FlightAPI 飞行器相关 API Flight-related API FontAPI GameAPI 游戏相关全局 API Game related global api GameObjectAPI InputAPI 输入处理 API Input Handler API MapAPI Map api MaterialAPI MeshAPI ModeAPI 模式 API Mode API PointAPI 位置点 API Point API RandomAPI 随机 API Random API SoundAPI 声音相关 API Sound-related API SpawnAPI 重生点 API Spawn API SpawnVehicleAPI 载具生成API Vehicle Spawn APIs StorageAPI 存储 API Storage API TankAPI 坦克相关 API Tank-related API TeamAPI 团队接口 Team API TimeAPI TransformAPI UIAPI 模式 UI API Mode UI API VehicleAPI 载具通用 API Vehicle Common APIs"
  },
  "api/ShanghaiWindy.Core.API.InputAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.InputAPI.html",
    "title": "Class InputAPI | Panzer War Document",
    "keywords": "Class InputAPI 输入处理 API Input Handler API Inheritance object InputAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class InputAPI Methods GetBindings() Declaration [DocGen] public static Dictionary<string, InputAPICache> GetBindings() Returns Type Description Dictionary<string, InputAPICache> RegisterAddKeyInput(OnKeyRegistered) Declaration [DocGen] public static void RegisterAddKeyInput(OnKeyRegistered onKeyRegistered) Parameters Type Name Description OnKeyRegistered onKeyRegistered RegisterKeyInput(string, string, OnKeyPerformed, OnKeyCanceled) 注册按键输入 Register Key Input Declaration [DocGen] public static void RegisterKeyInput(string actionName, string keyCode, OnKeyPerformed keyPerformed, OnKeyCanceled keyCanceled) Parameters Type Name Description string actionName 操作名称 Action Name string keyCode 按键代码 Key Code OnKeyPerformed keyPerformed 按键执行时的回调 Key Performed Callback OnKeyCanceled keyCanceled 按键取消时的回调 Key Canceled Callback RegisterRemoveKeyInput(OnKeyUnregistered) Declaration [DocGen] public static void RegisterRemoveKeyInput(OnKeyUnregistered onKeyUnregistered) Parameters Type Name Description OnKeyUnregistered onKeyUnregistered UnregisterAddKeyInput(OnKeyRegistered) Declaration [DocGen] public static void UnregisterAddKeyInput(OnKeyRegistered onKeyRegistered) Parameters Type Name Description OnKeyRegistered onKeyRegistered UnregisterKeyInput(string) 取消注册按键输入 Unregister Key Input Declaration [DocGen] public static void UnregisterKeyInput(string actionName) Parameters Type Name Description string actionName 操作名称 Action Name UnregisterRemoveKeyInput(OnKeyUnregistered) Declaration [DocGen] public static void UnregisterRemoveKeyInput(OnKeyUnregistered onKeyUnregistered) Parameters Type Name Description OnKeyUnregistered onKeyUnregistered"
  },
  "api/ShanghaiWindy.Core.API.MapAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.MapAPI.html",
    "title": "Class MapAPI | Panzer War Document",
    "keywords": "Class MapAPI Map api Inheritance object MapAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class MapAPI Methods GetMapDataByGuid(string) Get map from guid Declaration [DocGen] public static MapData GetMapDataByGuid(string guid) Parameters Type Name Description string guid Returns Type Description ShanghaiWindy.Core.MapData"
  },
  "api/ShanghaiWindy.Core.API.MaterialAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.MaterialAPI.html",
    "title": "Class MaterialAPI | Panzer War Document",
    "keywords": "Class MaterialAPI Inheritance object MaterialAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class MaterialAPI Methods AsyncApplyMaterial(string, GameObject) Declaration [DocGen] public static void AsyncApplyMaterial(string guid, GameObject instance) Parameters Type Name Description string guid GameObject instance"
  },
  "api/ShanghaiWindy.Core.API.MeshAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.MeshAPI.html",
    "title": "Class MeshAPI | Panzer War Document",
    "keywords": "Class MeshAPI Inheritance object MeshAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class MeshAPI Methods CreateMesh(Vector3[], float) 创建 mesh Create mesh Declaration [DocGen] public static int CreateMesh(Vector3[] points, float height) Parameters Type Name Description Vector3[] points float height Returns Type Description int CreateSphereTriggerBox(Vector3, float, Action<Collider>, Action<Collider>) Declaration [DocGen] public static int CreateSphereTriggerBox(Vector3 position, float radius, Action<Collider> onEnter, Action<Collider> onExit) Parameters Type Name Description Vector3 position float radius Action<Collider> onEnter Action<Collider> onExit Returns Type Description int DeleteMesh(int) 删除 mesh Delete mesh Declaration [DocGen] public static void DeleteMesh(int meshId) Parameters Type Name Description int meshId GetMesh(int) 获取 mesh Get mesh Declaration [DocGen] public static GameObject GetMesh(int meshId) Parameters Type Name Description int meshId Returns Type Description GameObject IsPointInPolygon(Vector3, Vector3[]) Declaration [DocGen] public static bool IsPointInPolygon(Vector3 point, Vector3[] polygonPoints) Parameters Type Name Description Vector3 point Vector3[] polygonPoints Returns Type Description bool"
  },
  "api/ShanghaiWindy.Core.API.ModeAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.ModeAPI.html",
    "title": "Class ModeAPI | Panzer War Document",
    "keywords": "Class ModeAPI 模式 API Mode API Inheritance object ModeAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class ModeAPI Methods AddBattlePlayer(AbstractBattlePlayer) 添加玩家 Add battle player Declaration [DocGen] public static void AddBattlePlayer(AbstractBattlePlayer battlePlayer) Parameters Type Name Description AbstractBattlePlayer battlePlayer AddCustomMenuOption(string, Action) 增加菜单自定义选项 Add custom menu option Declaration [DocGen] public static void AddCustomMenuOption(string optionName, Action callback) Parameters Type Name Description string optionName Action callback DisableCheat() 关闭作弊 Disable cheat Declaration [DocGen] public static void DisableCheat() EnableCheat() 开启作弊 Enable cheat Declaration [DocGen] public static void EnableCheat() EnableCountDown(int, string, string, Action) 显示倒计时 Enable count down Declaration [DocGen] public static void EnableCountDown(int countDown, string countDownTitle, string countDownDescription, Action callback) Parameters Type Name Description int countDown string countDownTitle string countDownDescription Action callback EndRecord() Declaration [DocGen] public static void EndRecord() ExitMode() 退出模式 Exit Mode Declaration [DocGen] public static void ExitMode() GetModeInstance() 获取模式 lua class 的实例 Get mode instance of lua class Declaration [DocGen] public static LuaTable GetModeInstance() Returns Type Description LuaTable LoadBattleScene(MapData, OnBattleSceneLoadedDelegate) 加载战斗场景 Load battle scene Declaration [DocGen] public static void LoadBattleScene(MapData mapData, OnBattleSceneLoadedDelegate callback) Parameters Type Name Description ShanghaiWindy.Core.MapData mapData 地图 OnBattleSceneLoadedDelegate callback 场景加载完毕回调 Battle scene loaded callback LoadBattleUI(OnBattleUILoadedDelegate) 加载战斗 UI Load battle ui Declaration [DocGen] public static void LoadBattleUI(OnBattleUILoadedDelegate callback) Parameters Type Name Description OnBattleUILoadedDelegate callback RegisterCapturePointCallback(EventDispatcherDelegate<CaptureEvent>) 注册占领点事件 Register capture point Declaration [DocGen] public static void RegisterCapturePointCallback(EventDispatcherDelegate<CaptureEvent> captureDelegate) Parameters Type Name Description ShanghaiWindy.Core.EventDispatcherDelegate<T><CaptureEvent> captureDelegate RegisterPickVehicleCallBack(EventDispatcherDelegate<VehiclePickEvent>) 注册选中载具回调 Register vehicle pick callabck Declaration [DocGen] public static void RegisterPickVehicleCallBack(EventDispatcherDelegate<VehiclePickEvent> pickDelegate) Parameters Type Name Description ShanghaiWindy.Core.EventDispatcherDelegate<T><VehiclePickEvent> pickDelegate 选中载具回调 Pick vehicle callback RemoveBattlePlayer(int) 删除玩家 Remove battle player Declaration [DocGen] public static void RemoveBattlePlayer(int uid) Parameters Type Name Description int uid RemoveCustomMenuOption(string) 删除菜单自定义选项 Remove custom menu option Declaration [DocGen] public static void RemoveCustomMenuOption(string optionName) Parameters Type Name Description string optionName ShowPickVehicleListUI(Action<List<string>>) 显示选择载具组 UI Show pick vehicle list ui Declaration [DocGen] public static void ShowPickVehicleListUI(Action<List<string>> callback) Parameters Type Name Description Action<List<string>> callback ShowPickVehicleUI(bool) 显示选择载具 UI Show pick vehicle ui Declaration [DocGen] public static void ShowPickVehicleUI(bool isForcePick) Parameters Type Name Description bool isForcePick ShowPickVehicleUIWithList(bool, List<VehicleInfo>) 显示选择载具 UI (带列表) Show pick vehicle ui (with list) Declaration [DocGen] public static void ShowPickVehicleUIWithList(bool isForcePick, List<VehicleInfo> vehicleList) Parameters Type Name Description bool isForcePick List<VehicleInfo> vehicleList ShowVictoryOrDefeat(bool) 显示成功失败界面 Show victory or default Declaration [DocGen] public static void ShowVictoryOrDefeat(bool isVictory) Parameters Type Name Description bool isVictory StartRecord() Declaration [DocGen] public static void StartRecord() ToggleScore(bool) 显示与隐藏比分 Show or hide score Declaration [DocGen] public static void ToggleScore(bool isShownScore) Parameters Type Name Description bool isShownScore ToggleVehicleLockState(bool, BaseInitSystem) 切换是否锁住载具 Toggle lock vehicle state Declaration [DocGen] public static void ToggleVehicleLockState(bool isLock, BaseInitSystem vehicle) Parameters Type Name Description bool isLock BaseInitSystem vehicle UnRegisterCapturePointCallback(EventDispatcherDelegate<CaptureEvent>) 取消注册占领点事件 Unregister capture point Declaration [DocGen] public static void UnRegisterCapturePointCallback(EventDispatcherDelegate<CaptureEvent> captureDelegate) Parameters Type Name Description ShanghaiWindy.Core.EventDispatcherDelegate<T><CaptureEvent> captureDelegate UnRegisterPickVehicleCallBack(EventDispatcherDelegate<VehiclePickEvent>) 取消注册选中载具回调 UnRegister vehicle pick callabck Declaration [DocGen] public static void UnRegisterPickVehicleCallBack(EventDispatcherDelegate<VehiclePickEvent> pickDelegate) Parameters Type Name Description ShanghaiWindy.Core.EventDispatcherDelegate<T><VehiclePickEvent> pickDelegate 选中载具回调 Pick vehicle callback UpdateScore(int, int, int, int) 更新比分 Update score Declaration [DocGen] public static void UpdateScore(int friendTeamScore, int enemyTeamScore, int totalFriendTeamScore, int totalEnemyTeamScore) Parameters Type Name Description int friendTeamScore int enemyTeamScore int totalFriendTeamScore int totalEnemyTeamScore"
  },
  "api/ShanghaiWindy.Core.API.PointAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.PointAPI.html",
    "title": "Class PointAPI | Panzer War Document",
    "keywords": "Class PointAPI 位置点 API Point API Inheritance object PointAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class PointAPI Methods GetPatrolPoints() 获取巡逻点 Get Patrol Points Declaration [DocGen] public static GameObject[] GetPatrolPoints() Returns Type Description GameObject[] 包含巡逻点的 GameObject 数组 GetTeamAStartPoints() 获取 A 队起始点 Get Team A Start Points Declaration [DocGen] public static GameObject[] GetTeamAStartPoints() Returns Type Description GameObject[] 包含 A 队起始点的 GameObject 数组 GetTeamBStartPoints() 获取 B 队起始点 Get Team B Start Points Declaration [DocGen] public static GameObject[] GetTeamBStartPoints() Returns Type Description GameObject[] 包含 B 队起始点的 GameObject 数组"
  },
  "api/ShanghaiWindy.Core.API.RandomAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.RandomAPI.html",
    "title": "Class RandomAPI | Panzer War Document",
    "keywords": "Class RandomAPI 随机 API Random API Inheritance object RandomAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class RandomAPI Methods GetRandomVehicleFromList(List<VehicleInfo>) 从载具列表随机一个载具 Random vehicle from list Declaration [DocGen] public static VehicleInfo GetRandomVehicleFromList(List<VehicleInfo> vehicleInfos) Parameters Type Name Description List<VehicleInfo> vehicleInfos Returns Type Description VehicleInfo"
  },
  "api/ShanghaiWindy.Core.API.SoundAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.SoundAPI.html",
    "title": "Class SoundAPI | Panzer War Document",
    "keywords": "Class SoundAPI 声音相关 API Sound-related API Inheritance object SoundAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class SoundAPI Methods PlayOneShot(string, Vector3) 播放一次性音效 Play One-Shot Sound Declaration [DocGen] public static void PlayOneShot(string guid, Vector3 position) Parameters Type Name Description string guid 音频事件 GUID Event GUID Vector3 position 音效位置 Sound Position PostEvent(string, Vector3, PostEventLoadedDelegate) 发布音频事件 Post Sound Event Declaration [DocGen] public static void PostEvent(string guid, Vector3 position, PostEventLoadedDelegate postEventLoadedDelegate) Parameters Type Name Description string guid 音频事件 GUID Event GUID Vector3 position PostEventLoadedDelegate postEventLoadedDelegate 音频事件加载完成时的回调 Callback when the event is loaded ReleaseEvent(EventInstance) 释放音频事件 Release Sound Event Declaration [DocGen] public static void ReleaseEvent(EventInstance eventInstance) Parameters Type Name Description EventInstance eventInstance 音频事件实例 Event Instance"
  },
  "api/ShanghaiWindy.Core.API.SpawnAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.SpawnAPI.html",
    "title": "Class SpawnAPI | Panzer War Document",
    "keywords": "Class SpawnAPI 重生点 API Spawn API Inheritance object SpawnAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class SpawnAPI Methods AsyncSpawn(Team, Action<Transform>) 异步寻找可以使用的出生点 Find spawn point in async Declaration [DocGen] public static void AsyncSpawn(TeamManager.Team team, Action<Transform> onSpawnPoint) Parameters Type Name Description TeamManager.Team team Action<Transform> onSpawnPoint AsyncSpawnGivenPoints(Transform[], Action<Transform>) 异步寻找当前的出生点可用点 Find spawn given point in async Declaration [DocGen] public static void AsyncSpawnGivenPoints(Transform[] points, Action<Transform> onSpawnPoint) Parameters Type Name Description Transform[] points Action<Transform> onSpawnPoint"
  },
  "api/ShanghaiWindy.Core.API.SpawnVehicleAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.SpawnVehicleAPI.html",
    "title": "Class SpawnVehicleAPI | Panzer War Document",
    "keywords": "Class SpawnVehicleAPI 载具生成API Vehicle Spawn APIs Inheritance object SpawnVehicleAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class SpawnVehicleAPI Methods CreateFreeCamera(Vector3, Quaternion) 创建一个自由摄像机 Create a free camera Declaration [DocGen] public static FreeCameraInitSystem CreateFreeCamera(Vector3 pos, Quaternion rot) Parameters Type Name Description Vector3 pos 生成位置 Spawn position Quaternion rot 生成旋转 Spawn rotation Returns Type Description ShanghaiWindy.Core.FreeCameraInitSystem 在生成位置创建的自由摄像机 A created free camera at spawn tranform CreateLocalBot(VehicleInfo, Vector3, Quaternion, Team, bool, bool) 创建一个本地AI Create a Local Bot Declaration [DocGen] public static void CreateLocalBot(VehicleInfo vehicleInfo, Vector3 pos, Quaternion rot, TeamManager.Team botTeam, bool isKeepWreckage, bool isIdle) Parameters Type Name Description VehicleInfo vehicleInfo 从VehicleInfoManager获取载具信息 Get vehicle info from VehicleInfoManager Vector3 pos 生成位置 Spawn position Quaternion rot 生成旋转 Spawn rotation TeamManager.Team botTeam 决定玩家所在队伍 Decide which team player spawned bool isKeepWreckage 在mod支持的情况下保留残骸 Keep wreckage when the mod supports bool isIdle 是否处于空闲或攻击玩家状态 Is idle or attack player CreatePlayer(VehicleInfo, Vector3, Quaternion, Action<BaseInitSystem>) 创建一个本地玩家。您可以从GameDataManager.PlayerTeam设置玩家队伍 Create a Local Player. You can set player team from GameDataManager.PlayerTeam Declaration [DocGen] public static BaseInitSystem CreatePlayer(VehicleInfo vehicleInfo, Vector3 pos, Quaternion rot, Action<BaseInitSystem> onPreBind) Parameters Type Name Description VehicleInfo vehicleInfo 从VehicleInfoManager获取载具信息 Get vehicle info from VehicleInfoManager Vector3 pos 生成位置 Spawn position Quaternion rot 生成旋转 Spawn rotation Action<BaseInitSystem> onPreBind 载具创建前的回调 A callback before vehicle is created Returns Type Description BaseInitSystem 在生成位置创建的本地玩家 A created local player at spawn tranform"
  },
  "api/ShanghaiWindy.Core.API.StorageAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.StorageAPI.html",
    "title": "Class StorageAPI | Panzer War Document",
    "keywords": "Class StorageAPI 存储 API Storage API Inheritance object StorageAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class StorageAPI Methods GetBooleanValue(string, string, bool) 获得布尔 Get Boolean Declaration [DocGen] public static bool GetBooleanValue(string group, string key, bool defaultValue) Parameters Type Name Description string group string key bool defaultValue Returns Type Description bool GetNumberValue(string, string, float) 获得 Number Get Number Declaration [DocGen] public static float GetNumberValue(string group, string key, float defaultValue) Parameters Type Name Description string group string key float defaultValue Returns Type Description float GetStringArrayValue(string, string, string[]) 获得 string array Get string array Declaration [DocGen] public static string[] GetStringArrayValue(string group, string key, string[] defaultValue) Parameters Type Name Description string group string key string[] defaultValue Returns Type Description string[] GetStringValue(string, string, string) 获得 String Get String Declaration [DocGen] public static string GetStringValue(string group, string key, string defaultValue) Parameters Type Name Description string group string key string defaultValue Returns Type Description string SaveStorage() 保存 Save Storage Declaration [DocGen] public static void SaveStorage() SetBooleanValue(string, string, bool) 设置布尔 Set Boolean Declaration [DocGen] public static void SetBooleanValue(string group, string key, bool value) Parameters Type Name Description string group string key bool value SetNumberValue(string, string, float) 设置 Number Set Number Declaration [DocGen] public static void SetNumberValue(string group, string key, float value) Parameters Type Name Description string group string key float value SetStringArrayValue(string, string, string[]) 设置 string array Set string array Declaration [DocGen] public static void SetStringArrayValue(string group, string key, string[] value) Parameters Type Name Description string group string key string[] value SetStringValue(string, string, string) 设置 String Set String Declaration [DocGen] public static void SetStringValue(string group, string key, string value) Parameters Type Name Description string group string key string value"
  },
  "api/ShanghaiWindy.Core.API.TankAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.TankAPI.html",
    "title": "Class TankAPI | Panzer War Document",
    "keywords": "Class TankAPI 坦克相关 API Tank-related API Inheritance object TankAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class TankAPI Methods GetTankFireList(TankInitSystem) 从坦克载具中获取所有坦克火力系统。 Get all the tank fire systems from the tank vehicle. Declaration [DocGen] public static List<TankFire> GetTankFireList(TankInitSystem vehicle) Parameters Type Name Description TankInitSystem vehicle 目标坦克载具 Target tank vehicle Returns Type Description List<TankFire> 坦克火力系统列表 List of tank fire systems"
  },
  "api/ShanghaiWindy.Core.API.TeamAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.TeamAPI.html",
    "title": "Class TeamAPI | Panzer War Document",
    "keywords": "Class TeamAPI 团队接口 Team API Inheritance object TeamAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class TeamAPI Methods GetBlueTeam() Declaration [DocGen] public static TeamManager.Team GetBlueTeam() Returns Type Description TeamManager.Team GetEnemyTeam() 获取敌对团队 Get Enemy Team Declaration [DocGen] public static TeamManager.Team GetEnemyTeam() Returns Type Description TeamManager.Team 敌对团队 Enemy Team GetNoneTeam() Declaration [DocGen] public static TeamManager.Team GetNoneTeam() Returns Type Description TeamManager.Team GetPlayerTeam() 获取玩家所在团队 Get Player Team Declaration [DocGen] public static TeamManager.Team GetPlayerTeam() Returns Type Description TeamManager.Team 玩家所在团队 Player Team GetRedTeam() Declaration [DocGen] public static TeamManager.Team GetRedTeam() Returns Type Description TeamManager.Team SetPlayerTeam(Team) 设置自己的队伍 Set player team Declaration [DocGen] public static void SetPlayerTeam(TeamManager.Team playerTeam) Parameters Type Name Description TeamManager.Team playerTeam SetPlayerTeamAsBlueTeam() 设置自己的队伍为 Blue Team Set player team as blue team Declaration [DocGen] public static void SetPlayerTeamAsBlueTeam() SetPlayerTeamAsRedTeam() 设置自己队伍为 Red Team Set player team as red team Declaration [DocGen] public static void SetPlayerTeamAsRedTeam()"
  },
  "api/ShanghaiWindy.Core.API.TimeAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.TimeAPI.html",
    "title": "Class TimeAPI | Panzer War Document",
    "keywords": "Class TimeAPI Inheritance object TimeAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class TimeAPI Methods GetDeltaTime() Declaration [DocGen] public static float GetDeltaTime() Returns Type Description float GetFixedDeltaTime() Declaration [DocGen] public static float GetFixedDeltaTime() Returns Type Description float GetTime() Declaration [DocGen] public static float GetTime() Returns Type Description float RegisterFixedFrameTick(OnTickDelegate) Declaration [DocGen] public static void RegisterFixedFrameTick(OnTickDelegate callback) Parameters Type Name Description OnTickDelegate callback RegisterLateFrameTick(OnTickDelegate) Declaration [DocGen] public static void RegisterLateFrameTick(OnTickDelegate callback) Parameters Type Name Description OnTickDelegate callback RegisterQuarterTick(OnQuarterTickDelegate) Declaration [DocGen] public static void RegisterQuarterTick(OnQuarterTickDelegate callback) Parameters Type Name Description OnQuarterTickDelegate callback UnRegisterFixedFrameTick(OnTickDelegate) Declaration [DocGen] public static void UnRegisterFixedFrameTick(OnTickDelegate callback) Parameters Type Name Description OnTickDelegate callback UnRegisterLateFrameTick(OnTickDelegate) Declaration [DocGen] public static void UnRegisterLateFrameTick(OnTickDelegate callback) Parameters Type Name Description OnTickDelegate callback UnRegisterQuarterTick(OnQuarterTickDelegate) Declaration [DocGen] public static void UnRegisterQuarterTick(OnQuarterTickDelegate callback) Parameters Type Name Description OnQuarterTickDelegate callback"
  },
  "api/ShanghaiWindy.Core.API.TransformAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.TransformAPI.html",
    "title": "Class TransformAPI | Panzer War Document",
    "keywords": "Class TransformAPI Inheritance object TransformAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class TransformAPI Methods CreateTransform(string) 创建 Transform Create transform Declaration [DocGen] public static Transform CreateTransform(string transformName) Parameters Type Name Description string transformName Returns Type Description Transform EulerToRot(Vector3) From euler angle to rotation Declaration [DocGen] public static Quaternion EulerToRot(Vector3 eulerAngle) Parameters Type Name Description Vector3 eulerAngle Returns Type Description Quaternion Find(Transform, string) 寻找路径物体 Find path Declaration [DocGen] public static Transform Find(Transform trans, string path) Parameters Type Name Description Transform trans string path Returns Type Description Transform"
  },
  "api/ShanghaiWindy.Core.API.UIAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.UIAPI.html",
    "title": "Class UIAPI | Panzer War Document",
    "keywords": "Class UIAPI 模式 UI API Mode UI API Inheritance object UIAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class UIAPI Methods RemoveUI(UIEnum) 关闭内置 UI Remove builtin ui Declaration [DocGen] public static void RemoveUI(UIEnum index) Parameters Type Name Description UIEnum index 序号 Index ShowUI(UIEnum) 显示内置 UI Show builtin ui Declaration [DocGen] public static void ShowUI(UIEnum index) Parameters Type Name Description UIEnum index 序号 Index"
  },
  "api/ShanghaiWindy.Core.API.VehicleAPI.html": {
    "href": "api/ShanghaiWindy.Core.API.VehicleAPI.html",
    "title": "Class VehicleAPI | Panzer War Document",
    "keywords": "Class VehicleAPI 载具通用 API Vehicle Common APIs Inheritance object VehicleAPI Namespace: ShanghaiWindy.Core.API Assembly: cs.temp.dll.dll Syntax [DocGen] public static class VehicleAPI Methods GetAllDriveableVehicleList(bool) 获取所有可驾驶载具列表 Get All Driveable Vehicle List Declaration [DocGen] public static List<VehicleInfo> GetAllDriveableVehicleList(bool ignoreModule) Parameters Type Name Description bool ignoreModule 是否在模块模式下过滤非模块载具 Ignore non-module vehicles in module mode Returns Type Description List<VehicleInfo> 可驾驶载具列表 Driveable Vehicle List GetFilteredBotVehicles(int, int, bool, Type) 过滤人机载具 Filter Bot Vehicle Declaration [DocGen] public static List<VehicleInfo> GetFilteredBotVehicles(int minRank, int maxRank, bool allowArtillery, VehicleInfo.Type vehicleType) Parameters Type Name Description int minRank 最小等级 Min Rank int maxRank 最大等级 Max Rank bool allowArtillery 允许使用火炮 Allow Artillery VehicleInfo.ShanghaiWindy.Core.VehicleInfo.Type vehicleType 载具类型 Vehicle Type Returns Type Description List<VehicleInfo> 载具列表 Vehicle List GetFilteredVehicles(int, int) 过滤载具 Filter Vehicle Declaration [DocGen] public static List<VehicleInfo> GetFilteredVehicles(int minRank, int maxRank) Parameters Type Name Description int minRank 最小等级 Min Rank int maxRank 最大等级 Max Rank Returns Type Description List<VehicleInfo> 载具列表 Vehicle List GetFireList(BaseInitSystem) 从载具中获取所有火力系统。 Get all the fire system from vehicle. Declaration [DocGen] public static List<BaseFireSystem> GetFireList(BaseInitSystem vehicle) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle Returns Type Description List<BaseFireSystem> 火力系统数组 Array of fire system GetPlayerVehicle() 获取玩家的载具。如果玩家未出现，则可能为空。 Get the player vehicle. It can be null if player is not spawned. Declaration [DocGen] public static BaseInitSystem GetPlayerVehicle() Returns Type Description BaseInitSystem 一个已存在的本地玩家 A exist local player GetVehicleInfoByGuid(string) 获取载具信息 Get vehicle info guid Declaration [DocGen] public static VehicleInfo GetVehicleInfoByGuid(string guid) Parameters Type Name Description string guid Returns Type Description VehicleInfo GetVehicleInfoByName(string) 获取载具信息 Get Vehicle Info Declaration [DocGen] public static VehicleInfo GetVehicleInfoByName(string vehicleName) Parameters Type Name Description string vehicleName 载具名称 Vehicle Name Returns Type Description VehicleInfo 载具信息 Vehicle Info IsArmyVehicle(BaseInitSystem) 判断载具是否为陆军类型 Declaration [DocGen] public static bool IsArmyVehicle(BaseInitSystem vehicle) Parameters Type Name Description BaseInitSystem vehicle 基础类型载具 Vehicle Returns Type Description bool 返回载具是否为陆军类型 true if ArmyVehicle, false otherwise IsFlightVehicle(BaseInitSystem) 判断载具是否为飞行器类型 Declaration [DocGen] public static bool IsFlightVehicle(BaseInitSystem vehicle) Parameters Type Name Description BaseInitSystem vehicle 基础类型载具 Vehicle Returns Type Description bool 返回载具是否为飞行器类型 true if FlightVehicle, false otherwise IsTankVehicle(BaseInitSystem) 判断载具是否为坦克类型 Declaration [DocGen] public static bool IsTankVehicle(BaseInitSystem vehicle) Parameters Type Name Description BaseInitSystem vehicle 基础类型载具 Vehicle Returns Type Description bool 返回载具是否为坦克类型 true if TankVehicle, false otherwise LoadVehicleThumbnail(VehicleInfo, OnVehicleThumbnailLoadedDelegate) 加载缩略图 Declaration [DocGen] public static void LoadVehicleThumbnail(VehicleInfo vehicleInfo, OnVehicleThumbnailLoadedDelegate callback) Parameters Type Name Description VehicleInfo vehicleInfo OnVehicleThumbnailLoadedDelegate callback RegisterBulletFiredEvent(BaseInitSystem, int, OnFiredDelegate) 注册载具开火时触发的事件。 Register an event dispatched when vehicle fired. Declaration [DocGen] public static void RegisterBulletFiredEvent(BaseInitSystem vehicle, int index, OnFiredDelegate tankFiredDelegate) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle int index 火炮序号 Fire index OnFiredDelegate tankFiredDelegate 开火回调 Fired Callback RegisterVehicleDestroyedEvent(BaseInitSystem, OnVehicleDestroyedDelegate) 注册载具被摧毁事件。 Register an event dispatched when vehicle destroyed. Declaration [DocGen] public static void RegisterVehicleDestroyedEvent(BaseInitSystem vehicle, OnVehicleDestroyedDelegate vehicleDestroyedDelegate) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle OnVehicleDestroyedDelegate vehicleDestroyedDelegate 载具被击毁回调 Vehicle destroyed callback RegisterVehicleGameObjectDestroyedEvent(BaseInitSystem, OnVehicleRemovedDelegate) 注册载具物体被摧毁时触发的事件。 Register an event dispatched when vehicle gamobject destroyed. Declaration [DocGen] public static void RegisterVehicleGameObjectDestroyedEvent(BaseInitSystem vehicle, OnVehicleRemovedDelegate vehicleGameObjectDestroyed) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle OnVehicleRemovedDelegate vehicleGameObjectDestroyed 载具物体被摧毁回调 Vehicle gamobject destroyed callback RegisterVehicleLoadedEvent(BaseInitSystem, OnVehicleLoadedDelegate) 注册载具加载事件。 Register an event dispatched when vehicle loaded. Declaration [DocGen] public static void RegisterVehicleLoadedEvent(BaseInitSystem vehicle, OnVehicleLoadedDelegate vehicleLoadedDelegate) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle OnVehicleLoadedDelegate vehicleLoadedDelegate 载具加载完毕回调 Vehicle loaded callback TryGetArmyInitSystemFromGameObject(GameObject, out ArmyInitSystem) 尝试从目标游戏对象中获取陆军载具。 Try get army vehicle from target gameobject. Declaration [DocGen] public static bool TryGetArmyInitSystemFromGameObject(GameObject gameObject, out ArmyInitSystem armyInitSystem) Parameters Type Name Description GameObject gameObject 目标游戏对象 Target gameobject ArmyInitSystem armyInitSystem 步兵载具 Army Returns Type Description bool 是否为步兵载具 Is army TryGetBaseInitSystemFromGameObject(GameObject, out BaseInitSystem) 尝试从目标游戏对象中获取载具 Try get vehicle from target gameobject. Declaration [DocGen] public static bool TryGetBaseInitSystemFromGameObject(GameObject gameObject, out BaseInitSystem baseInitSystem) Parameters Type Name Description GameObject gameObject BaseInitSystem baseInitSystem Returns Type Description bool TryGetFlightInitSystemFromGameObject(GameObject, out FlightInitSystem) 尝试从目标游戏对象中获取飞行载具。 Try get flight vehicle from target gameobject. Declaration [DocGen] public static bool TryGetFlightInitSystemFromGameObject(GameObject gameObject, out FlightInitSystem flightInitSystem) Parameters Type Name Description GameObject gameObject 目标游戏对象 Target gameobject ShanghaiWindy.Core.FlightInitSystem flightInitSystem 飞行载具 Flight Returns Type Description bool 是否为飞行载具 Is flight TryGetTankInitSystemFromGameObject(GameObject, out TankInitSystem) 尝试从目标游戏对象中获取坦克载具。 Try get tank vehicle from target gameobject. Declaration [DocGen] public static bool TryGetTankInitSystemFromGameObject(GameObject gameObject, out TankInitSystem tankInitSystem) Parameters Type Name Description GameObject gameObject 目标游戏对象 Target gameobject TankInitSystem tankInitSystem 坦克 Tank Returns Type Description bool 是否为坦克载具 Is tank vehicle UnRegisterBulletFiredEvent(BaseInitSystem, int, OnFiredDelegate) 注销载具开火时触发的事件。 UnRegister an event dispatched when vehicle fired. Declaration [DocGen] public static void UnRegisterBulletFiredEvent(BaseInitSystem vehicle, int index, OnFiredDelegate tankFiredDelegate) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle int index 火炮序号 Fire index OnFiredDelegate tankFiredDelegate 开火回调 Fired callback UnRegisterVehicleDestroyedEvent(BaseInitSystem, OnVehicleDestroyedDelegate) 注销载具被摧毁时触发的事件。 Unregister an event dispatched when vehicle destroyed. Declaration [DocGen] public static void UnRegisterVehicleDestroyedEvent(BaseInitSystem vehicle, OnVehicleDestroyedDelegate vehicleDestroyedDelegate) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle OnVehicleDestroyedDelegate vehicleDestroyedDelegate 载具被击毁回调 Vehicle destroyed callback UnRegisterVehicleGameObjectDestroyedEvent(BaseInitSystem, OnVehicleRemovedDelegate) 注销载具物体被摧毁时触发的事件。 Unregister an event dispatched when vehicle gamobject destroyed. Declaration [DocGen] public static void UnRegisterVehicleGameObjectDestroyedEvent(BaseInitSystem vehicle, OnVehicleRemovedDelegate vehicleGameObjectDestroyed) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle OnVehicleRemovedDelegate vehicleGameObjectDestroyed 载具物体被摧毁回调 Vehicle gamobject destroyed callback UnRegisterVehicleLoaedEvent(BaseInitSystem, OnVehicleLoadedDelegate) 取消注册载具加载事件。 Unregister an event dispatched when vehicle loaded. Declaration [DocGen] public static void UnRegisterVehicleLoaedEvent(BaseInitSystem vehicle, OnVehicleLoadedDelegate vehicleLoadedDelegate) Parameters Type Name Description BaseInitSystem vehicle 目标载具 Target vehicle OnVehicleLoadedDelegate vehicleLoadedDelegate 载具加载完毕回调 Vehicle loaded callback"
  },
  "api/ShanghaiWindy.Core.BaseFireSystem.html": {
    "href": "api/ShanghaiWindy.Core.BaseFireSystem.html",
    "title": "Class BaseFireSystem | Panzer War Document",
    "keywords": "Class BaseFireSystem Inheritance object ShanghaiWindy.Core.BaseVehicleComponent<T><BaseInitSystem> ShanghaiWindy.Core.GenericVehicleComponent BaseFireSystem TankFire Implements IIndex Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public class BaseFireSystem : GenericVehicleComponent, IIndex Implements IIndex"
  },
  "api/ShanghaiWindy.Core.BaseInitSystem.html": {
    "href": "api/ShanghaiWindy.Core.BaseInitSystem.html",
    "title": "Class BaseInitSystem | Panzer War Document",
    "keywords": "Class BaseInitSystem 基本初始化系统类，用于游戏任何载具的基本初始化。该类实现了 IDynamicDataPatchable 接口和 IIndex 接口。 The BaseInitSystem class is used for basic initialization of any vehicle. This class implements the IDynamicDataPatchable and IIndex interfaces. Inheritance object BaseInitSystem TankInitSystem Implements IDynamicDataPatchable IIndex Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public class BaseInitSystem : MonoBehaviour, IDynamicDataPatchable, IIndex Fields basePlayerState 基础玩家状态类，用于处理玩家状态的改变，如受到伤害、击中反弹等事件。 Base player state class for handling changes in player states such as taking damage, ricocheting hits, etc. Declaration [DocGen] public BasePlayerState basePlayerState Field Value Type Description BasePlayerState equipmentBuffDataList 装备 Buff 数据列表 Equipment Buff Data List Declaration [DocGen] public List<EquipmentBuffData> equipmentBuffDataList Field Value Type Description List<EquipmentBuffData> Properties IsDestroyed Declaration [DocGen] public bool IsDestroyed { get; } Property Value Type Description bool IsLoaded Declaration [DocGen] public bool IsLoaded { get; } Property Value Type Description bool OnDamagedInternalModule Declaration [DocGen] public BaseInitSystem.DamagedInternalModule OnDamagedInternalModule { get; set; } Property Value Type Description BaseInitSystem.ShanghaiWindy.Core.BaseInitSystem.DamagedInternalModule OnGameObjectDestroyed Declaration [DocGen] public UnityEvent OnGameObjectDestroyed { get; set; } Property Value Type Description UnityEvent OnVehicleDestroyed Declaration [DocGen] public UnityEvent OnVehicleDestroyed { get; set; } Property Value Type Description UnityEvent OnVehicleLoaded Declaration [DocGen] public UnityEvent OnVehicleLoaded { get; set; } Property Value Type Description UnityEvent OwnerTeam Declaration [DocGen] public TeamManager.Team OwnerTeam { get; set; } Property Value Type Description TeamManager.Team Implements IDynamicDataPatchable IIndex"
  },
  "api/ShanghaiWindy.Core.BasePlayerState.html": {
    "href": "api/ShanghaiWindy.Core.BasePlayerState.html",
    "title": "Class BasePlayerState | Panzer War Document",
    "keywords": "Class BasePlayerState 基础玩家状态类，用于处理玩家状态的改变，如受到伤害、击中反弹等事件。 Base player state class for handling changes in player states such as taking damage, ricocheting hits, etc. Inheritance object BasePlayerState Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public class BasePlayerState : MonoBehaviour Fields DamageResistanceBuffedCoff 伤害阻挡 Buff Damage resistance buff Declaration [DocGen] public BuffProperty DamageResistanceBuffedCoff Field Value Type Description ShanghaiWindy.Core.BuffProperty defaultHP 默认生命值，用于初始化角色的生命值。Default Hit Points (HP) used for initializing the character's health. Declaration [DocGen] public int defaultHP Field Value Type Description int hp 玩家的生命值属性。 Player's health points property. Declaration [DocGen] public PropValue<int> hp Field Value Type Description PropValue<int> isFakeHP 是否为假生命值。 Whether it's fake health points. Declaration [DocGen] public bool isFakeHP Field Value Type Description bool isGodMode 是否开启上帝模式，若为 true，则角色无敌。 If God Mode is enabled (true), the character is invincible. Declaration [DocGen] public PropValue<bool> isGodMode Field Value Type Description PropValue<bool> lastBeHitPosition 上次受到伤害的位置。 The position where the character was last hit. Declaration [DocGen] public Vector3 lastBeHitPosition Field Value Type Description Vector3 totalBlockDamage 角色总共阻挡的伤害。 The total damage the character has blocked. Declaration [DocGen] public PropValue<int> totalBlockDamage Field Value Type Description PropValue<int> totalDamage 角色总共造成的伤害。 The total damage the character has caused. Declaration [DocGen] public PropValue<int> totalDamage Field Value Type Description PropValue<int> totalDesytroyed 角色总共摧毁的物体数量。 The total number of objects the character has destroyed. Declaration [DocGen] public PropValue<int> totalDesytroyed Field Value Type Description PropValue<int> vehicleName 车辆名称。 Vehicle name. Declaration [DocGen] public string vehicleName Field Value Type Description string Properties isDestroyed 是否已被摧毁的标志。 A flag indicating whether the object has been destroyed or not. Declaration [DocGen] public bool isDestroyed { get; protected set; } Property Value Type Description bool OnDamaged 当受到伤害时触发的事件。 Event triggered when damaged. Declaration [DocGen] public UnityEvent<int, Vector3> OnDamaged { get; set; } Property Value Type Description UnityEvent<, ><int, Vector3> OnNotBreakDowned 当不被击破时触发的事件。 Event triggered when not broken down. Declaration [DocGen] public UnityEvent OnNotBreakDowned { get; set; } Property Value Type Description UnityEvent OnRichocheted 当击中反弹时触发的事件。 Event triggered when ricocheted. Declaration [DocGen] public UnityEvent OnRichocheted { get; set; } Property Value Type Description UnityEvent RepairSpeedBuffedCoff 维修速度 Buff Repair speed buff Declaration [DocGen] public BuffProperty RepairSpeedBuffedCoff { get; } Property Value Type Description ShanghaiWindy.Core.BuffProperty ViewRangeBuffedCoff 视野 Buff View range buff Declaration [DocGen] public BuffProperty ViewRangeBuffedCoff { get; } Property Value Type Description ShanghaiWindy.Core.BuffProperty"
  },
  "api/ShanghaiWindy.Core.CaptureZoneInfo.html": {
    "href": "api/ShanghaiWindy.Core.CaptureZoneInfo.html",
    "title": "Class CaptureZoneInfo | Panzer War Document",
    "keywords": "Class CaptureZoneInfo Inheritance object CaptureZoneInfo Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public class CaptureZoneInfo : IIndex Properties captureStage Declaration [DocGen] public ECaptureStage captureStage { get; } Property Value Type Description ECaptureStage capturingTeam Declaration [DocGen] public TeamManager.Team capturingTeam { get; } Property Value Type Description TeamManager.Team currentCaptureProgress Declaration [DocGen] public float currentCaptureProgress { get; } Property Value Type Description float point Declaration [DocGen] public Vector3 point { get; } Property Value Type Description Vector3 radius Declaration [DocGen] public float radius { get; } Property Value Type Description float zoneName Declaration [DocGen] public string zoneName { get; } Property Value Type Description string Methods GetIndex() Declaration [DocGen] public long GetIndex() Returns Type Description long IsComplete() Declaration [DocGen] public bool IsComplete() Returns Type Description bool"
  },
  "api/ShanghaiWindy.Core.CaptureZoneTask.html": {
    "href": "api/ShanghaiWindy.Core.CaptureZoneTask.html",
    "title": "Class CaptureZoneTask | Panzer War Document",
    "keywords": "Class CaptureZoneTask Inheritance object ShanghaiWindy.Core.AbstractBotTask CaptureZoneTask Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public class CaptureZoneTask : AbstractBotTask Fields Weight Declaration [DocGen] public int Weight Field Value Type Description int ZoneId Declaration [DocGen] public int ZoneId Field Value Type Description int"
  },
  "api/ShanghaiWindy.Core.Data.BulletFiredInfo.html": {
    "href": "api/ShanghaiWindy.Core.Data.BulletFiredInfo.html",
    "title": "Struct BulletFiredInfo | Panzer War Document",
    "keywords": "Struct BulletFiredInfo 子弹发射信息 Bullet Fired Info Namespace: ShanghaiWindy.Core.Data Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public struct BulletFiredInfo"
  },
  "api/ShanghaiWindy.Core.Data.html": {
    "href": "api/ShanghaiWindy.Core.Data.html",
    "title": "Namespace ShanghaiWindy.Core.Data | Panzer War Document",
    "keywords": "Namespace ShanghaiWindy.Core.Data Structs BulletFiredInfo 子弹发射信息 Bullet Fired Info"
  },
  "api/ShanghaiWindy.Core.Delegate.AssetLoadedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.AssetLoadedDelegate.html",
    "title": "Delegate AssetLoadedDelegate | Panzer War Document",
    "keywords": "Delegate AssetLoadedDelegate 资源加载完成时的委托 Asset Loaded Delegate Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void AssetLoadedDelegate(object asset) Parameters Type Name Description object asset 加载完成的资源 Loaded Asset"
  },
  "api/ShanghaiWindy.Core.Delegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.html",
    "title": "Namespace ShanghaiWindy.Core.Delegate | Panzer War Document",
    "keywords": "Namespace ShanghaiWindy.Core.Delegate Delegates AssetLoadedDelegate 资源加载完成时的委托 Asset Loaded Delegate LoadPoolAssetDelegate OnBattleSceneLoadedDelegate OnBattleUILoadedDelegate OnFiredDelegate 当载具开火时触发事件。 Dispatch event when vehicle is fired. OnGameVehicleDestroyedDelegate 当载具被摧毁时触发全局游戏事件。 Dispatch global event when vehicle is destroyed. OnGameVehicleGameObjectRemovedDelegate 当载具物体被摧毁时触发全局游戏事件。 Dispatch global event when vehicle gameobject is destroyed. OnGameVehicleLoadedDelegate 当载具资源和组件加载时触发全局游戏事件。 Dispatch global event when vehicle assets and components are loaded. OnKeyCanceled 按键取消时的委托 Key Canceled Delegate OnKeyPerformed 按键执行时的委托 Key Performed Delegate OnKeyRegistered OnKeyUnregistered OnQuarterTickDelegate OnTickDelegate OnVehicleDestroyedDelegate 当载具被摧毁时触发事件。 Dispatch event when vehicle is destroyed. OnVehicleLoadedDelegate 当载具资源和组件加载时触发事件。 Dispatch event when vehicle assets and components are loaded. OnVehicleRemovedDelegate 当载具从场景中移除时触发事件。 Dispatch event when vehicle is removed from scene. OnVehicleThumbnailLoadedDelegate 载具缩略图加载完毕回调 PostEventLoadedDelegate 音频事件加载完成时的委托 Post Event Loaded Delegate"
  },
  "api/ShanghaiWindy.Core.Delegate.LoadPoolAssetDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.LoadPoolAssetDelegate.html",
    "title": "Delegate LoadPoolAssetDelegate | Panzer War Document",
    "keywords": "Delegate LoadPoolAssetDelegate Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void LoadPoolAssetDelegate(AssetPoolRef assetPoolRef) Parameters Type Name Description ShanghaiWindy.Core.AssetPoolRef assetPoolRef"
  },
  "api/ShanghaiWindy.Core.Delegate.OnBattleSceneLoadedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnBattleSceneLoadedDelegate.html",
    "title": "Delegate OnBattleSceneLoadedDelegate | Panzer War Document",
    "keywords": "Delegate OnBattleSceneLoadedDelegate Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnBattleSceneLoadedDelegate()"
  },
  "api/ShanghaiWindy.Core.Delegate.OnBattleUILoadedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnBattleUILoadedDelegate.html",
    "title": "Delegate OnBattleUILoadedDelegate | Panzer War Document",
    "keywords": "Delegate OnBattleUILoadedDelegate Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnBattleUILoadedDelegate()"
  },
  "api/ShanghaiWindy.Core.Delegate.OnFiredDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnFiredDelegate.html",
    "title": "Delegate OnFiredDelegate | Panzer War Document",
    "keywords": "Delegate OnFiredDelegate 当载具开火时触发事件。 Dispatch event when vehicle is fired. Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnFiredDelegate(BulletFiredInfo bulletFiredInfo) Parameters Type Name Description BulletFiredInfo bulletFiredInfo"
  },
  "api/ShanghaiWindy.Core.Delegate.OnGameVehicleDestroyedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnGameVehicleDestroyedDelegate.html",
    "title": "Delegate OnGameVehicleDestroyedDelegate | Panzer War Document",
    "keywords": "Delegate OnGameVehicleDestroyedDelegate 当载具被摧毁时触发全局游戏事件。 Dispatch global event when vehicle is destroyed. Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnGameVehicleDestroyedDelegate(BaseInitSystem vehicle) Parameters Type Name Description BaseInitSystem vehicle"
  },
  "api/ShanghaiWindy.Core.Delegate.OnGameVehicleGameObjectRemovedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnGameVehicleGameObjectRemovedDelegate.html",
    "title": "Delegate OnGameVehicleGameObjectRemovedDelegate | Panzer War Document",
    "keywords": "Delegate OnGameVehicleGameObjectRemovedDelegate 当载具物体被摧毁时触发全局游戏事件。 Dispatch global event when vehicle gameobject is destroyed. Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnGameVehicleGameObjectRemovedDelegate(BaseInitSystem vehicle) Parameters Type Name Description BaseInitSystem vehicle"
  },
  "api/ShanghaiWindy.Core.Delegate.OnGameVehicleLoadedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnGameVehicleLoadedDelegate.html",
    "title": "Delegate OnGameVehicleLoadedDelegate | Panzer War Document",
    "keywords": "Delegate OnGameVehicleLoadedDelegate 当载具资源和组件加载时触发全局游戏事件。 Dispatch global event when vehicle assets and components are loaded. Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnGameVehicleLoadedDelegate(BaseInitSystem vehicle) Parameters Type Name Description BaseInitSystem vehicle"
  },
  "api/ShanghaiWindy.Core.Delegate.OnKeyCanceled.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnKeyCanceled.html",
    "title": "Delegate OnKeyCanceled | Panzer War Document",
    "keywords": "Delegate OnKeyCanceled 按键取消时的委托 Key Canceled Delegate Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnKeyCanceled(InputAction.CallbackContext callbackContext) Parameters Type Name Description InputAction.CallbackContext callbackContext 回调上下文 Callback Context"
  },
  "api/ShanghaiWindy.Core.Delegate.OnKeyPerformed.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnKeyPerformed.html",
    "title": "Delegate OnKeyPerformed | Panzer War Document",
    "keywords": "Delegate OnKeyPerformed 按键执行时的委托 Key Performed Delegate Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnKeyPerformed(InputAction.CallbackContext callbackContext) Parameters Type Name Description InputAction.CallbackContext callbackContext 回调上下文 Callback Context"
  },
  "api/ShanghaiWindy.Core.Delegate.OnKeyRegistered.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnKeyRegistered.html",
    "title": "Delegate OnKeyRegistered | Panzer War Document",
    "keywords": "Delegate OnKeyRegistered Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnKeyRegistered(string actionName, string keyCode) Parameters Type Name Description string actionName string keyCode"
  },
  "api/ShanghaiWindy.Core.Delegate.OnKeyUnregistered.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnKeyUnregistered.html",
    "title": "Delegate OnKeyUnregistered | Panzer War Document",
    "keywords": "Delegate OnKeyUnregistered Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnKeyUnregistered(string actionName) Parameters Type Name Description string actionName"
  },
  "api/ShanghaiWindy.Core.Delegate.OnQuarterTickDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnQuarterTickDelegate.html",
    "title": "Delegate OnQuarterTickDelegate | Panzer War Document",
    "keywords": "Delegate OnQuarterTickDelegate Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnQuarterTickDelegate(float deltaTime) Parameters Type Name Description float deltaTime"
  },
  "api/ShanghaiWindy.Core.Delegate.OnTickDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnTickDelegate.html",
    "title": "Delegate OnTickDelegate | Panzer War Document",
    "keywords": "Delegate OnTickDelegate Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnTickDelegate()"
  },
  "api/ShanghaiWindy.Core.Delegate.OnVehicleDestroyedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnVehicleDestroyedDelegate.html",
    "title": "Delegate OnVehicleDestroyedDelegate | Panzer War Document",
    "keywords": "Delegate OnVehicleDestroyedDelegate 当载具被摧毁时触发事件。 Dispatch event when vehicle is destroyed. Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnVehicleDestroyedDelegate()"
  },
  "api/ShanghaiWindy.Core.Delegate.OnVehicleLoadedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnVehicleLoadedDelegate.html",
    "title": "Delegate OnVehicleLoadedDelegate | Panzer War Document",
    "keywords": "Delegate OnVehicleLoadedDelegate 当载具资源和组件加载时触发事件。 Dispatch event when vehicle assets and components are loaded. Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnVehicleLoadedDelegate()"
  },
  "api/ShanghaiWindy.Core.Delegate.OnVehicleRemovedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnVehicleRemovedDelegate.html",
    "title": "Delegate OnVehicleRemovedDelegate | Panzer War Document",
    "keywords": "Delegate OnVehicleRemovedDelegate 当载具从场景中移除时触发事件。 Dispatch event when vehicle is removed from scene. Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnVehicleRemovedDelegate()"
  },
  "api/ShanghaiWindy.Core.Delegate.OnVehicleThumbnailLoadedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.OnVehicleThumbnailLoadedDelegate.html",
    "title": "Delegate OnVehicleThumbnailLoadedDelegate | Panzer War Document",
    "keywords": "Delegate OnVehicleThumbnailLoadedDelegate 载具缩略图加载完毕回调 Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void OnVehicleThumbnailLoadedDelegate(Sprite thumbnail) Parameters Type Name Description Sprite thumbnail"
  },
  "api/ShanghaiWindy.Core.Delegate.PostEventLoadedDelegate.html": {
    "href": "api/ShanghaiWindy.Core.Delegate.PostEventLoadedDelegate.html",
    "title": "Delegate PostEventLoadedDelegate | Panzer War Document",
    "keywords": "Delegate PostEventLoadedDelegate 音频事件加载完成时的委托 Post Event Loaded Delegate Namespace: ShanghaiWindy.Core.Delegate Assembly: cs.temp.dll.dll Syntax [DocGen] public delegate void PostEventLoadedDelegate(EventInstance eventInstance) Parameters Type Name Description EventInstance eventInstance 音频事件实例 Event Instance"
  },
  "api/ShanghaiWindy.Core.ECaptureStage.html": {
    "href": "api/ShanghaiWindy.Core.ECaptureStage.html",
    "title": "Enum ECaptureStage | Panzer War Document",
    "keywords": "Enum ECaptureStage Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public enum ECaptureStage"
  },
  "api/ShanghaiWindy.Core.EIconPosition.html": {
    "href": "api/ShanghaiWindy.Core.EIconPosition.html",
    "title": "Enum EIconPosition | Panzer War Document",
    "keywords": "Enum EIconPosition Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public enum EIconPosition"
  },
  "api/ShanghaiWindy.Core.FlightPlayerState.html": {
    "href": "api/ShanghaiWindy.Core.FlightPlayerState.html",
    "title": "Class FlightPlayerState | Panzer War Document",
    "keywords": "Class FlightPlayerState 飞行玩家状态类，继承自基础玩家状态类。 FlightPlayerState class, inherits from the BasePlayerState. Inheritance object BasePlayerState ShanghaiWindy.Core.FlightState FlightPlayerState Inherited Members BasePlayerState.OnDamaged BasePlayerState.OnRichocheted BasePlayerState.OnNotBreakDowned BasePlayerState.vehicleName BasePlayerState.hp BasePlayerState.defaultHP BasePlayerState.isFakeHP BasePlayerState.isGodMode BasePlayerState.lastBeHitPosition BasePlayerState.totalDamage BasePlayerState.totalDesytroyed BasePlayerState.totalBlockDamage BasePlayerState.isDestroyed BasePlayerState.DamageResistanceBuffedCoff BasePlayerState.ViewRangeBuffedCoff BasePlayerState.RepairSpeedBuffedCoff Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public class FlightPlayerState : FlightState"
  },
  "api/ShanghaiWindy.Core.html": {
    "href": "api/ShanghaiWindy.Core.html",
    "title": "Namespace ShanghaiWindy.Core | Panzer War Document",
    "keywords": "Namespace ShanghaiWindy.Core Classes AbstractBattlePlayer 战斗玩家数据 Battle Player BaseFireSystem BaseInitSystem 基本初始化系统类，用于游戏任何载具的基本初始化。该类实现了 IDynamicDataPatchable 接口和 IIndex 接口。 The BaseInitSystem class is used for basic initialization of any vehicle. This class implements the IDynamicDataPatchable and IIndex interfaces. BasePlayerState 基础玩家状态类，用于处理玩家状态的改变，如受到伤害、击中反弹等事件。 Base player state class for handling changes in player states such as taking damage, ricocheting hits, etc. CaptureZoneInfo CaptureZoneTask FlightPlayerState 飞行玩家状态类，继承自基础玩家状态类。 FlightPlayerState class, inherits from the BasePlayerState. PropValue<T> 泛型属性值类，用于处理属性变化时的事件通知。 Generic property value class, used for handling event notifications when property values change. TankFire 弹夹炮逻辑 TankInitSystem 坦克初始化系统 Tank Initialization System TankVehicleComponents 车辆组件 Vehicle Components TeamManager TurretController VehicleInfo Enums ECaptureStage EIconPosition TeamManager.Team UIEnum"
  },
  "api/ShanghaiWindy.Core.Lua.html": {
    "href": "api/ShanghaiWindy.Core.Lua.html",
    "title": "Namespace ShanghaiWindy.Core.Lua | Panzer War Document",
    "keywords": "Namespace ShanghaiWindy.Core.Lua Classes LuaBehaviorMono Interfaces ILuaBase Lua 模组接口，用于定义模组的基本信息。 Lua mod interface, providing basic information about the mod. ILuaBehavior ILuaBuffCaster ILuaCommon Common() 定义下的类型接口。通用 Lua 模块接口，用于定义一组通用的游戏逻辑方法。 Interrface for Common() define. Common Lua module interface, providing a set of general game logic methods. ILuaControllableVehicle Vehicle() 定义下的类型接口。Lua 游戏载具模块接口，用于定义游戏载具的行为和逻辑。 Interface for Vehicle() define. Lua vehicle module interface, providing vehicle behaviors and logic. ILuaGameMode GameMode() 定义下的类型接口。Lua 游戏模式模块接口，用于定义游戏模式的行为和逻辑。 Interface for GameMode() define. Lua game mode module interface, providing game mode behaviors and logic."
  },
  "api/ShanghaiWindy.Core.Lua.ILuaBase.html": {
    "href": "api/ShanghaiWindy.Core.Lua.ILuaBase.html",
    "title": "Interface ILuaBase | Panzer War Document",
    "keywords": "Interface ILuaBase Lua 模组接口，用于定义模组的基本信息。 Lua mod interface, providing basic information about the mod. Namespace: ShanghaiWindy.Core.Lua Assembly: cs.temp.dll.dll Syntax [DocGen] public interface ILuaBase Properties author 获取模组作者。 Get the mod author. Declaration [DocGen] string author { get; set; } Property Value Type Description string description 获取模组描述。 Get the mod description. Declaration [DocGen] string description { get; set; } Property Value Type Description string isPreview 是否开发预览 Is preview Declaration [DocGen] bool isPreview { get; set; } Property Value Type Description bool modName 获取模组名称。 Get the mod name. Declaration [DocGen] string modName { get; set; } Property Value Type Description string"
  },
  "api/ShanghaiWindy.Core.Lua.ILuaBehavior.html": {
    "href": "api/ShanghaiWindy.Core.Lua.ILuaBehavior.html",
    "title": "Interface ILuaBehavior | Panzer War Document",
    "keywords": "Interface ILuaBehavior Inherited Members ILuaBase.modName ILuaBase.author ILuaBase.description ILuaBase.isPreview Namespace: ShanghaiWindy.Core.Lua Assembly: cs.temp.dll.dll Syntax [DocGen] public interface ILuaBehavior : ILuaBase"
  },
  "api/ShanghaiWindy.Core.Lua.ILuaBuffCaster.html": {
    "href": "api/ShanghaiWindy.Core.Lua.ILuaBuffCaster.html",
    "title": "Interface ILuaBuffCaster | Panzer War Document",
    "keywords": "Interface ILuaBuffCaster Namespace: ShanghaiWindy.Core.Lua Assembly: cs.temp.dll.dll Syntax [DocGen] public interface ILuaBuffCaster"
  },
  "api/ShanghaiWindy.Core.Lua.ILuaCommon.html": {
    "href": "api/ShanghaiWindy.Core.Lua.ILuaCommon.html",
    "title": "Interface ILuaCommon | Panzer War Document",
    "keywords": "Interface ILuaCommon Common() 定义下的类型接口。通用 Lua 模块接口，用于定义一组通用的游戏逻辑方法。 Interrface for Common() define. Common Lua module interface, providing a set of general game logic methods. Inherited Members ILuaBase.modName ILuaBase.author ILuaBase.description ILuaBase.isPreview Namespace: ShanghaiWindy.Core.Lua Assembly: cs.temp.dll.dll Syntax [DocGen] public interface ILuaCommon : ILuaBase Methods OnDispose() Lua 环境释放 Declaration [DocGen] void OnDispose() OnFixedUpdated() 固定更新时调用。 Called on fixed update. Declaration [DocGen] void OnFixedUpdated() OnGUI() 当绘制图形用户界面时调用。 Called when drawing the graphical user interface. Declaration [DocGen] void OnGUI() OnLateUpdated() 在每帧的最后更新时调用。 Called on the late update of each frame. Declaration [DocGen] void OnLateUpdated() OnSceneLoaded(string) 当场景加载完成时调用。 Called when a scene is loaded. Declaration [DocGen] void OnSceneLoaded(string levelName) Parameters Type Name Description string levelName 场景名称 - Scene name OnStarted() 当模块启动时调用。 Called when the module is started. Declaration [DocGen] void OnStarted() OnUpdated() 每帧更新时调用。 Called on every frame update. Declaration [DocGen] void OnUpdated()"
  },
  "api/ShanghaiWindy.Core.Lua.ILuaControllableVehicle.html": {
    "href": "api/ShanghaiWindy.Core.Lua.ILuaControllableVehicle.html",
    "title": "Interface ILuaControllableVehicle | Panzer War Document",
    "keywords": "Interface ILuaControllableVehicle Vehicle() 定义下的类型接口。Lua 游戏载具模块接口，用于定义游戏载具的行为和逻辑。 Interface for Vehicle() define. Lua vehicle module interface, providing vehicle behaviors and logic. Inherited Members ILuaBase.modName ILuaBase.author ILuaBase.description ILuaBase.isPreview Namespace: ShanghaiWindy.Core.Lua Assembly: cs.temp.dll.dll Syntax [DocGen] public interface ILuaControllableVehicle : ILuaBehavior, ILuaBase"
  },
  "api/ShanghaiWindy.Core.Lua.ILuaGameMode.html": {
    "href": "api/ShanghaiWindy.Core.Lua.ILuaGameMode.html",
    "title": "Interface ILuaGameMode | Panzer War Document",
    "keywords": "Interface ILuaGameMode GameMode() 定义下的类型接口。Lua 游戏模式模块接口，用于定义游戏模式的行为和逻辑。 Interface for GameMode() define. Lua game mode module interface, providing game mode behaviors and logic. Inherited Members ILuaBase.modName ILuaBase.author ILuaBase.description ILuaBase.isPreview Namespace: ShanghaiWindy.Core.Lua Assembly: cs.temp.dll.dll Syntax [DocGen] public interface ILuaGameMode : ILuaBase Properties luaClass Lua 类实例 Lua class instance Declaration [DocGen] LuaTable luaClass { get; } Property Value Type Description LuaTable Methods GetGameModeName(string) 获取游戏模式的名称。 Get the name of the game mode. Declaration [DocGen] string GetGameModeName(string lang) Parameters Type Name Description string lang 语言代码 - Language code Returns Type Description string 游戏模式名称 - Game mode name GetMapMode() 获取地图模式 Get map mode Declaration [DocGen] int GetMapMode() Returns Type Description int IsEnableCapturePoint() 是否启用占领点 Is enable capture point Declaration [DocGen] bool IsEnableCapturePoint() Returns Type Description bool IsProxyBattle() 是否让用户自己管理进入战斗的加载流程。 Determine if the user should manage the battle loading process. Declaration [DocGen] bool IsProxyBattle() Returns Type Description bool 如果为 true，则用户自己管理进入战斗的加载流程。If true, the user manages the battle loading process. OnExitMode() 当退出游戏模式时调用。 Called when exiting the game mode. Declaration [DocGen] void OnExitMode() OnStartMode() 当游戏模式开始时调用。 Called when the game mode starts. Declaration [DocGen] void OnStartMode() OnUpdated() 每帧更新时调用。 Called on every frame update. Declaration [DocGen] void OnUpdated()"
  },
  "api/ShanghaiWindy.Core.Lua.LuaBehaviorMono.html": {
    "href": "api/ShanghaiWindy.Core.Lua.LuaBehaviorMono.html",
    "title": "Class LuaBehaviorMono | Panzer War Document",
    "keywords": "Class LuaBehaviorMono Inheritance object LuaBehaviorMono Namespace: ShanghaiWindy.Core.Lua Assembly: cs.temp.dll.dll Syntax [DocGen] public class LuaBehaviorMono : MonoBehaviour Properties ClassName 在 Lua 中定义的类型名称 The class name defined in lua script Declaration [DocGen] public string ClassName { get; } Property Value Type Description string Methods TryGetArmyInitSystem(out ArmyInitSystem) Declaration [DocGen] public bool TryGetArmyInitSystem(out ArmyInitSystem armyInitSystem) Parameters Type Name Description ArmyInitSystem armyInitSystem Returns Type Description bool TryGetFlightInitSystem(out FlightInitSystem) Declaration [DocGen] public bool TryGetFlightInitSystem(out FlightInitSystem flightInitSystem) Parameters Type Name Description ShanghaiWindy.Core.FlightInitSystem flightInitSystem Returns Type Description bool TryGetTankInitSystem(out TankInitSystem) Declaration [DocGen] public bool TryGetTankInitSystem(out TankInitSystem tankInitSystem) Parameters Type Name Description TankInitSystem tankInitSystem Returns Type Description bool"
  },
  "api/ShanghaiWindy.Core.PropValue-1.html": {
    "href": "api/ShanghaiWindy.Core.PropValue-1.html",
    "title": "Class PropValue<T> | Panzer War Document",
    "keywords": "Class PropValue<T> 泛型属性值类，用于处理属性变化时的事件通知。 Generic property value class, used for handling event notifications when property values change. Inheritance object PropValue<T> Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] [DocGen] public class PropValue<T> Type Parameters Name Description T 属性值类型，必须实现 IEquatable 接口。Property value type, must implement the IEquatable interface. Constructors PropValue() 默认构造函数。Default constructor. Declaration [DocGen] public PropValue() PropValue() 默认构造函数。Default constructor. Declaration [DocGen] public PropValue() PropValue(T) 使用初始值构造 PropValue。Constructs a PropValue using the provided initial value. Declaration [DocGen] public PropValue(T init) Parameters Type Name Description T init 初始化值。The initial value. PropValue(T) 使用初始值构造 PropValue。Constructs a PropValue using the provided initial value. Declaration [DocGen] public PropValue(T init) Parameters Type Name Description T init 初始化值。The initial value. Methods Get() 获取属性值。Gets the property value. Declaration [DocGen] public T Get() Returns Type Description T 属性值。The property value. Get() 获取属性值。Gets the property value. Declaration [DocGen] public T Get() Returns Type Description T 属性值。The property value. Set(T) 设置属性值，并在值发生变化时触发 OnValueChanged 事件。Sets the property value and triggers the OnValueChanged event when the value changes. Declaration [DocGen] public void Set(T val) Parameters Type Name Description T val 新值。The new value. Set(T) 设置属性值，并在值发生变化时触发 OnValueChanged 事件。Sets the property value and triggers the OnValueChanged event when the value changes. Declaration [DocGen] public void Set(T val) Parameters Type Name Description T val 新值。The new value. Events OnValueChanged 当属性值变化时触发的事件，传入旧值和新值。Event triggered when the property value changes, taking the old and new values as arguments. Declaration [DocGen] public event Action<T, T> OnValueChanged Event Type Type Description Action<T, T> OnValueChanged 当属性值变化时触发的事件，传入旧值和新值。Event triggered when the property value changes, taking the old and new values as arguments. Declaration [DocGen] public event Action<T, T> OnValueChanged Event Type Type Description Action<T, T>"
  },
  "api/ShanghaiWindy.Core.TankFire.html": {
    "href": "api/ShanghaiWindy.Core.TankFire.html",
    "title": "Class TankFire | Panzer War Document",
    "keywords": "Class TankFire 弹夹炮逻辑 Inheritance object ShanghaiWindy.Core.BaseVehicleComponent<T><BaseInitSystem> ShanghaiWindy.Core.GenericVehicleComponent BaseFireSystem TankFire Implements IIndex IDynamicDataPatchable Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public class TankFire : BaseFireSystem, IIndex, IDynamicDataPatchable Fields attachedRigidbody 附加刚体 Attached Rigidbody Declaration [DocGen] public Rigidbody attachedRigidbody Field Value Type Description Rigidbody calibratedPoint 校准点 Calibrated Point Declaration [DocGen] public Vector3 calibratedPoint Field Value Type Description Vector3 canControl 是否可控制 Can Control Declaration [DocGen] public bool canControl Field Value Type Description bool currentBulletId 当前炮弹 ID Current Bullet ID Declaration [DocGen] public int currentBulletId Field Value Type Description int ffPoint FF 点 Transform FF Point Transform Declaration [DocGen] public Transform ffPoint Field Value Type Description Transform fireEffectPoint 射击特效点 Transform Fire Effect Point Transform Declaration [DocGen] public Transform fireEffectPoint Field Value Type Description Transform fireRecoilPoint 射击后坐力点 Transform Fire Recoil Point Transform Declaration [DocGen] public Transform fireRecoilPoint Field Value Type Description Transform gunDym Gun Transform Declaration [DocGen] public Transform gunDym Field Value Type Description Transform isAutoCaclulateGravity 是否自动计算重力 Is Auto Calculate Gravity Declaration [DocGen] public bool isAutoCaclulateGravity Field Value Type Description bool isExtraTurret 是否为额外炮塔 Is Extra Turret Declaration [DocGen] public bool isExtraTurret Field Value Type Description bool isPlayVFX 是否播放 VFX Is Play VFX Declaration [DocGen] public bool isPlayVFX Field Value Type Description bool mainBody 车体 Transform Main Body Transform Declaration [DocGen] public Transform mainBody Field Value Type Description Transform netType 网络类型 Instance Net Type Declaration [DocGen] public InstanceNetType netType Field Value Type Description ShanghaiWindy.Core.InstanceNetType overrideVelocity 覆盖速度 Override Velocity Declaration [DocGen] public Vector3 overrideVelocity Field Value Type Description Vector3 projectile 投射物管理器 Projectile Manager Declaration [DocGen] public ProjectileManager projectile Field Value Type Description ShanghaiWindy.Core.ProjectileManager useGravity 使用重力 Use Gravity Declaration [DocGen] public bool useGravity Field Value Type Description bool Properties bulletCountList 子弹数量列表 Bullet Count List Declaration [DocGen] public int[] bulletCountList { get; } Property Value Type Description int[] currentBullet 当前子弹 Current Bullet Declaration [DocGen] public BulletData currentBullet { get; } Property Value Type Description ShanghaiWindy.Core.BulletData Implements IIndex IDynamicDataPatchable"
  },
  "api/ShanghaiWindy.Core.TankInitSystem.html": {
    "href": "api/ShanghaiWindy.Core.TankInitSystem.html",
    "title": "Class TankInitSystem | Panzer War Document",
    "keywords": "Class TankInitSystem 坦克初始化系统 Tank Initialization System Inheritance object BaseInitSystem TankInitSystem Implements IDynamicDataPatchable IIndex Inherited Members BaseInitSystem.OnVehicleLoaded BaseInitSystem.OnVehicleDestroyed BaseInitSystem.OnGameObjectDestroyed BaseInitSystem.OnDamagedInternalModule BaseInitSystem.basePlayerState BaseInitSystem.OwnerTeam BaseInitSystem.IsDestroyed BaseInitSystem.IsLoaded BaseInitSystem.equipmentBuffDataList Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public class TankInitSystem : BaseInitSystem, IDynamicDataPatchable, IIndex Fields diyReferenceManager DIY 车辆组件引用管理器 DIY Vehicle Components Reference Manager Declaration [DocGen] public DIYVehicleComponentsReferenceManager diyReferenceManager Field Value Type Description ShanghaiWindy.Core.DIYVehicleComponentsReferenceManager InstanceMesh 实例网格 Instance Mesh Declaration [DocGen] public GameObject InstanceMesh Field Value Type Description GameObject referenceManager 车辆组件引用管理器 Vehicle Components Reference Manager Declaration [DocGen] public VehicleComponentsReferenceManager referenceManager Field Value Type Description ShanghaiWindy.Core.VehicleComponentsReferenceManager thinkLogic 机器人逻辑 Bot Logic Declaration [DocGen] public BotLogic thinkLogic Field Value Type Description ShanghaiWindy.Core.BotLogic vehicleComponents 车辆组件集合 Vehicle Components Collection Declaration [DocGen] public TankVehicleComponents vehicleComponents Field Value Type Description TankVehicleComponents vehicleInfo 车辆信息 Vehicle Information Declaration [DocGen] public VehicleInfo vehicleInfo Field Value Type Description VehicleInfo vehicleRemoveManagerModule 车辆移除管理模块 Vehicle Remove Manager Module Declaration [DocGen] public VehicleRemoveManagerModule vehicleRemoveManagerModule Field Value Type Description ShanghaiWindy.Core.VehicleRemoveManagerModule vehicleTextData 车辆文本数据 Vehicle Text Data Declaration [DocGen] public VehicleTextData vehicleTextData Field Value Type Description ShanghaiWindy.Core.VehicleTextData Properties CurEngineParam 当前引擎参数 Current Engine Parameter Declaration [DocGen] public PlayerTankControllerParameter CurEngineParam { get; } Property Value Type Description ShanghaiWindy.Core.PlayerTankControllerParameter CurMainTankFireParam 当前主坦克火力参数 Current Main Tank Fire Parameter Declaration [DocGen] public TankFireParameter CurMainTankFireParam { get; } Property Value Type Description ShanghaiWindy.Core.TankFireParameter CurMainTurretParam 当前主炮塔参数 Current Main Turret Parameter Declaration [DocGen] public MouseTurretParameter CurMainTurretParam { get; } Property Value Type Description ShanghaiWindy.Core.MouseTurretParameter CurPlayerStateParam 当前玩家状态参数 Current Player State Parameter Declaration [DocGen] public PlayerStateParameter CurPlayerStateParam { get; } Property Value Type Description ShanghaiWindy.Core.PlayerStateParameter Implements IDynamicDataPatchable IIndex"
  },
  "api/ShanghaiWindy.Core.TankVehicleComponents.html": {
    "href": "api/ShanghaiWindy.Core.TankVehicleComponents.html",
    "title": "Class TankVehicleComponents | Panzer War Document",
    "keywords": "Class TankVehicleComponents 车辆组件 Vehicle Components Inheritance object TankVehicleComponents Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public class TankVehicleComponents Fields basePlayerState 基本玩家状态 Base Player State Declaration [DocGen] public BasePlayerState basePlayerState Field Value Type Description BasePlayerState damageStickManager 车辆伤害棒管理器 Vehicle Damage Stick Manager Declaration [DocGen] public VehicleDamageStickManager damageStickManager Field Value Type Description ShanghaiWindy.Core.VehicleDamageStickManager fireAssistComponent 火力辅助组件 Fire Assist Component Declaration [DocGen] public FireAssistComponet fireAssistComponent Field Value Type Description ShanghaiWindy.Core.FireAssistComponet fireLockComponent 火力锁定组件 Fire Lock Component Declaration [DocGen] public FireLockComponent fireLockComponent Field Value Type Description ShanghaiWindy.Core.FireLockComponent fireSystemList 火力系统配置列表 Fire System Configuration List Declaration [DocGen] public List<FireSystemConfigure> fireSystemList Field Value Type Description List<FireSystemConfigure> HitBoxes 碰撞箱列表 Hit Box List Declaration [DocGen] public List<HitBox> HitBoxes Field Value Type Description List<HitBox> identity 身份信息 Identity Declaration [DocGen] public Identity identity Field Value Type Description ShanghaiWindy.Core.Identity mainBodyTransform 主体变换组件 Main Body Transform Component Declaration [DocGen] public Transform mainBodyTransform Field Value Type Description Transform mainBodyVisiblity 主体可见性 Main Body Visibility Declaration [DocGen] public MainBodyVisibity mainBodyVisiblity Field Value Type Description ShanghaiWindy.Core.MainBodyVisibity mainCamera 主相机 Main Camera Declaration [DocGen] public Camera mainCamera Field Value Type Description Camera mainTankFireIndex 主坦克火力索引 Main Tank Fire Index Declaration [DocGen] public PropValue<int> mainTankFireIndex Field Value Type Description PropValue<int> playerCamera 玩家相机控制器 Player Camera Controller Declaration [DocGen] public GroundCameraController playerCamera Field Value Type Description ShanghaiWindy.Core.GroundCameraController playerState 坦克玩家状态 Tank Player State Declaration [DocGen] public TankPlayerState playerState Field Value Type Description ShanghaiWindy.Core.TankPlayerState renderers 渲染器数组 Renderer Array Declaration [DocGen] public Renderer[] renderers Field Value Type Description Renderer[] rigidbody 刚体组件 Rigidbody Component Declaration [DocGen] public Rigidbody rigidbody Field Value Type Description Rigidbody selfExplosionList 自爆火力系统列表 Vehicle Self-Explosion Fire System List Declaration [DocGen] public List<VehicleSelfExplosionFireSystem> selfExplosionList Field Value Type Description List<VehicleSelfExplosionFireSystem> tankFireFireGroupManager 坦克火力分组管理器 Tank Fire Group Manager Declaration [DocGen] public TankFireFireGroupManager tankFireFireGroupManager Field Value Type Description ShanghaiWindy.Core.TankFireFireGroupManager tankfireList 坦克火力列表 Tank Fire List Declaration [DocGen] public List<TankFire> tankfireList Field Value Type Description List<TankFire> tankState 坦克状态 Tank State Declaration [DocGen] public TankState tankState Field Value Type Description ShanghaiWindy.Core.TankState tankTracksController 坦克履带控制器 Tank Track Controller Declaration [DocGen] public TankTracksController tankTracksController Field Value Type Description ShanghaiWindy.Core.TankTracksController tracksControllers 履带控制器列表 Tracks Controller List Declaration [DocGen] public List<TracksController> tracksControllers Field Value Type Description List<TracksController> turretControllerList 炮塔控制器列表 Turret Controller List Declaration [DocGen] public List<TurretController> turretControllerList Field Value Type Description List<TurretController> vehicleFireCrossEffect 车辆火力交叉特效 Vehicle Fire Cross Effect Declaration [DocGen] public VehicleFireCrossEffect vehicleFireCrossEffect Field Value Type Description ShanghaiWindy.Core.VehicleFireCrossEffect vehicleInputController 车辆输入控制器 Vehicle Input Controller Declaration [DocGen] public VehicleInputController vehicleInputController Field Value Type Description ShanghaiWindy.Core.VehicleInputController Properties mainTankFire 主坦克火力 Main Tank Fire Declaration [DocGen] public TankFire mainTankFire { get; } Property Value Type Description TankFire mainTurretController 主炮塔控制器 Main Turret Controller Declaration [DocGen] public TurretController mainTurretController { get; } Property Value Type Description TurretController"
  },
  "api/ShanghaiWindy.Core.TeamManager.html": {
    "href": "api/ShanghaiWindy.Core.TeamManager.html",
    "title": "Class TeamManager | Panzer War Document",
    "keywords": "Class TeamManager Inheritance object TeamManager Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public class TeamManager"
  },
  "api/ShanghaiWindy.Core.TeamManager.Team.html": {
    "href": "api/ShanghaiWindy.Core.TeamManager.Team.html",
    "title": "Enum TeamManager.Team | Panzer War Document",
    "keywords": "Enum TeamManager.Team Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public enum TeamManager.Team"
  },
  "api/ShanghaiWindy.Core.TurretController.html": {
    "href": "api/ShanghaiWindy.Core.TurretController.html",
    "title": "Class TurretController | Panzer War Document",
    "keywords": "Class TurretController Inheritance object ShanghaiWindy.Core.BaseVehicleComponent<T><BaseInitSystem> ShanghaiWindy.Core.GenericVehicleComponent TurretController Implements IDynamicDataPatchable Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public class TurretController : GenericVehicleComponent, IDynamicDataPatchable Fields dymTransform 炮管伸缩 Transform Dym Transform Declaration [DocGen] public Transform dymTransform Field Value Type Description Transform fireAngle 射击角度 Fire Angle Declaration [DocGen] public float fireAngle Field Value Type Description float gunTransform 炮管 Transform Gun Transform Declaration [DocGen] public Transform gunTransform Field Value Type Description Transform InitialTrans 初始变换 Initial Transform Declaration [DocGen] public Transform InitialTrans Field Value Type Description Transform isLocked 是否锁定 Is Locked Declaration [DocGen] public bool isLocked Field Value Type Description bool isTargetWithinRange 目标是否在射程内 Is Target Within Range Declaration [DocGen] public bool isTargetWithinRange Field Value Type Description bool target 目标 Target Declaration [DocGen] public Transform target Field Value Type Description Transform turretParams 炮塔参数 Turret Parameters Declaration [DocGen] public MouseTurretParameter turretParams Field Value Type Description ShanghaiWindy.Core.MouseTurretParameter turretTransform 炮塔 Transform Turret Transform Declaration [DocGen] public Transform turretTransform Field Value Type Description Transform Properties GunSpeedBuffedCoff 炮塔高低机 Buff Gun Elevator Speed Buff Declaration [DocGen] public BuffProperty GunSpeedBuffedCoff { get; } Property Value Type Description ShanghaiWindy.Core.BuffProperty isLocalPlayer 是否为本地玩家 Is Local Player Declaration [DocGen] public bool isLocalPlayer { get; } Property Value Type Description bool turretParamProvider 炮塔参数提供器 Turret Parameter Provider Declaration [DocGen] public ITurretParamProvider turretParamProvider { set; } Property Value Type Description ITurretParamProvider TurretSpeedBuffedCoff 炮塔方向机转速 Buff Turret Traverse Speed Buff Declaration [DocGen] public BuffProperty TurretSpeedBuffedCoff { get; } Property Value Type Description ShanghaiWindy.Core.BuffProperty Implements IDynamicDataPatchable"
  },
  "api/ShanghaiWindy.Core.UIEnum.html": {
    "href": "api/ShanghaiWindy.Core.UIEnum.html",
    "title": "Enum UIEnum | Panzer War Document",
    "keywords": "Enum UIEnum Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] public enum UIEnum"
  },
  "api/ShanghaiWindy.Core.VehicleInfo.html": {
    "href": "api/ShanghaiWindy.Core.VehicleInfo.html",
    "title": "Class VehicleInfo | Panzer War Document",
    "keywords": "Class VehicleInfo Inheritance object VehicleInfo Namespace: ShanghaiWindy.Core Assembly: cs.temp.dll.dll Syntax [DocGen] [Migratable] public class VehicleInfo : ScriptableObject Methods GetDisplayName() Declaration [DocGen] public virtual string GetDisplayName() Returns Type Description string GetRank() Declaration [DocGen] public virtual int GetRank() Returns Type Description int GetRepairCost(bool) Declaration [DocGen] public int GetRepairCost(bool isMultiplayer) Parameters Type Name Description bool isMultiplayer Returns Type Description int GetResearchExp() Declaration [DocGen] public int GetResearchExp() Returns Type Description int GetUUID() Declaration [DocGen] public virtual string GetUUID() Returns Type Description string GetVehicleName() Declaration [DocGen] public virtual string GetVehicleName() Returns Type Description string IsResearched() Declaration [DocGen] public bool IsResearched() Returns Type Description bool IsSupportModuleMode() Declaration [DocGen] public virtual bool IsSupportModuleMode() Returns Type Description bool"
  },
  "api/ShanghaiWindy.Data.CaptureZone.html": {
    "href": "api/ShanghaiWindy.Data.CaptureZone.html",
    "title": "Class CaptureZone | Panzer War Document",
    "keywords": "Class CaptureZone Inheritance object CaptureZone Namespace: ShanghaiWindy.Data Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public class CaptureZone Fields spawnTransformInfos Declaration [DocGen] [SHWLabelTextAttribute] public TransformInfo[] spawnTransformInfos Field Value Type Description TransformInfo[] zoneCapturePoint Declaration [DocGen] [SHWLabelTextAttribute] public ZoneCapturePoint zoneCapturePoint Field Value Type Description ZoneCapturePoint zonePoints Declaration [DocGen] [SHWLabelTextAttribute] public Vector3[] zonePoints Field Value Type Description Vector3[]"
  },
  "api/ShanghaiWindy.Data.CaptureZoneModeConfig.html": {
    "href": "api/ShanghaiWindy.Data.CaptureZoneModeConfig.html",
    "title": "Class CaptureZoneModeConfig | Panzer War Document",
    "keywords": "Class CaptureZoneModeConfig Inheritance object ShanghaiWindy.Data.SerializedGameConfig ShanghaiWindy.Data.LuaGameConfig CaptureZoneModeConfig Namespace: ShanghaiWindy.Data Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public class CaptureZoneModeConfig : LuaGameConfig Fields backgroundCameraTransformInfo Declaration [DocGen] [SHWLabelTextAttribute] public TransformInfo backgroundCameraTransformInfo Field Value Type Description TransformInfo captureZoneName Declaration [DocGen] [SHWLabelTextAttribute] public string captureZoneName Field Value Type Description string captureZones Declaration [DocGen] [SHWLabelTextAttribute] public CaptureZone[] captureZones Field Value Type Description CaptureZone[] displayName Declaration [DocGen] [SHWLabelTextAttribute] public LocalizedName displayName Field Value Type Description LocalizedName mapGuid Declaration [DocGen] [SHWLabelTextAttribute] public string mapGuid Field Value Type Description string zoneChains Declaration [DocGen] [SHWLabelTextAttribute] public ZoneChain[] zoneChains Field Value Type Description ZoneChain[]"
  },
  "api/ShanghaiWindy.Data.html": {
    "href": "api/ShanghaiWindy.Data.html",
    "title": "Namespace ShanghaiWindy.Data | Panzer War Document",
    "keywords": "Namespace ShanghaiWindy.Data Classes CaptureZone CaptureZoneModeConfig MaterialConfig TransformInfo WaveAttackInfo WaveInfo WaveMissionConfig ZoneCapturePoint ZoneChain"
  },
  "api/ShanghaiWindy.Data.MaterialConfig.html": {
    "href": "api/ShanghaiWindy.Data.MaterialConfig.html",
    "title": "Class MaterialConfig | Panzer War Document",
    "keywords": "Class MaterialConfig Inheritance object ShanghaiWindy.Data.SerializedGameConfig MaterialConfig Namespace: ShanghaiWindy.Data Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public class MaterialConfig : SerializedGameConfig"
  },
  "api/ShanghaiWindy.Data.TransformInfo.html": {
    "href": "api/ShanghaiWindy.Data.TransformInfo.html",
    "title": "Class TransformInfo | Panzer War Document",
    "keywords": "Class TransformInfo Inheritance object TransformInfo Namespace: ShanghaiWindy.Data Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public class TransformInfo Fields eulerAngle Declaration [DocGen] public Vector3 eulerAngle Field Value Type Description Vector3 pos Declaration [DocGen] public Vector3 pos Field Value Type Description Vector3"
  },
  "api/ShanghaiWindy.Data.WaveAttackInfo.html": {
    "href": "api/ShanghaiWindy.Data.WaveAttackInfo.html",
    "title": "Class WaveAttackInfo | Panzer War Document",
    "keywords": "Class WaveAttackInfo Inheritance object WaveAttackInfo Namespace: ShanghaiWindy.Data Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public class WaveAttackInfo Fields canShowWayPoint Declaration [DocGen] [NonSerialized] [SHWLabelTextAttribute] public bool canShowWayPoint Field Value Type Description bool comment Declaration [DocGen] [SHWLabelTextAttribute] public string comment Field Value Type Description string vehicleGuid Declaration [DocGen] [SHWLabelTextAttribute] public string vehicleGuid Field Value Type Description string waveTransformInfos Declaration [DocGen] [SHWLabelTextAttribute] public TransformInfo[] waveTransformInfos Field Value Type Description TransformInfo[] waveWayPoints Declaration [DocGen] [SHWLabelTextAttribute] public Vector3[] waveWayPoints Field Value Type Description Vector3[]"
  },
  "api/ShanghaiWindy.Data.WaveInfo.html": {
    "href": "api/ShanghaiWindy.Data.WaveInfo.html",
    "title": "Class WaveInfo | Panzer War Document",
    "keywords": "Class WaveInfo Inheritance object WaveInfo Namespace: ShanghaiWindy.Data Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public class WaveInfo Fields destSize Declaration [DocGen] [SHWLabelTextAttribute] public Vector3 destSize Field Value Type Description Vector3 destTransformInfo Declaration [DocGen] [SHWLabelTextAttribute] public TransformInfo destTransformInfo Field Value Type Description TransformInfo enemyWaveList Declaration [DocGen] [SHWLabelTextAttribute] public WaveAttackInfo[] enemyWaveList Field Value Type Description WaveAttackInfo[] friendWaveList Declaration [DocGen] [SHWLabelTextAttribute] public WaveAttackInfo[] friendWaveList Field Value Type Description WaveAttackInfo[]"
  },
  "api/ShanghaiWindy.Data.WaveMissionConfig.html": {
    "href": "api/ShanghaiWindy.Data.WaveMissionConfig.html",
    "title": "Class WaveMissionConfig | Panzer War Document",
    "keywords": "Class WaveMissionConfig Inheritance object ShanghaiWindy.Data.SerializedGameConfig ShanghaiWindy.Data.LuaGameConfig WaveMissionConfig Namespace: ShanghaiWindy.Data Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public class WaveMissionConfig : LuaGameConfig Fields displayName Declaration [DocGen] [SHWLabelTextAttribute] public LocalizedName displayName Field Value Type Description LocalizedName mapGuid Declaration [DocGen] [SHWLabelTextAttribute] public string mapGuid Field Value Type Description string maxEscapeEnemyCount Declaration [DocGen] [SHWLabelTextAttribute] public int maxEscapeEnemyCount Field Value Type Description int missionName Declaration [DocGen] [SHWLabelTextAttribute] public string missionName Field Value Type Description string playerPickMaxRank Declaration [DocGen] [SHWLabelTextAttribute] public int playerPickMaxRank Field Value Type Description int playerPickMinRank Declaration [DocGen] [SHWLabelTextAttribute] public int playerPickMinRank Field Value Type Description int playerTeam Declaration [DocGen] [SHWLabelTextAttribute] public TeamManager.Team playerTeam Field Value Type Description TeamManager.Team playerTransformInfo Declaration [DocGen] [SHWLabelTextAttribute] public TransformInfo playerTransformInfo Field Value Type Description TransformInfo playerVehicleType Declaration [DocGen] [SHWLabelTextAttribute] public EPlayerVehicleType playerVehicleType Field Value Type Description ShanghaiWindy.Data.EPlayerVehicleType waveInfos Declaration [DocGen] [SHWLabelTextAttribute] public WaveInfo[] waveInfos Field Value Type Description WaveInfo[]"
  },
  "api/ShanghaiWindy.Data.ZoneCapturePoint.html": {
    "href": "api/ShanghaiWindy.Data.ZoneCapturePoint.html",
    "title": "Class ZoneCapturePoint | Panzer War Document",
    "keywords": "Class ZoneCapturePoint Inheritance object ZoneCapturePoint Namespace: ShanghaiWindy.Data Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public class ZoneCapturePoint Fields defaultOwner Declaration [DocGen] [SHWLabelTextAttribute] public TeamManager.Team defaultOwner Field Value Type Description TeamManager.Team pointName Declaration [DocGen] [SHWLabelTextAttribute] public string pointName Field Value Type Description string position Declaration [DocGen] [SHWLabelTextAttribute] public Vector3 position Field Value Type Description Vector3 radius Declaration [DocGen] [SHWLabelTextAttribute] public float radius Field Value Type Description float"
  },
  "api/ShanghaiWindy.Data.ZoneChain.html": {
    "href": "api/ShanghaiWindy.Data.ZoneChain.html",
    "title": "Class ZoneChain | Panzer War Document",
    "keywords": "Class ZoneChain Inheritance object ZoneChain Namespace: ShanghaiWindy.Data Assembly: cs.temp.dll.dll Syntax [DocGen] [Serializable] public class ZoneChain Fields fromZone Declaration [DocGen] [SHWLabelTextAttribute] public string fromZone Field Value Type Description string toZone Declaration [DocGen] [SHWLabelTextAttribute] public string toZone Field Value Type Description string"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Panzer War API site | Panzer War Document",
    "keywords": "Welcome to Panzer War API site From here, you can view all the apis in Panzer War."
  },
  "manual/日报.html": {
    "href": "manual/日报.html",
    "title": "装甲纷争研发周报 & 日报 | Panzer War Document",
    "keywords": "装甲纷争研发周报 & 日报 后续可做的内容 飞机，步兵用 新 UI 系统。输入这一块整理，保证统一都使用 Input System。 （输入值的规范，飞机输入值取反问题调查。弃用老的 Input 系统。） 自发光管理 调研 坦克工坊更加灵活的新 UI，方便后续新功能，新编辑，参考地图工坊编辑器 轮式载具可选项的机制 阿克曼转向 机制引入 武器过热机制 https://www.youtube.com/watch?v=ZwMa9g7lvT8 全职开发阶段 2023/10/16 ~ todo: 10/29 - 11月中旬 新版本更新 （进入下一阶段的 模式与人机逻辑优化迭代） 新功能调研 10/30 修复人机长时间攻击一个无法击穿的敌人 版本回归测试 （单机，多人，各个模式，各种不同类型的弹种） Steam ST 分支打包 修复车库后效不显示 10/29 版本bug 修复 人机近距离敌方目标权重低 新模式使用新人机 T-14 等坦克，内部模块血量存在问题 (可能是打包机问题) Mine 地面材质丢失 新模式下，鼠标部分情况下被隐藏 UI 局内与自定义位置适配问题 文字战报 NvsN 不对称人数结算问题修复 最小，最大等级的判断逻辑 10/28 改善工具链，基础建设。 地图换成基于 Guid 的配置 Config 增加支持跨项目的保存逻辑 确保版本稳定，预计11.1 更新客户端 Bundle 库增加 Patch 功能，方便跳过热更本地快速调试 10/26 - 10/28 新的车库界面 新的模式选择流程 修复 N vs N 模式的匹配问题 10/22 - 10/24 AI Task 系统，人机固有 Task + 模式特殊 Task （每个逻辑 Tick ，排序 Task 权重） 寻路 Task 锁敌 + 攻击目标 Task 占点 Task 攻击某位置 Task 防御某位置 Task 10/25 打包机一键同步项目 sh 进入模式界面迭代 Task 攻击某位置 Task 10/24 占点模式的测试反馈迭代 占点模式的点数机制 以及 胜负判定 Config 自动打包优化 导出新的 api 模组教程从语雀迁移到官网 10/23 锁敌 + 攻击目标 Task 攻击目标任务时候 进入 FSM，摆角度，装弹，找到合适攻击位等逻辑 基于模式的 Task ，占点 Task CountrySide 地图增加占点模式 10/22 AI Task 系统 Task 对应的 Handler， 可能是简单的 Handler，也可能是复杂的 FSM 新的人机寻路 Task （更好的规划路线） 10/21 占点模式细节优化 出生点位置调整 增加复活 CD 占领点之间的连通性规则 新 AI 框架设计调研 10/20 创建 Trigger API 占领点逻辑 占领点 UI 修改 10/19 修复自定义 UI 按钮监听没有及时销毁，导致无法重开lua 虚拟机 占点模式选车功能 占点模式 UI 细化 从不同占领点出生 头顶的两队分的计算 队伍出生逻辑 10/18 Lua UI MVC 功能 占点模式的 Lua UI 显示当前不同占领点归属情况 10/17 重构 Config 加载 ab 的功能 增加 ResourceTable 暴露背景摄像机位置操控 API 10/16 出生点系统增加根据给定点位随机 占点区域可视化 9.19 并行：切新版本号，发热更 模式需要增加一个 dropdown 保存预设，以及删除预设 试车场回到选车页面，需要关闭载具下拉框 8.29 试车场改为 Lua 版本实现 实现场内换车 （原地） 需要以下 API 内容 隐藏双方比分 作弊 API 启用， （此时，关闭结算收益） 游戏模式选择，地图选择的数据管理，放到单独的 Manager 上，解耦 GameMainGameModeUIComponent.cs 占点模式 提供接口，给 AI 了解目前有哪些点需要去占 8.12 ~ 8.13 本周末工作进度： 新的对战积分显示，占点界面 50% 载具分 Unlit, SimpleLit 与 PBR 三种不同 Shader 了解 CityGen3d 用法 50% 新版 lua 的遭遇战，支持空战以及玩家的一些需求 50% 检查Mod 直升机结算界面倒飞问题 重构玩家数据结构，使对战面板可以累积造成伤害值等数据 提供给 Lua 的通用的选项界面，通用的序列化接口 Work of dev in this weekend Battle points display and point capture UI (50%) Vehicle shaders option for Unlit, SimpleLit, and PBR Usage of CityGen3d (50%) New Lua skirmish mode with flight combat (50%) Refactor player data structure for cumulative damage tracking on the team panel Provide a generic Lua interface for options and serialization interface 8月版本 低端显卡支持 [x] 低端显卡支持选项 [x] 载具的低配 Shader NPR [ ] 场景增加去光 Shader 自动替换 [ ] 特效分层 （降特效渲染分辨率） [ ] 特效质量管理（粒子数量 > 某个threshold 降低粒子数量） 模式重构计划 [ ] Lua 模式接口开放 [ ] 所有游戏模式转为 Lua 编写 [ ] 占点模式 [ ] 出战队列选择 通用 UI [ ] 载具过滤界面增加国籍过滤 以及国家背景图？ 7.30 新的结算画面 RC 1 [ ] Lua Buff [ ] 引擎着火 Buff [x] T-35 等炮塔坦克，实装新的 Guid 关联 [x] HP Only 的载具可以卡到 Include Module 模式下 [x] 血条颜色太亮了？ 连续掉血的表现不佳，会抖动 [x] UI 透明度调整 [x] Substitute Buff 需要保证服务器不会自己加， ClientToServerOnly 或许需要一个更加 Generic 的结局方案。 （此版本暂时不修复，不影响正常游戏对局，最多有点报错） 新模块系统 [x] Buff 系统 [x] 模块自动修理 [x] 模块自动修理优先级 [ ] 模块自动修理优先级设置 (会有网络同步问题，暂时不做) [x] 模块手动修理 [x] 载具模块状态显示功能解耦 [x] 模块状态网络状态同步解耦 （强制服务器模块状态覆盖本地状态） [x] 飞机 KnockManager [x] 成员换位 [ ] X-Ray 解耦 飞机暂时不需要提供 X-Ray [x] TopCamera 解耦 [x] 模块颜色同步显示界面解耦 [x] 绑定坦克模块成员，对应的 Controller [x] 绑定飞机模块成员，对应的 Controller [x] DIY 坦克生成需要绑定不同模块 [x] 飞机模块继承对应接口，实现 Debuff 逻辑 [ ] 模块修理按钮需要能够有不同类型的按钮看清楚模块类型 [ ] 模块修复，替补成员，需要快捷键 [x] 模块绑定，需要插槽 [x] 手动修理模块时候，需要降低炮塔移速，与禁止移动 [x] 成员补位需要面板 [x] VehicleBaseModule 层级还是给下调到 -1 [x] 一些模块检查为啥没有 Handler [x] 衰减系数叠加后有点离谱，有待优化 [x] 装填时间要显示被减少了多少百分比 [x] 弹药架击毁后增加一个 弹药架爆炸的 Buff，在下一次弹药架再次被击毁时候，殉爆载具。 [x] 客户端或者服务器载具炸了，相互发协议确认， [x] 测试多人模式是否正常 [x] 炮弹换成对象池 [x] VehicleBase 自定义键位 [x] Minimap 开关选项 [x] 混合模式需要可以秒修模块 （且修理包是 cd 恢复点数） [x] 修理包点数功能 [x] Damage 模式，增加 Hybrid HP Module [x] 控制器 Buff 接入补全： [x] 1. 机甲 [x] 2. 赛车 [x] 3. 车 需要同步的 Checklist: 模块血量变化时 添加非自动加的 Buff，如手动维修逻辑 需要一个基类，公用模块相关协议 2023.3.1-2023.6.1 [x] 飞机增加瞄准到目标才允许开火 [x] 修复飞机手机端按钮输入逻辑错误 [x] 修复部分坦克法线错误 [x] 增加坦克的 Lua 控制重载 [x] 编辑器 NPM 源 [x] 编辑器支持 FPS [x] 修复 HE 爆炸对装甲排序的错误 [x] 运行时 Lua Profiler，以及 Lua 相关性能问题修复 [ ] 车库显示抗破，抗穿区别 [ ] 涂装界面通用化，迁移普通版 [ ] 自定义贴图界面通用化，迁移普通版 [x] 车库后效回放功能 [ ] FPS 改进 UI 与 输入 [ ] FPS 移动使用 FSM [ ] FPS AI 支持 武器 FSM [ ] 机瞄调试工具完善 [ ] 新编辑器工具安装教程 [ ] 增加 CC 的 Lua 控制重载 [ ] 物理悬挂履带技术尝试重部署手机端（性能调优） Lua 功能改进 [x] Lua 脚本导入编辑器的自定义 import [x] Game mode 支持面向对象 （传入 self） [x] 客户端的 lua 文件夹，用于快速调试 lua 文件 [x] DIY 的 lua 组件，支持面板上显示调整 Lua 自定义的 Property [x] lib 的依赖功能 窗口 [x] 原本的 LuaProject 工程，框架内容与游戏性内容文件夹整理。 游戏性内容，用新的方式进行改进。 2023.2.1-2023.3.1 [x] md5 校验本地文件增加进度条 [x] 多人模式服务器资源打包流程 [x] 改进炮塔，修复历史遗留问题 [ ] Map Build Group 改为 Map Wizard 默认创建方式，Map Group 自动设置 scene name [ ] 优化 Shared Data 对配置文件的刷新逻辑 （在 Pack 与打包时候处理 Shared Data 的覆盖） [ ] Map 打包时候强制要求填写地图本地化名称，载具则是 log 提示填写本地话名称 [x] 优化编辑器的报错提示，增加汉化 [ ] 编辑器导入、导出地图工坊的视频教程，以及对 DIY 地图在 Unity 内打包时做一些特殊的优化。 （生成一个 Temp Scene，对于未烘培光照的地图，则直接放入一个 rule assembler，在加载地图时候才加载 DIY 地图资源。对于存在烘培光照的地图，记录光照烘培信息，动态创建 DIY 地图资源时候，对资源进行 lightmap 的绑定） [x] 编辑 HitBox，VehicleTextData 时候，pop 新的窗口。 [x] 对同一个 parent的，可 batch 的模型物体进行合并 （DIY 开启可合并，） [x] 62式 后效修复，PBR 化 [x] FMod 的技术调研与接入 [x] 编辑器修复弹药架排序问题 [ ] 机甲增加 DIY [x] 修复 DIY 自定义尾烟 [x] LOD 设置 Layer 跟随 创建者的 Layer 2023.1.1-2023.2.1 春节阶段 [x] 增加举报与封禁系统 [x] 内部资源工程转为可公开的 mod 工程 1/19 普通版兼容 [x] 打包时候 HotFix 随包资源 [x] 增加内置成员语音 [x] 队伍列表按钮，左右两侧列表删去 （放在界面左侧） [x] 普通版聊天框调大 [x] 房主端记录所有聊天，方便举报功能 [x] 升级 arr，增加 dependency.xml [x] 房间额外信息显示小版本号 [x] 联机界面显示大版本号 [x] 联机界面进入时候显示多人模式的用户协议 [ ] 热更逻辑优化，本地zip解压成功做一个标记位，尽量减少热更整包的可能性 1/15 [ ] 科技树支持 Mod 的文档说明 [ ] DIY 科技树，如果有未安装的 DIY，显示一键下载所有科技树 DIY 的功能 [x] unity package 依赖放到 manifest.json 里 ad 和 timeline 的 [x] 瞄具增加图片显示 [ ] 瞄具增加重载 炮镜效果 [ ] 左右两队顶部类wot总血量显示 可以参考坦克连等游戏设计 1/8 [x] Mod 安装器入口增加 [x] Depth Texture 实时生效 1/7 [x] Tonemapping 开关 , Bloom 开关 -> 根据后处理质量开启 [x] 查看多人模式飞机自爆问题，飞机伤害盒穿过问题 [x] 队伍面板增加伤害，击杀显示支持离线显示 [x] Mod 安装器改为快捷方式 [x] 修复 Steam 版 内置模组下载器列表空 1/6 热更，打开客户端即会下载更新 [x] 修复 Ju 87 螺旋桨渲染问题 [x] 修复单机模式下部分飞机无法击中 （多人模式房主问题给等下次客户端更新修复） 1/5 [x] 科技树支持Mod 配置 [x] 炮弹射线双向检测，防止从地下被穿 [x] 修复自定义车库地图删除时，导致无限卡死 [x] 增加一个带火炮的 Random 的 API 1/4 热更，打开客户端即会下载更新 [x] 内置载具 T-72, IS-2 模组命名冲突 [x] BF-110 HE-111 螺旋桨渲染不正确修复 (Ju-87还有点问题下次修) [x] M1 履带穿模修复 [x] 机枪后效增强 [x] 增加 Mark IV,FT-17,A7V 1/3 小包 平衡性调整 [x] 默认初始装弹剩餘 0.5 秒 (測試普通裝彈，彈夾，彈鼓，以及能量武器) 资源调整 [x] 热更每次校验本地文件 md5，对于差异文件需要加入到热更列表，防止本地文件损坏导致游戏体验问题 [x] 校验外部公共文件夹内文件是否可以读写 优化调整 [x] 关闭 bloom 的 high quality filter [x] 增加是否开启深度图的选项 [x] 不开启深度图，天光效果也不开启 Bug 修復 [x] mod的 lua 環境未創建 2022.11.1-2022.12.30 非全职阶段周报，预计大小周版本发布频率 11.28-12.25 Mod 工程侧打包流程优化 [x] 增加 dds 转 png 的自动导入流程 [x] vehicle info 打包组，方便将多个载具打包到同一个 modpackage，减少资源的冗余 [x] modpackage 增加导出 steamships 的文件夹 [x] 编辑器与 Steam Mod 上传工具打通，上传工具的源码加入 middle layer [x] dependency 优化 [x] 修复打包依赖的hash变化 项目侧需要一个更加强大的 Mod 加载框架 [x] 支持 Package 的 基于 GUID 的 dependency 加载 [ ] 支持 Package 的文件校验 （是否丢失，md5）每次运行只校验文件是否存在，如果文件不存在则说明可能模组文件被删除部分。安装时候校验 md5，防止 mod 文件下载时候，安装时候文件损坏 [x] 支持拆解到空工程进行项目测试 与特定业务解耦 [x] 也支持可动态加载 Mod （当动态加入了新的 Mod，重写 Resolve 依赖，尝试把因为依赖问题导致无法加载的 Mod 加入进来） [x] mod 的依赖文件在文件夹上进行隔离，防止 a 的依赖文件加载到 b 模组加密 [x] nested mod package files ，将文件夹以 有 package 文件夹作为一个文件夹 [x] 详细的测试，包括官方模组，社区模组，付费模组，steam 模组，mod.io 模组。需要小范围的社区玩家的支持。 [ ] 评估是否仍需 cache vehicle info 的流程 [x] 内置模组器下载 DIY 载具的特殊逻辑处理 (增加 Resolve 机制) [x] 普通版载具，决定版载具打包为 mod，以 mod 形式加载，方便热更以及版本之间的共享 [x] 解压本地热更新，需要显示一个界面，并且解压的流程放线程里面，防止主线程卡死 [x] mod.io 传的一些 modpack 文件，订阅后，自动拷到安装目录 Bug Fixs [x] 修复初始炮塔朝向不对 [x] 修复一些情况下载具 icon 不显示 11.21-11.27 数据平衡 & 补机枪：豹式，虎式，M4 谢尔曼 兼容旧载具：所有载具改为新音效系统的引擎音效与开火音效 bank 支持从 ab 加载，放入热更文件夹 bank 的语言组制作教程 项目侧需要一个更加强大的 Mod 加载框架 20% 11.13-11.20 载具 rpm 换挡改进 履带音效 方向机 高低机音效 成员语音改fmod t-34-76,t-34-85,kv-1,kv-2 相关音效改进 增加 Shared 数据的导出 增加 JObject 数据的导出与导入 修复 sound bank 加载流程的一些问题 11.7-11.13 11/7 修复下登陆窗口默认显示的问题，用代码隐藏默认隐藏的界面，防止后续误操作 代码回合 master 夜间打包 11/8 分享码 hash 变化原因：新增字段。修复未分享码的提示。 自定义贴图集与管理器 （master分支） 11/9 iOS版加入加载遮罩，隐藏加载进度条，更改包名 自爆功能，自爆的弹药继承 explosion bullet （master 分支） 11/10 自爆功能完善 11/11 调整默认的模式顺序，不联网的情况下不显示多人模式的下拉框，把旧的多人模式去掉 11/12 地图工坊增加一个组件，来支持多场景的叠加。地图加载的逻辑需要抽出来，不与加载系统绑定。 rf 地图支持 自定义 DIY 地图的 rules 11/13 fmod 接入 离合功能 gear 功能开发 11.1-11.6 11/1 修复 DIY 副炮无法自定义弹药，增加开火组。 更新到线上去。 共享类数据的读取改为 Runtime 50% 11/3 共享类数据机制重做，改为用 自定义 Editor，OnEnable 时候将所有编辑的 Target 所依赖的 VehicleTextData 都找到，然后 GUI dirty 时候，对所有的 Target 重刷数值。50% 11/4 共享类数据机制重做，改为用 自定义 Editor，OnEnable 时候将所有编辑的 Target 所依赖的 VehicleTextData 都找到，然后 GUI dirty 时候，对所有的 Target 重刷数值。在 BuildPipline 时候再做第二次的数据赋值，保证其数据的正确性 100% 11/5 普通版发布新更新 增加 rf 地图的支持 DIY 轮射机制 11/6 rf 地图可自定义出生点 增加登陆 & 加载的背景图，防止卡 iOS 审核 编辑器增加检查依赖工具 2022.9.29-2022.10.31 全职工作阶段日报， 10月记录 2022/10/31 全职开发阶段的文档整理，技术复盘。打包流程相关记录。 拖车增加 DIY 参数 调整 HE 机制 履带 Material Property 增加对 Color 的支持 修复 DIY 副炮无法自定义弹药 （未发到线上） 增加开火组 （未发到线上） 2022/10/30 小拖车逻辑进行优化，以便支持任意节点的连接 发布普通版的更新 发布决定版的更新 2022/10/29 弹种相关优化 伤害，穿深浮动默认系数从 0.75~1.25 改为 0.95 ~ 1.05 ，且加入到 Conf 数据中，方便玩家自定义配置 AP，HE 弹 增加是否随距离衰减选项，AP 默认开启，对 防空车的炮弹关闭。 HE 弹默认关闭。 随距离衰减系数从 0.1 改为 0.05 服务器炮弹校验不通过原因定位 普通版 bug 修复 iOS版本（海外）提交审核 2022/10/28 对新版本内容进行回归测试 打包机配置安卓包打包环境 （提升工作流效率） 小拖车在多节连接时候， ReAttach 问题。回放表现优化（抖动，初始位置错误）。 iOS 版本一些问题解决，预计 10/29 提审 一些 io 路径错误，进行修复 检查iOS的一些审核合规要求 资源分包，热更相关逻辑优化，防止各种情况下的下载失败 2022/10/27 小拖车开发 100% (回放功能， ReAttach 物理表现优化，多人暂时禁用 DeAttach（要加协议），开镜特殊处理，开火后座特殊处理) DIY 模块增加 LOD LOD 相关机制改进 载具工坊导入时候缺失的模块提示具体缺失的内容 2022/10/26 小拖车功能开发 70% 挂载的 deattach ，reattach 逻辑完善，增加 UI ，输入用 InputSystem iOS 版本支持工坊内容 2022/10/25 载具存档增加如 地图一样的 extra 信息 srp 兼容特效上的模型 iOS 打包自动化 100% (xcode 工程 导出 ipa 与上传 AppStore) 小拖车功能开发 30% 普通版客户端更新 弹药自定义 老界面替换 空气墙问题客户端修复 升级版本号，显示强更界面 2022/10/24 小拖车功能技术调研 编辑器增加导入载具存档功能 空气墙丢失问题紧急修复 iOS 真机测试 iOS 打包自动化 50% (Unity 导出 xcode 工程) 2022/10/23 进行普通版的更新工作 新版本打包，以及服务器部署 2022/10/22 定档 10/23 更新普通版本 服务器内存占用优化，打包普通版的服务器，架设个测试服在负载低的服务器上 打包 il2cpp 普通版跑测体验 检查 海外版功能是否都正常 检查 国内版功能是否都正常 决定版海外发布更新相关工作部署 资源校验流程改进，联网验证流程改进 上传 aab 包到 Google 进行本地测试，然后发布更新 决定版喷火器优化 2022/10/21 去公司办离职相关手续 iOS 海外版本发布等工作部署 80% mac 机 工程部署与打包 真机测试 测试设备未注册，等待苹果审核，https://www.yuque.com/uasier/blog/srmqxz 暂时在旧 iPad 设备上尝试运行iOS版本 普通版新版本 回归测试 内衬减伤变成了增伤 无调试日志，无日志上传功能 lod 问题,lod 系数保持与决定版一致 0.4，0.6，0.8，2 决定版热更内容： DIY 地图的碰撞问题 （重打包下资源） 火炮的模块化设置 2022/10/20 iOS 海外版本发布等工作部署 50% xcode 版本升级 mac 环境 Jenkins 搭建 普通版相关工作 合并最新代码 KV，丘吉尔，M4作换皮新载具， 加一个额外的喷火器模型，升一级作为新研发坦克。 喷火器弹道优化 普通版 bug 修复 打包客户端与服务器 HDRP 地图内容开发 （长期工作） 2022/10/19 海外版随包资源优化 走 SteamingAssets，校验改为服务器发起 iOS 海外版本发布等工作部署 20% 苹果开发者账号续费 mac 环境重搭建，系统升级 HDRP 地图内容开发 （长期工作） 20221015_OBT 版本问题修复 充能武器的网络同步 以及 回放问题 指挥官模式的 bug 修复 回放表现优化 20221015_OBT 内容测试 多人联机武器开火同步，激光同步，火焰同步 stb等载具的材质是否正常显示 新广告系统是否在手机上正常播放 回放是否正常 2022/10/18 编辑器相关优化，进行更多的本地化覆盖，改善 Mod 开发者的工作流。 普通版海外用新的聚合广告。（Unity 即将弃用 老的广告系统） 2022/10/17 可配置数据从游戏主模块脱离，方便三端同时更新。 100% HDRP 版本进行更新 并管理版本 ModIO 放 Manager 车库历史战配置放 Config Vehicle Camouflage 从 URP 迁移，四个情况的材质球。 Addressable 资源位置摆放整理，参考 URP。 场景转 Addressable （为啥 pack group 没自动生成？） 载具转 Addressable 的依赖，生成 lod Mask 采用与 URP 一致的 脏迹贴图 采用与 URP 一致的 Timeline 后效回放与 Main Camera 的后处理进行区分，防止曝光导致看不清后效回放。其次，尽可能优化后效回放时候的渲染压力。 HDRP 对多摄像机的优化不是很好。 普通版进行更新，并推送 Steam SuperTest 分支测试。 构建安卓版，以及服务器版。 2022/10/16 跟进 20221015_OBT 版本问题 动态天气丢失 (Profile 未打进包里，Addressable 打包问题) SPG 没法瞄准 （时序问题） 热成像显示问题 （LOD 问题） 谢尔曼尾部无法击穿：（间隙问题，后面排挡修复） 车库载具展示问题 （层级设置错误） 部分情况下喷火,激光特效消失（对象池在开火后才创建，时序问题） 地形Height 修改 Blit Shader 丢失（Addressable 打包问题） HEAT 调整为 1mm 损失 3mm 穿深 (平衡调整) 版本发布翻车，复盘遇到的坑技术点 2022/10/15 切稳定分支 20221015_OBT，打包游戏并跑测检查问题。同步代码到 HDRP版本，进行打包。 优化能量武器的数值与音效。 （可热更新） 修复 lua 模式报错 删除纯白涂装 修复音量最小仍有声音 可配置数据从游戏主模块脱离，方便三端同时更新。 80% 2022/10/14 将移动端的键鼠输入优化合入 master 分支 输入控制启用、禁用管理，防止未聚焦时候误输入 asmdef 整理 编辑器相关代码整理，增加 自动生成 link.xml ，strip code 等级调整。 解决版本 bug 尽可能完成部分玩家建议的优化单内容 2022/10/13 载具自动 lod 生成 载具Addressable 资源冗余解决 hlod 技术调研 2022/10/10 ~ 2022/10/12 if 节点优化后性能有所提升，但是 keywords 真机变体丢失。 解决方案： a. dirt 使用 multi compile 而非 feature，打包时候会自动排列需要的关键字，防止打包丢失变体。 b. 涂装用 lerp 决定是否开启效果，而非 keyword 防止过长的打包时间 perfect culling 与当前的场景系统冲突，需要将资源引用创建一份新的 prefab 并保持原有引用，然后设置 Addressable 进行合理的分包。否则，Addressable 的大小会太大。 目前进度： a. Addressable 如果单纯把场景都放一起打包，会有 1.2g 的占用。 b. 在尝试使用 pack seperately 以及 lzma 压缩格式。 解决方案： a. 关闭 static batching 防止打包包体过大 b. perfect culling 暂不加入新版本，等后面版本增加一个选项后再统一加入。 c. 场景的依赖性加入到 Addressable，减少资源冗余 2022/10/9 载具 Shader 性能优化，Shader Graph if 节点优化掉，可能是 gpu 瓶颈。改为用 Keywords. Keywords | Shader Graph | 8.1.0 2022/10/8 下周还给上一周班，所以，下次版本更新定在 10/15。日报暂时暂停。 2022/10/7 增加充能类武器音效 激光，火球增加伤害，穿深按距离衰减的曲线 HEAT 弹通过间隙装甲时候，1mm 间隙损失 10mm 穿深 规范伤害，穿深的 Buff 机制 增加工坊激光枪武器 wwise 相关技术调研 继续尝试改进 OTA 鼠标输入的问题 2022/10/6 激光武器的开发 100% 喷火武器迭代 a. 改善喷火武器的后效 b. 增加工坊喷火器武器 修复 Steam 版多人模式可打开 GM 面板 尝试改进 OTA 鼠标输入的问题 2022/10/5 喷火武器的开发 100% 喷火后效与数值计算 能量武器开火管理 100% 特效接入 保障 20221003 版本的稳定发布 修复开火后坐力都与主武器一致 车库增加旋转朝向自定义 修复 BanPick 界面读取配置的界面适配问题 修复 FPS 模式准星刘海屏适配问题 车库显示特效对象池 修复火炮在车库的炮塔默认朝向 2022/10/4 喷火武器的开发 50% 喷火器模型准备，特效准备 弹道系统抽离为 普通弹，VT弹，喷火弹 能量武器开火管理 50% 保障 20221003 版本的稳定发布 修复自定义地图被删除后，车库展示界面卡死 修复 VT 弹空爆算法错误 修复炮管制退错误 修复一些报错 2022/10/3 进行版本发布相关工作，切稳定分支 20221003_OPT。跑测游戏，对新增内容进行验收，以及回归测试。 凌晨进行自动化打包发布工作。 车库展示运镜 尝试 Timeline 效果，各种运镜技术调研 2022/10/2 人机载弹量随机分配，带来更多策略 显示瞄准的目标的装甲与击穿率 地图工坊增加刷载具点（记得升 lua version） 自由摄像机最好可以改为通用 UI 框架，其次，最好继承 BaseInitSystem，以玩家形式加入到游戏内。 决定版遭遇战，历史战，增加自由摄像机选项 伤害，穿深的伤害数值分布与 WOT 更加接近，修复高爆弹越打伤害越高。 出包对近期新内容进行回归测试 50% 2022/10/1 生成 Lua 界面的 Binding 代码，方便 lua 侧的 UI 开发 遭遇战可从载具列表中进行选择，（lua 那个遭遇战模式去做） 车库自定义背景与位置 100% （位置自定义设置，以及摄像机的层设置，防止空气墙也显示） UI 加载中状态的管理以及切场景时候，可以统一卸载一下 UI （部分卡UI的方法，刚进游戏就退出，此时可能在异步加载 UI） 比较粗略的死亡回放，从当前朝向往击杀人那边进行观看 飞机打包采用 GUID 2022/9/30 弹种界面改善，让玩家可以分清楚哪个是副炮的，哪个是主炮的界面。 开火系统的初始化重构，确保开火系统的数据的时序性，能够初始化时候取到正确值。 飞机增加弹种的显示 BP 界面迁移到新的UI框架，且增加配置加载与保存功能 准星抖动修复 车库自定义背景与位置 80% 2022/9/29 弹种支持配置副炮，迁移到新 UI 框架，有望接入到普通版。 2022.7.1-2022.8.1 改善坦克，飞机的位置的同步算法，更加平滑准确。 lua 开发相关教程， lua view code 生成。 单元测试，测试伤害分布是否满足正态分布， 增加diy 水体 坦克倒车爬坡优化 撞击伤害考虑装甲 改善坦克的旋转表现 改善直升机控制 2022.6.1-2022.7.1 地形 2.0 工具迭代 Bot 翻车检测，自动归正 ~~服务器伤害校验逻辑修改 （此方案因安全原因无法实现）~~尝试提高玩家的同步频率以及改善服务器的网络。 游戏内导入（坦克、地图）工坊分享码（最新 ) 寻路编辑可视化功能 （用于检查寻路功能是否正常，可调节的寻路参数） 坦克工坊炮塔增加默认插槽位置 DIY 补全进度 T-64BM T-80 IS-2 MK6 酋长 M60 2022.5.4-2022.6.1 模组编辑器，工作流改善。增加 Headless 打包策略。 模组完善计划 https://www.yuque.com/chaojiduolajiang/panzerwar/zky173 Y 高度检测，小于一定 Y 坦克爆炸 检查steam版读取mod文件路径 增加载具工坊，地图工坊导出modpack功能 hdrp ，普通版代码同步 hdrp 地图工坊基础功能接入 全面屏，刘海适配 接入 mod.io ，迎合海外的 ugc 社区 https://pw.mod.io/ 模组加载流程提示 工坊增加发布选项 2022.4.17-2022.5.3 摇杆优化 坦克手感优化 2022.4.4-2022.4.17 地形相关方案选型与实现 （优先度较高） T-54 悬挂调整 改进 BuildPipline ，减少打包时间。 1. 打包完成后，只保留在打包列表内的文件与 manifest，其他老旧文件则输出 log 并删除。（高优先级，现在打包时间实在太长了！） 改进 BuildPipline 的标签打包系统。分主资源 (对应 variant) + 依赖资源 （.unity3d） 地图工坊，载具工坊增加 世界/局部坐标切换按钮 出生，寻路节点增加一键贴地按钮 增加维修点，补给点 增加多种 Sky 的实现方式。 1. CubeMap + exposure 调节 2. 动态天空 3. 传统 6面 SkyBox 植被在新场景不显示问题调查（尝试更新插件） Mod Pack 增加 hashcode 功能选项 复制物件 改善交互，增加提示框 （可热更新） 地形编辑增加锁视角。 自动贴地选项，在所有物体加载完毕以后自动贴地 地形贴图缩放比例 针对 Tiling 的自定义，防止地形模糊。 增加 Focus 功能 放置射线未检测到物体，则放置在 y =0 的平面 版本问题修复 库尔斯克材质丢失 地形编辑加入是否在编辑的选项 地形界面改进，本地化 地形类型，夏季冬季 2022.3.27-2022.4.3 计划： 通用的摄像机控制框架，接口设计，若超过一个可用摄像机，界面增加切换按钮 增加 Gta 式的自由旋转，跟随摄像机控制 赛车摇杆输入方式作为通用操作方式之一 支持自定义位置 方向盘提供 -> steerG 油门 刹车提供 -> accelG 手刹 icon 氮气 icon 赛车操控热区范围过小，对于两边同时点，查看原赛车框架源码，现在有反向输入的bug 2022.3.14-2022.3.27 地图工坊 DIY lua 侧 framework 整理 3D Wheel Collider，赛车插件接入 准星抖动修复 ====================== 封版内容修复 =============== （已完成） 氮气图标不好点 Jeep 无音效 SUV 无 HitBox Mod 编辑器更新 自定义部件场景内仍无法播放推倒动画，检查原因 Tag 根据类型显示不同颜色 （红-> RedTeam，蓝->BlueTeam，黄->寻路点） 空气墙组件 （编辑器模式下 Cube，运行时只留 box collider） 地图编辑器模式入口 2022.3.7-2022.3.13 整理 VFX，Audio，UI 到通用目录 普通版 编辑器更新至 2022.2，Toponad插件更新，正常出包 编辑器工具 2022.2 分支更新，增加 Guid 查重工具 修复部分情况下击穿算法错误。（预分配数组未清空上次射线结果） lod 优化 修复部分情况下跳弹朝向错误 TODO - 待完成内容 增加 车头固定摄像机控制 工坊相关提示优化：保存成功提示，新手教程入口。-> 相关文档建设 制作 Mod 可能遇到的问题文档沉淀 赛车插件的资源，代码 Review。 Mod 工程相关案例整理。 地图工坊增加 Warning 列表，警告地图的可能性问题 增加右键拖拽选项 针对 PC 长按事件参数自定义，最短，最长。地形编辑下，关闭长按功能（可热更新） 保存提示缺失更加完善，冲突文件更加完善。 User Define 增加配件 info，在导入缺失配件时候，可以提示到缺少哪个配件 Map Define 在缺失场景 diy 下，仍保证其可以正常导入地图，可以 notice 缺少哪个场景 diy ScrollView 意外消失 原因不明"
  },
  "manual/component/1. 内置组件文档.html": {
    "href": "manual/component/1. 内置组件文档.html",
    "title": "| Panzer War Document",
    "keywords": ""
  },
  "manual/component/2. FmodPlayComponent使用说明.html": {
    "href": "manual/component/2. FmodPlayComponent使用说明.html",
    "title": "简介 | Panzer War Document",
    "keywords": "简介 FmodPlayComponent是一个 MonoBehavior 组件，用于异步加载并播放Fmod音效。通过关联**EventReference **和 **PlayParams **实现播放指定Fmod事件及其参数的功能。 如何使用 将FmodPlayComponent挂载到需要播放音效的GameObject上。 在Inspector面板中，找到EventReference属性，将需要播放的Fmod事件拖拽到该属性中。 在Inspector面板中，找到PlayParams属性，可以添加多个参数来控制播放效果。每个参数包含一个key和value，其中key为Fmod事件中的参数名称，value为设置的参数值。 以上是FmodPlayComponent的使用说明，如有疑问，请查看官方文档或联系开发者。"
  },
  "manual/component/3. VehicleTextData 使用说明.html": {
    "href": "manual/component/3. VehicleTextData 使用说明.html",
    "title": "基础 | Panzer War Document",
    "keywords": "VehicleTextData 是一个用于配置载具（如坦克、机甲、汽车等）的各种参数的类。本文档将指导您如何在 Unity Inspector 界面上使用它。 基础 玩家状态参数 (基础数据) PSParameter - 这个属性包含了玩家状态的基本参数。例如，生命值、国家、载具类型等。 移动 履带参数 PTCParameter - 仅在载具使用履带时显示，此属性包含了履带控制器的参数。例如，坦克的动力，速度，负重轮参数，独立悬挂履带等。 机甲参数 MechParameter - 包含机甲控制器的参数。例如，机甲的转向速度，飞行参数等。 汽车参数 CarControllerParameter - 包含汽车控制器的参数。 开火 共享主炮数据 SharedGunData - 此属性用于存储可以在多个载具之间共享的主炮数据。包括炮弹类型、射速、弹道、弹药容量等。 主炮参数 TFParameter - 当没有共享主炮数据时显示，此属性包含了主炮的参数。例如，射速、弹道、炮口初速、后坐力等。 自爆参数 VehicleSelfExplosionParams - 包含载具自爆功能的相关参数。例如，自爆范围、自爆伤害、自爆延迟等。 炮塔 共享炮塔数据 SharedTurretData - 用于存储可以在多个载具之间共享的炮塔数据。包括炮塔旋转速度、炮管升降速度、最大仰角等。 炮塔参数 MTParameter - 当没有共享炮塔数据时显示，此属性包含了炮塔的参数。例如，炮塔旋转角度、炮管升降速度、最大俯角等。 新多炮塔 多炮塔数据 MultiFireSystemData - 此属性包含了多炮塔系统的数据。例如，每个炮塔的炮弹类型、射速、弹道等。 简单多炮塔数据 SimpleVehicleFireSystemParameters - 此属性包含了简单d多炮塔系统的参数。例如，炮塔旋转速度、炮管升降速度等。"
  },
  "manual/gamePlay/1. 游戏调试工具.html": {
    "href": "manual/gamePlay/1. 游戏调试工具.html",
    "title": "1. 游戏调试工具 | Panzer War Document",
    "keywords": "1. 游戏调试工具 热更下载渠道修改 默认游戏是下载生产环境的热更文件，通过修改一个文件，可使游戏从测试环境下载热更新。 测试环境的热更新往往比生产环境的热更文件要新，但是也意味着可能存在 bug。在测试环境遇到 bug 需要及时上报给开发者。 **切换方式：**需要正常进入游戏车库一次，然后打开 /sdcard/Android/data/com.ShanghaiWindy.PanzerWarDEM/files/env.txt ，把 prod 改成 staging 保存文件即可 校验 DIY 资源是否完整 在调试窗口，增加了一些调试指令： DebugDIY DebugMapDIY DebugVehicles 输入调试指令后，点击回车，即可执行调试指令。所有的调试指令，输入 help 进行查看。 用于检查是否有部分资源在制作时候，或者安装后有所损坏，导致游戏卡死。 此检查会检查所有读取到的资源，所以过程会比较漫长。 如果要检查是不是有 DIY 忘记生成预制体了，则输入 DebugDIY 。"
  },
  "manual/gamePlay/2. 配置文件.html": {
    "href": "manual/gamePlay/2. 配置文件.html",
    "title": "2. 配置文件 | Panzer War Document",
    "keywords": "2. 配置文件 为了让玩家高度自定义化游戏的数值系统，开放了相关配置文件。 使用方法：将battleConfig.yaml.default 改名为 battleConfig.yaml （即删除 .default 后缀），则此配置文件将会生效。 battleConfig.yaml.default 路径： 安卓：Android/data/com.ShanghaiWindy.PanzerWarDEM/files/saves/battleConfig.yaml.default 电脑：SteamLibrary/steamapps/common/Cry of War/dlc/PanzerWar-DE/saves/battleConfig.yaml.default 修改规范 System.Single 表示可以填整数或小数 System.Int32 表示 填写整数 修改数值后，保证文件是 .yaml 为后缀，即可进入游戏体验不同的游戏。"
  },
  "manual/gamePlay/3. 游戏运行日志显示.html": {
    "href": "manual/gamePlay/3. 游戏运行日志显示.html",
    "title": "3. 游戏运行日志显示 | Panzer War Document",
    "keywords": "3. 游戏运行日志显示 游戏日志是用于分析游戏卡死原因的主要手段之一。 开启游戏日志 出于性能的考虑，在最近的版本默认保持了关闭。若需要开启，则需要手动在模组文件夹创建空文件 log.debug 或下载以下文件解压到模组文件夹下 log.zip 模组文件夹各平台路径 安卓决定版：/sdcard/Android/data/com.ShanghaiWindy.PanzerWarDEM/files/mods/ 安卓普通版：/sdcard/Android/data/com.ShanghaiWindy.PanzerWarOpenSource/files/mods/ 电脑普通版：SteamLibrary\\steamapps\\common\\PanzerWar-DE\\dlc\\PanzerWar\\mods 电脑决定版：SteamLibrary\\steamapps\\common\\PanzerWar-DE\\dlc\\PanzerWar-DE\\mods 电脑HDRP版：SteamLibrary\\steamapps\\common\\PanzerWar-DE\\dlc\\PanzerWar-DE-HDRP\\mods 对于安卓设备，装有 adb 环境，则也可以使用 如下 adb 命令 adb shell touch /sdcard/Android/data/com.ShanghaiWindy.PanzerWarDEM/files/mods/log.debug 调试日志显示 然后，你就可以看到游戏内调试窗口显示的运行日志。使用方法: 点击右上角自定义，拉到最下面，开启调试日志。 点击新出现的框，查看报错。 电脑版日志文件 电脑普通版： C:\\Users\\你的用户名\\AppData\\LocalLow\\ShanghaiWindy\\PanzerWar\\Player.log 电脑决定版： C:\\Users\\你的用户名\\AppData\\LocalLow\\ShanghaiWindy\\PanzerWar-DE\\Player.log"
  },
  "manual/gamePlay/4. 模组更新日志.html": {
    "href": "manual/gamePlay/4. 模组更新日志.html",
    "title": "4. 模组更新日志 | Panzer War Document",
    "keywords": "4. 模组更新日志 模组更新，请到游戏车库的内置下载器，重新点击下载要更新的模组，下载完成重启游戏即可完成更新。 （请务必安装 0.9.6 版本保证模组的正常更新流程） 更新日志 2022.5.8 交付模块版 SU 100 Y 测试(Steam 创意工坊) SU 100 Y 调整为 5级车，装弹时间砍为 17.5 秒，单发伤害提升，确保可以秒同级车 交付血条版 T67 测试（安卓） 2022.5.7 交付模块版 SU 100 Y 测试(安卓) 2022.5.6 SU 100 Y 测试 PBR 材质 2022.5.5 交付血条版 SU 100 Y 测试(安卓) 2022.5.4 修复鼠式履带与挡泥板装甲类型错误 修复 ST-II 其中一门炮没有音效 T-54 机动提升，改进悬挂的表现"
  },
  "manual/gamePlay/5. 闪退 & 无法进入问题解决方案.html": {
    "href": "manual/gamePlay/5. 闪退 & 无法进入问题解决方案.html",
    "title": "5. 闪退 & 无法进入问题解决方案 | Panzer War Document",
    "keywords": "5. 闪退 & 无法进入问题解决方案 此文档记录一些遇到的版本问题，以及解决方案。 灰屏卡住 将 Documents/ShanghaiWindy/PanzerWarMods 文件夹重命名为 PanzerWarMods-Bak，进入游戏，车库左侧模组，点击申请外部 SDCard 权限。然后退出游戏，将 Documents/ShanghaiWindy/PanzerWarMods-Bak 重命名为 PanzerWarMods 闪退 在升级完成版本后，进入某个场景发生闪退，可能是由部分老旧数据不兼容导致游戏闪退。解决方案：备份游戏存档，然后删除游戏，重新安装游戏。请务必看备份存档！ 备份存档 手动备份存档 注意：一定要按如下步骤一步一步进行操作，切记不要跳步骤！ 打开文件管理器 选择目录 Android / data / com.ShanghaiWindy.PanzerWarDEM / files / saves 长按选择复制，复制到 Android / data 目录下。 若同时想要备份模组，可将 Android / data / com.ShanghaiWindy.PanzerWarDEM / files / mods 长按复制到 Android / data 目录下。 删除游戏，重新安装 正常打开游戏至车库，然后退出游戏 将 Android / data / saves 目录 复制到 Android / data / com.ShanghaiWindy.PanzerWarDEM / files / saves 下 打开游戏，确认数据 若要恢复模组数据，请完成步骤 1 的备份。然后，将 Android / data / mods 目录 复制到 Android / data / com.ShanghaiWindy.PanzerWarDEM / files / mods 下 打开游戏，确认 Mod"
  },
  "manual/gamePlay/6. 地图编辑器使用教程.html": {
    "href": "manual/gamePlay/6. 地图编辑器使用教程.html",
    "title": "地图制作注意事项 | Panzer War Document",
    "keywords": "地图编辑器使用教程 案例地图分享码： c564f128-6d1b-4db5-84a2-953b1de0d52c -[Map]-[simplemap] 地图制作注意事项 需要包含 Tag，TeamAStartPoint（A 队出生点），TeamBStartPoint （B 队出生点）应该相互有一定距离间隔 使用空气墙组件，拉伸模型，围住地图边缘 警惕 Z-Fighting 带来的抖动，模型请勿完全重叠，会导致模型来回闪烁。 运行下可能问题 无法出生。 设置的 tag 太少或者距离过近。 远距离没看见自己摆放的小细节物体。由于优化原因，只有在工坊时候，才会显示所有物体，运行时会根据 lod 策略选择物体的细节等级"
  },
  "manual/gamePlay/7. Ravenfield 地图模组支持 Ravenfield Map Tool Support.html": {
    "href": "manual/gamePlay/7. Ravenfield 地图模组支持 Ravenfield Map Tool Support.html",
    "title": "7. Ravenfield 地图模组支持 Ravenfield Map Tool Support | Panzer War Document",
    "keywords": "7. Ravenfield 地图模组支持 Ravenfield Map Tool Support 版权合规 Copyrights ** 注意，请勿将没有版权的 Ravenfield 的地图提交到我们游戏的创意工坊，我们会立刻进行删除的处理。在使用此功能前，请确保你拥有正版的 Ravenfield。** 如果你是 Ravenfield 的地图所有者，我们欢迎你将你的 Ravenfield 地图直接提交到装甲纷争的创意工坊！ Attention！ You are not allowed to submit ravenfield map to our workshop if you do not have the copyright. And Please be sure you have owned the Revenfield in Steam first! **If you are the owner of the ravenfield map,you are welcome to submit it to our workshop!!! ** 介绍 Description 针对 Steam 的普通版，我们增加了对 Ravenfield 的创意工坊的支持。 For Panzer War : Lit on Steam, we add support for mod tool maps from Ravenfield. Step.1 如何获取 Ravenfield 的 Mod 地图？How to get Ravenfield mod maps? 打开 Ravenfield 的创意工坊 https://steamcommunity.com/workshop/browse/?appid=636480&requiredtags[]=Maps+-+Mod+Tools，订阅 Mod Tool 的 Mod 地图，然后在本地的 SteamLibrary\\steamapps\\workshop\\content\\636480 路径找到对应的 rfl 文件，此文件即为 Ravenfield 的 Mod 地图 Open the workshop of Ravenfield.https://steamcommunity.com/workshop/browse/?appid=636480&requiredtags[]=Maps+-+Mod+Tools Subscribe Mod Tool Maps. Then you can find rfl files from SteamLibrary\\steamapps\\workshop\\content\\636480 Step.2 如何给装甲纷争安装 Ravenfield 的 Mod 地图 How to install it for Panzer War? 将 Ravenfield 的 rfl 结尾的地图，放在 SteamLibrary\\steamapps\\common\\PanzerWar-DE\\dlc\\PanzerWar\\mods\\StandaloneWindows64_RvlMaps 路径下，即可使用 Ravenfield 创意工坊的 Mod 地图。同时，在游戏启动后，会在地图文件路径处生成一份 Yaml，可用于自定义出生点以及寻路点的坐标。 Place rfl files to SteamLibrary\\steamapps\\common\\PanzerWar-DE\\dlc\\PanzerWar\\mods\\StandaloneWindows64_RvlMaps Then open the game. A yaml file will be created after game is opened, you can change the yaml to custom the spawn points and patrol points. Q&A 如果出生点出生在异常位置，请使用进阶配置，调整自定义出生点。 If the start point is wrong, please use custom points. 部分地图会导致游戏 Crash。 Some maps will crash game. 进阶：如何配置自定义出生点 Advance: Configure custom points 在放完 rfl 文件后，重新启动一次游戏。即会在 rfl 同目录下，生成一个 yaml 文件 将 isCustomPoints 的 false 改为 true，修改下方 x,y,z 坐标为想要的位置 Config the yaml file created in step.2 # @Comment: 是否自定义出生点 @Type: System.Boolean isCustomPoints: false # @Comment: A 队出生点 @Type: ShanghaiWindy.Core.Data.SerializeVector3[] customTeamASpawnPoints: - x: 0 y: 0 z: 0 # @Comment: B 队出生点 @Type: ShanghaiWindy.Core.Data.SerializeVector3[] customTeamBSpawnPoints: - x: 0 y: 0 z: 0 # @Comment: 寻路点 @Type: ShanghaiWindy.Core.Data.SerializeVector3[] customPartolPoints: - x: 0 y: 0 z: 0 # @Comment: 寻路烘培参数 @Type: System.Int32 tileSize: 512 # @Comment: 寻路烘培参数 @Type: System.Single voxelSize: 2 可添加多个出生点以及寻路点，如下图所示 customTeamASpawnPoints: - x: 0 y: 0 z: 0 - x: -4 y: 0 z: -4 - x: 4 y: 0 z: 4 进阶：如何打包为 ModPackage 将 rfl 与 对应 yaml 文件 用 zip 形式进行压缩，然后将后缀从 zip 改为 modpack ，将文件命名改为 StandaloneWindows64_任意名称.modpack ，即可随地图与出生点配置信息分享给其他人。"
  },
  "manual/intro.html": {
    "href": "manual/intro.html",
    "title": "欢迎 Welcome | Panzer War Document",
    "keywords": "欢迎 Welcome 欢迎来到《装甲纷争》开发站，本站点的主要目的是为 lua 与 C# 开发，提供项目的程序接口的使用说明。 关于模组工程相关内容请前往此页面查看 模组开发文档 Welcome to the \"Panzer War\" development site. The primary purpose of this site is to provide API usage instructions for Lua and C# development. For information related to modding projects, please visit this page Modding Development Documentation.Mod Document"
  },
  "manual/lua/22. Lua 开发.html": {
    "href": "manual/lua/22. Lua 开发.html",
    "title": "视频教程 | Panzer War Document",
    "keywords": "视频教程 系列教程，讲解如何使用 lua 为装甲纷争编写各种内容 装甲纷争 lua 开发第一课 环境搭建_哔哩哔哩_bilibili 环境搭建 通过 lua ，可以显示自定义的玩法与独特的功能。 在开始之前，请确保你的本地环境已经安装 vs code 以及 emmy lua 插件 安装 VS Code 和配置 Emmy Lua 环境 Lua API 文档 游戏侧提供的 API Welcome to Panzer War API site | Panzer War Document Lua Playground 在 LuaPlayground 场景中，我们提供了一些 lua 的示例组件 Lua 组件 可以为物体挂载 LuaBehaviorMono 来实现 Lua 脚本的运行，可以在任意的 GameObject 上挂载此组件，来实现类似 Mono Behavior 的功能。 如何使用 LuaBehaviorMono 组件 Lua 代码参考 决定版工程 Lua GitHub - Doreamonsky/PanzerWar-Lua: Lua project for panzer war de. Lua is"
  },
  "manual/lua/22.1 Lua 断点调试.html": {
    "href": "manual/lua/22.1 Lua 断点调试.html",
    "title": "运行断点调试 | Panzer War Document",
    "keywords": "通过断点调试，你可以查看运行时候 Lua 的变量值，你需要先安装 Emmy Lua 安装 VS Code 和配置 Emmy Lua 环境 运行断点调试 选择应用 调试游戏 搜素 PanzerWar-DE.exe 调试编辑器 搜素 unity.exe 断点 在你要断点的代码左侧，点击一下，会出现小红点，表示代码运行到此行，会被暂停。 可以点击此按钮，一行行执行代码 鼠标放到变量上面，会提示变量的各种值"
  },
  "manual/lua/22.2 Lua Profiler 性能监控.html": {
    "href": "manual/lua/22.2 Lua Profiler 性能监控.html",
    "title": "| Panzer War Document",
    "keywords": "开启 Local mode 以及 Deep Lua 主要需要关注 self 的耗时，耗时 0.1ms 以上的可以认为是高性能消耗的行为，需要特别注意，以避免 update 每帧执行。"
  },
  "manual/lua/22.3 安装 VS Code 和配置 Emmy Lua 环境.html": {
    "href": "manual/lua/22.3 安装 VS Code 和配置 Emmy Lua 环境.html",
    "title": "安装 VS Code | Panzer War Document",
    "keywords": "Visual Studio Code（以下简称 VS Code）是一款由微软推出的免费且开源的代码编辑器。而 Emmy Lua 是一款专为 Lua 语言开发者设计的插件。在本文中，我们将介绍如何安装 VS Code 并配置 Emmy Lua 环境，以便进行 Lua 开发。 安装 VS Code 首先，我们需要下载并安装 VS Code。请按照以下步骤操作： 访问 VS Code 官网。 点击 “Download for Windows”（如果你使用 Windows 操作系统）或 “Download for Mac”（如果你使用 macOS 操作系统）。 根据你的操作系统选择适合的安装程序，并下载。 运行下载好的安装程序，并按照提示进行安装。 或者，可以从以下连接进行安装 https://vscode.cdn.azure.cn/stable/3a6960b964327f0e3882ce18fcebd07ed191b316/VSCodeUserSetup-x64-1.62.2.exe 安装 Emmy Lua 安装 VS Code 后，我们需要安装 Emmy Lua 插件。请按照以下步骤操作： 打开 VS Code。 点击左侧的扩展图标（或按下快捷键 Ctrl + Shift + X）。 在搜索框中输入 “Emmy Lua” 并选择第一个搜索结果。 点击 “Install” 按钮，等待插件安装完成。 配置 Emmy Lua 环境 配置 Emmy Lua 环境需要先安装 JDK。如果你已经安装了 JDK，可以跳过本节内容。 安装 JDK jdk 版本推荐在 \"1.8.0_181\" 以上 访问 JDK 下载页面。 选择适合你操作系统的版本，并下载。 运行下载好的安装程序，并按照提示进行安装。 更加详细的步骤看此文档 如何安装 JDK（Java Development Kit） 配置 Emmy Lua 环境 安装完 JDK 后，如果没有设置 JDK 的环境变量则我们需要对 Emmy Lua 插件进行一些简单的配置。请按照以下步骤操作： 打开 VS Code。 点击左侧的扩展图标（或按下快捷键 Ctrl + Shift + X）。 在已安装的插件列表中找到 “Emmy Lua” 插件，并点击右侧的 “Extension Settings” 按钮。 在弹出的配置面板中，找到 “Emmy: Java Home” 选项，并填入 JDK 的安装路径。 **\"emmylua.java.home\": \"<你的路径>\" 注意，路径需要用 / 分割，而非 ** 在 Windows 上，默认安装路径为 C:/Program Files/Java/jdk{版本号}。 在 macOS 上，默认安装路径为 /Library/Java/JavaVirtualMachines/jdk{版本号}/Contents/Home。 配置完成后，关闭配置面板。 至此，我们已经成功安装了 VS Code 和 JDK，并配置了 Emmy Lua 环境，可以开始愉快地进行 Lua 开发了。"
  },
  "manual/lua/22.3.1 如何安装 JDK（Java Development Kit）.html": {
    "href": "manual/lua/22.3.1 如何安装 JDK（Java Development Kit）.html",
    "title": "1. 确定操作系统 | Panzer War Document",
    "keywords": "JDK（Java Development Kit）是 Java 开发工具包，它包含了运行 Java 应用程序所需的 Java 运行时环境（JRE），以及编译、调试和运行 Java 程序所需的各种工具。本文将为您介绍如何安装 JDK。 1. 确定操作系统 在安装 JDK 之前，请确定您正在使用的操作系统。JDK 支持多种操作系统，如 Windows、macOS、Linux 等。请根据您的操作系统选择相应的安装步骤。 2. 下载 JDK 访问 Oracle 官方网站的 JDK 下载页面：https://www.oracle.com/java/technologies/javase-jdk14-downloads.html（请注意，下载页面可能随着版本更新而发生变化） 在下载页面上，找到适用于您操作系统的 JDK 安装包。例如，如果您使用的是 Windows 操作系统，请选择 Windows x64 的安装包。 单击相应的安装包下载链接，然后根据提示登录 Oracle 账户。如果您尚未拥有 Oracle 账户，可以免费注册一个。 下载完成后，您将得到一个名为 jdk-版本号_操作系统_架构.bin（例如：jdk-14.0.2_windows-x64_bin.exe）的安装包。 3. 安装 JDK 3.1 Windows 双击下载的 JDK 安装包启动安装程序。 在安装过程中，您可以根据需要更改 JDK 的安装路径。默认情况下，JDK 会安装在 C:\\Program Files\\Java\\jdk-版本号 文件夹中。请记下您选择的安装路径，稍后将需要用到它。 单击 \"下一步\"，然后等待安装程序完成 JDK 的安装。 3.2 macOS 双击下载的 JDK 安装包（以 .dmg 结尾）启动安装程序。 在弹出的窗口中，双击 \"JDK 安装图标\"。 遵循安装程序的提示完成安装过程。 3.3 Linux 将下载的 JDK 安装包（以 .tar.gz 结尾）复制到您想要安装 JDK 的目录。 打开终端，进入该目录，然后运行以下命令解压安装包： tar -xvf jdk-版本号_linux-x64_bin.tar.gz 完成解压后，JDK 将安装在 jdk-版本号 文件夹中。请记下该文件夹的完整路径，稍后将需要用到它。 4. 配置环境变量 为了能够在命令行中全局使用 JDK 提供的工具，您需要配置环境变量。请根据您的操作系统进行相应的配置。 4.1 Windows 右键单击 \"计算机\" 或 \"此电脑\" 图标，然后选择 \"属性\"。 在 \"系统\" 窗口中，单击 \"高级系统设置\"。 在 \"系统属性\" 对话框中，切换到 \"高级\" 选项卡，然后单击 \"环境变量\" 按钮。 在 \"环境变量\" 对话框中，查找 \"系统变量\" 下的 \"Path\" 变量。选中 \"Path\" 变量，然后单击 \"编辑\" 按钮。 在 \"编辑环境变量\" 对话框中，单击 \"新建\"，然后将 JDK 安装路径下的 bin 文件夹添加到 \"Path\" 变量中。例如，如果您的 JDK 安装路径为 C:\\Program Files\\Java\\jdk-版本号，则应添加 C:\\Program Files\\Java\\jdk-版本号\\bin。 确认更改并关闭所有对话框。 4.2 macOS 打开 \"终端\"（在 \"应用程序\" > \"实用工具\" 文件夹中）。 使用文本编辑器（如 nano 或 vim）打开 ~/.bash_profile 文件。如果文件不存在，请创建一个新文件。例如，使用 nano 编辑器的命令为： bashCopy code nano ~/.bash_profile 在文件末尾添加以下行： bashCopy code export JAVA_HOME=$(/usr/libexec/java_home) export PATH=$JAVA_HOME/bin:$PATH 保存并关闭文件。 为了使更改生效，执行以下命令： bashCopy code source ~/.bash_profile 4.3 Linux 打开终端。 使用文本编辑器（如 nano 或 vim）打开 ~/.bashrc 文件。例如，使用 nano 编辑器的命令为： bashCopy code nano ~/.bashrc 在文件末尾添加以下行（请将 your_jdk_path 替换为实际的 JDK 安装路径）： bashCopy code export JAVA_HOME=your_jdk_path export PATH=$JAVA_HOME/bin:$PATH 保存并关闭文件。 为了使更改生效，执行以下命令： bashCopy code source ~/.bashrc 5. 验证安装 为了验证 JDK 是否已正确安装并配置环境变量，请执行以下步骤： 打开命令提示符（Windows）或终端（macOS 和 Linux）。 输入以下命令： Copy code java -version 如果显示 JDK 的版本信息，表示安装成功。例如，输出可能类似于： scssCopy code java version \"14.0.2\" Java(TM) SE Runtime Environment (build 14.0.2+12-46) Java HotSpot(TM) 64-Bit Server VM (build 14.0.2+12-46, mixed mode, sharing) 至此，您已经成功"
  },
  "manual/lua/22.4 如何使用 LuaBehaviorMono 组件.html": {
    "href": "manual/lua/22.4 如何使用 LuaBehaviorMono 组件.html",
    "title": "1. 简介 | Panzer War Document",
    "keywords": "这份文档是为小白用户编写的，旨在帮助您了解如何使用 LuaBehaviorMono 组件。在这里，我们不会涉及任何代码细节，而是从用户的角度解释组件的功能和用法。 1. 简介 LuaBehaviorMono 是一个 Unity 组件，它允许您将 Lua 脚本绑定到 Unity 游戏对象上。这样，您可以通过编写 Lua 脚本来实现游戏逻辑，而无需编写 C# 代码。这对于使用 Lua 作为脚本语言的游戏开发者来说非常有用。 2. 如何使用 LuaBehaviorMono 组件 要使用 LuaBehaviorMono 组件，您需要先将它添加到 Unity 游戏对象上。以下是使用组件的基本步骤： 2.1 添加组件 在 Unity 编辑器中，选择您想要添加 LuaBehaviorMono 组件的游戏对象。 在检查器面板中，点击 \"Add Component\" 按钮。 在搜索框中输入 \"LuaBehaviorMono\"，然后选择 \"LuaBehaviorMono\" 组件。 2.2 设置 Lua 行为脚本 在检查器面板中，找到 \"LuaBehaviorMono\" 组件。 将您的 Lua 行为脚本拖拽到 \"行为脚本 - Behavior\" 区域。 2.3 设置实例属性 在检查器面板中，找到 \"LuaBehaviorMono\" 组件。 在 \"实例属性 - Instance Property\" 区域，点击加号按钮添加新的实例属性。 为实例属性设置名称和值。 3. 注意事项 如果您想要访问其他游戏对象上的 LuaBehaviorMono 组件，可以使用 GetLuaComponent 方法。 若要访问 Unity 原生组件，可以使用 GetNativeComponent 方法。 通过以上步骤，您应该已经了解了如何使用 LuaBehaviorMono 组件。祝您在游戏开发过程中一切顺利！"
  },
  "manual/lua/22.5 Lua 课题.html": {
    "href": "manual/lua/22.5 Lua 课题.html",
    "title": "| Panzer War Document",
    "keywords": ""
  },
  "manual/lua/22.5.1 第一行代码 Hello World.html": {
    "href": "manual/lua/22.5.1 第一行代码 Hello World.html",
    "title": "| Panzer War Document",
    "keywords": "编写第一行 Lua 代码，输出 Hello World 核心代码： print(\"Hello World\") 效果：在游戏的日志窗口可看到对应输出 装甲纷争 lua 开发区第二节课 Hello World_单机游戏热门视频"
  },
  "manual/lua/22.5.2 属性 Property.html": {
    "href": "manual/lua/22.5.2 属性 Property.html",
    "title": "| Panzer War Document",
    "keywords": "装甲纷争 lua 课程 第三节 property 介绍 与 简单的写代码"
  },
  "manual/lua/22.5.3 回调 Callback.html": {
    "href": "manual/lua/22.5.3 回调 Callback.html",
    "title": "| Panzer War Document",
    "keywords": "Lua 中 self. 与 self: 的区别 Lua 回调函数与 self 视频去哪了呢？_哔哩哔哩_bilibili"
  },
  "manual/lua/22.5.4 场景功能：随机陨石.html": {
    "href": "manual/lua/22.5.4 场景功能：随机陨石.html",
    "title": "| Panzer War Document",
    "keywords": "编写如下脚本并保存为 RandomSpawn.lua 并放在工程目录下。 Behavior() Property = { prefab = { type = \"object\", value = nil } } local RandomSpawn = class(\"RandomSpawn\") local GameObject = CS.UnityEngine.GameObject local PerlinNoise = CS.UnityEngine.Mathf.PerlinNoise local Instantiate = CS.UnityEngine.Object.Instantiate local Vector3 = CS.UnityEngine.Vector3 local meteorAmount = 100 -- 生成的陨石数量 local fieldSize = 100 -- 生成陨石的场景大小 local noiseScale = 10 -- 噪点大小，调整以获得不同的效果 function RandomSpawn:OnStarted() for i = 1, meteorAmount do local x = math.random() * fieldSize local z = math.random() * fieldSize local y = PerlinNoise(x / noiseScale, z / noiseScale) * fieldSize local pos = Vector3(x, y, z) local newMeteor = Instantiate(self.prefab, pos, Quaternion.identity) newMeteor.name = \"Meteor_\" .. tostring(i) end end return RandomSpawn 给场景物体挂上 LuaBehaviorMono，行为脚本选择刚刚编写的 Lua 脚本，然后 Lua 引用属性中，关联上场景物体即可。 在场景内，随机生成了一系列的陨石。"
  },
  "manual/lua/22.5.5 自定义 Lua Buff.html": {
    "href": "manual/lua/22.5.5 自定义 Lua Buff.html",
    "title": "| Panzer War Document",
    "keywords": "--- 添加 Buff 测试 local TestAddBuff = class(\"TestAddBuff\") Common() -- 定义装填 Buff local ReloadBuff = class(\"ReloadBuff\") function ReloadBuff:GetBuffDisplayName() return \"Lua 减少装填时间 Buff\" end function ReloadBuff:ctor() self.IsMultipleCoff = false self.IsZeroBuff = false self.CoffValue = -0.5 self.ConstValue = 0 end function ReloadBuff:ApplyBuff(receiver) local ret, tank = BuffAPI.TryGetBuffReceiverAsTank(receiver) if ret then tank.vehicleComponents.mainTankFire.ReloadSpeedBuffedCoff:AddBuff(self._buffCaster) end print(\"add buff\") end function ReloadBuff:RemoveBuff(receiver, isInterrupt) local ret, tank = BuffAPI.TryGetBuffReceiverAsTank(receiver) if ret then tank.vehicleComponents.mainTankFire.ReloadSpeedBuffedCoff:RemoveBuff(self._buffCaster) end print(\"remove buff\") end function TestAddBuff:OnStarted() -- 将 Lua table 转为 C# 对象 local buffCaster = ConvertAPI.CovertToBuffCaster(ReloadBuff.new()) InputAPI.RegisterKeyInput(\"add buff\", \"F1\", function() BuffAPI.AddBuff(VehicleAPI.GetPlayerVehicle(), buffCaster) end, function() end) InputAPI.RegisterKeyInput(\"remove buff\", \"F2\", function() BuffAPI.RemoveBuff(VehicleAPI.GetPlayerVehicle(), buffCaster) end, function() end) end return TestAddBuff"
  },
  "manual/lua/22.6 Lua 知识库.html": {
    "href": "manual/lua/22.6 Lua 知识库.html",
    "title": "| Panzer War Document",
    "keywords": ""
  },
  "manual/release/周报 0730 版本模块化载具需求单.html": {
    "href": "manual/release/周报 0730 版本模块化载具需求单.html",
    "title": "| Panzer War Document",
    "keywords": "[ ] Type_4_Ke_Nu [ ] Type97_Chi_Ha [ ] Type_1_Chi_He [ ] Sturmtiger [ ] Strv-103 [ ] PanzerJager_I [ ] M10 [ ] M5A1_Stuart [ ] E79 [ ] Brummbar"
  },
  "manual/release/周报 2022_6_5.html": {
    "href": "manual/release/周报 2022_6_5.html",
    "title": "| Panzer War Document",
    "keywords": "更新日志 改善车库的装甲监视窗口，增加飞机的模块显示。 装甲厚度，模块显示更加清晰。 模块模式改为基于德马尔公式的穿深计算 修复 P-51 的起落架不显示"
  },
  "manual/release/周报 2023_1_14 决定版更新日志.html": {
    "href": "manual/release/周报 2023_1_14 决定版更新日志.html",
    "title": "| Panzer War Document",
    "keywords": "飞机增加贴图导出功能，可用于涂装的自定义。 血条车在加入战斗前，也显示确认窗口。 准镜增加了一些选项，让 Modder 实现一些全新功能。 修复队伍列表载具名称显示错误。队伍列表在打开时候，会在双方阵营发生载具变化时刷新。 修复 HEAT，ATGM 的自定义转正角度不生效。 游戏特效效果升级（热更新进游戏）。"
  },
  "manual/release/周报 2023_1_26 决定版更新日志.html": {
    "href": "manual/release/周报 2023_1_26 决定版更新日志.html",
    "title": "| Panzer War Document",
    "keywords": "非 PBR 载具的旧化效果得到了优化 增加了些内置可选的瞄具 联机版本 +1，老版本不能与新版本联机 增加举报系统 多人模式增加出生无敌8秒 客户端解压资源增加进度条 修复队伍列表有时候无法打开 修复人机部分坦克的悬挂高度错误 修复在 Android 7.x 上，部分设备无法正确解压模组包 修复回放模式下，DIY 地图的自动载具出生生成新坦克 修复音效导致内存占用过高，改进载具缩略图在内存中的占用 更新特效包至最新版本"
  },
  "manual/release/周报 2023_1_29 决定版更新日志.html": {
    "href": "manual/release/周报 2023_1_29 决定版更新日志.html",
    "title": "| Panzer War Document",
    "keywords": "游戏引擎升级 修复部分载具反光异常的情况 普通版载具全部整合进入版本 （一些相同的载具会在日后版本优化） 由于载具内部标识的变动，联机版本号 +1 （未来将不再出现本体载具被 Mod 载具覆盖的问题） 修复部分情况下车库缩略图显示错误 修复试车场载具有出生保护 修复部分情况下 DIY 载具导致游戏加载卡死 Game engine update from Unity 2021.3.9f1 -> Unity 2021.3.17f1 Fix bloom effect on some vehicles Merge all vehicles in to one pack for all versions Fix thumbnail in garage Fix spawn protection in play field Fix some loading issues"
  },
  "manual/release/周报 2023_1_29 普通版更新日志.html": {
    "href": "manual/release/周报 2023_1_29 普通版更新日志.html",
    "title": "| Panzer War Document",
    "keywords": "游戏引擎升级 多人模式增加出生保护，持续8秒。杜绝压家。 特殊载具属性重平衡，削弱 BTR90,BMP-2,提高MK6等级。增强59的最高移速。 修复在部分低版本 Android 上无法正常安装模组 提升部分载具的模型贴图质量 改善游戏运行性能 本次是强制更新，不更新无法进多人模式。 本次更新主要致力于解决近期多人模式的不平衡与压家问题"
  },
  "manual/release/周报 2023_1_8 决定版更新日志.html": {
    "href": "manual/release/周报 2023_1_8 决定版更新日志.html",
    "title": "| Panzer War Document",
    "keywords": "模组安装器桌面入口关闭，改为游戏登陆右侧，以及模组管理左下侧进入。 可创建桌面快捷入口。 ![E7VJB@35)KWWRVL]P}CY__Y.bmp](./images/20231024_1405185955.png) 增加后处理的画质选项，调低后处理可降低游戏对手机的性能压力，进一步提高游戏的帧数 ![B9KV(SEOE~WD)A55WYY]}7L.bmp](./images/20231024_1405187595.png) 修复多人模式载具被移除的异常问题。修复房主的飞机在模块模式下不受到伤害。 左右两侧的载具信息改为统一的队伍伤害面板，减少战斗时的画面遮挡。 修复开炮口位于地形下，建筑中，仍能对敌人造成伤害。 修复自定义车库被删除，游戏卡死。 修复首弹种不是初始单种情况下，开局首发装弹不是 0.5 秒的情况 ![9SY5Q@UYI~NK[{R`S_6%YE.bmp"
  },
  "manual/release/周报 2023_10_28.html": {
    "href": "manual/release/周报 2023_10_28.html",
    "title": "| Panzer War Document",
    "keywords": "更新日志： 游戏模式重做，增加占点模式，防御战 车库界面优化，模式选择界面优化 增加新坦克 T-14,Su-85,Su-100,Su-122 改善模块数量多载具的性能消耗 本次更新需要安装完整客户端，版本号：1.2.2-OBT 由于QQ群对于 apk 文件的限制，新客户端下载完后缀会变成 apk1 导致无法安装， 所以后续更新将放在迅雷网盘 游戏下载链接见： 链接：https://pan.xunlei.com/s/VN_MX2909CClmCri3eMNKHulA1 提取码：r96p 复制这段内容后打开手机迅雷App，查看更方便 关于下个阶段的游戏核心开发目标： 改善人机的逻辑 行业前沿新技术调研 大地图 与 占点模式结合 Game Update The new game mode capture zone mode and wave mode Garage and mode interface improvement Add new tank T-14,Su-85,Su-100,Su-122 Improve the performance of many tanks on battle ground The upcoming plan for next release is about Improve bot logics New features Huge open maps They will come in 2023 Dec 更新事故复盘 su 系列歼击车打包列表被还原，导致新车没有打进后续的热更中 对模式的改动较大，没有全面测试各种情况，导致 等级设置错误 or ban 了当前等级所有的人机载具导致模式直接卡死 新增的 get vehicle by guid 接口设计上存在缺陷，diy 载具可能存在重名的 guid ，导致加载进入游戏卡死 重新打包载具时候，部分载具的 hitbox 依然引用的是旧版本的 （可能是以前有修改没有提交到 git） 导致部分坦克模块丢失 对应的解决方案 已热更修复 已热更补救措施防止进入模式卡住，如果没有适合等级的人机，就返回全列表的； 后续版本：会增加一个 ui 提示当前等级没有可用的人机 整包更新修复 已热更修复 热更日志 修复su 系列歼击车不在客户端中 模式界面增加禁用载具的按钮，修复部分情况下模式卡住敌我不刷 修复部分载具的内构消失"
  },
  "manual/release/周报 2023_2_26.html": {
    "href": "manual/release/周报 2023_2_26.html",
    "title": "| Panzer War Document",
    "keywords": "更新日志 《憋一个大的》 本次为客户端大更新，所以需要下载整包！ 增加：坦克工坊增加对机甲的支持 优化：飞机的驾驶手感进行调整，优化调整武器配置及其数据，并对一些武备增加了专属的图标 平衡：飞机的基础装甲修改，机枪可以对飞机造成伤害，同时也调整了现代机的血量和等级并支持热成像功能 增加：飞机增加内构模块，武器设置模块化伤害数据，飞机可进入模块模式战斗 修复： 对部分机型的模型错误进行优化，Mi-24和AV-8B的起落架动画重置 增加： 所有有驾驶舱建模的飞机，对其挡风玻璃进行了透明处理 增加： 对螺旋桨飞机及直升机的旋翼做了高速旋转下的虚化效果 增加： 除去 Ju-87 和 HE-111 外，其他飞机制作了夜航灯效果 修复： SUV 在工坊配置配件后，可能无法操控的 Bug 修复： 第三人称时，准星在部分情况下不准 Steam 更新日志 （Week 2/26） 修复：VT 弹后效不生效 修复：在中，低强度的模块后效选项下，部分子弹的后效无法造成模块伤害 增加：后效碎片穿深以及内部模块装甲厚度的概念 改进：高爆弹，VT弹，航弹的爆炸检测机制优化，更容易对模块均匀造成伤害 增加：坦克工坊增加对机甲的支持 优化：飞机的驾驶手感进行调整，优化调整武器配置及其数据，并对一些武备增加了专属的图标 平衡：飞机的基础装甲修改，机枪可以对飞机造成伤害，同时也调整了现代机的血量和等级并支持热成像功能 增加：飞机增加内构模块，武器设置模块化伤害数据，飞机可进入模块模式战斗 修复： 对部分机型的模型错误进行优化，Mi-24和AV-8B的起落架动画重置 增加： 所有有驾驶舱建模的飞机，对其挡风玻璃进行了透明处理 增加： 对螺旋桨飞机及直升机的旋翼做了高速旋转下的虚化效果 增加： 除去 Ju-87 和 HE-111 外，其他飞机制作了夜航灯效果 修复： SUV 在工坊配置配件后，可能无法操控的 Bug 修复： 第三人称时，准星在部分情况下不准 Fix: VT bullet aftereffect does not take effect Fix: In the medium and low strength module aftereffect options, the aftereffect of some bullets cannot cause module damage Added: After Effect Fragment Penetration and Internal Module Armor Thickness concept Improvement: Optimized the explosion detection mechanism of high-explosive bombs, VT bombs, and aerial bombs, making it easier to evenly cause damage to modules Added: Added support for mechs in Tank Workshop Optimization: Adjust the driving feel of the aircraft, optimize the weapon configuration and its data, and add exclusive icons for some weapons Balance: The basic armor modification of the aircraft, the machine gun can cause damage to the aircraft, and also adjust the blood volume and level of the modern aircraft and support the thermal imaging function Addition: The aircraft adds internal modules, the weapon sets modular damage data, and the aircraft can enter the module mode to fight Fix: Optimize the model errors of some models, reset the landing gear animation of Mi-24 and AV-8B Added: All aircraft with cockpit modeling have transparent treatment for their windshields Added: Added a blur effect to the rotors of propeller planes and helicopters under high-speed rotation Added: Except for Ju-87 and HE-111, other aircraft have made night light effects Fix: The bug that the SUV may not be able to be operated after the accessories are configured in the workshop Fix: When in the third person, the crosshair is not accurate in some cases"
  },
  "manual/release/周报 2023_3_12.html": {
    "href": "manual/release/周报 2023_3_12.html",
    "title": "| Panzer War Document",
    "keywords": "客户端更新内容 装甲厚度增加抗穿，抗破区分。 需要 Modder 配置 内部模块增加抗碎片厚度。需要 Modder 配置 官方地图增加小地图 SUV 等载具增加自动刹车功能 修复履带显示涂装 遮罩 与 自定义贴图增加恢复默认功能 修复 HE 后效被附近尸体吸收 热更内容 调整M24，M60A2，萤火虫，KV-2，公羊，挑1，2 by gjc133 ZTZ96 模块化 by 7500K的灯 飞机相关参数调整 by 雪风 调整 bmp2 by erhddty Client update content: Increased armor thickness for increased penetration and damage resistance. Modder configuration is required. Increased internal module thickness for increased fragmentation resistance. Modder configuration is required. Added mini-map to official maps. Added automatic braking feature to SUV and other vehicles. Fixed track coating display. Added restore default function for masks and custom textures. Fixed HE aftereffect being absorbed by nearby corpses. Hotfix content: Adjusted M24, M60A2, Firefly, KV-2, Ram, T-26, T-28 by gjc133. Modularized ZTZ96 by 7500K's Lamp. Adjusted aircraft-related parameters by Xuefeng. Adjusted BMP2 by erhddty."
  },
  "manual/release/周报 2023_4_15.html": {
    "href": "manual/release/周报 2023_4_15.html",
    "title": "| Panzer War Document",
    "keywords": "本次更新为大型更新，需要下载完整客户端才能更新。 FPS 武器升级为 Fmod 音效，增加 Famas 突击步枪，改进Fov 修复 HE 模块化中部分情况下少计算装甲厚度 修复 部分坦克法线错误 飞机增加瞄准到目标才允许开火 修复飞机手机端按钮输入逻辑错误 修复部分情况下，切镜导致开火音效不播放 第三方内容更新： 本体所有坦克悬挂相关问题修复 by 宝马鸽"
  },
  "manual/release/周报 2023_4_16.html": {
    "href": "manual/release/周报 2023_4_16.html",
    "title": "| Panzer War Document",
    "keywords": "更新日志： 修复进入工坊后，退出后，工坊逻辑仍在运行 开启调试模式情况下，会显示 Lua 耗时 修复飞机使用 ATGM 飞行朝向与瞄准朝向存在偏差 更新补丁： 如果已安装旧版本的装甲纷争：决定版客户端，下载更新补丁版本即可 完整客户端：如果手机上未安装装甲纷争：决定版客户端，请下载完整客户端"
  },
  "manual/release/周报 2023_4_18.html": {
    "href": "manual/release/周报 2023_4_18.html",
    "title": "| Panzer War Document",
    "keywords": "更新日志： 修复关闭调试日志，也显示 Lua Profiler 窗口 修复 FPS 模式下视角错误，以及无法看到敌人 更新补丁： 如果已安装旧版本的装甲纷争：决定版客户端，下载更新补丁版本即可 完整客户端：如果手机上未安装装甲纷争：决定版客户端，请下载完整客户端"
  },
  "manual/release/周报 2023_4_2 决定版更新内容.html": {
    "href": "manual/release/周报 2023_4_2 决定版更新内容.html",
    "title": "| Panzer War Document",
    "keywords": "更新日志: 客户端更新： 本次更新为大型更新，需要下载完整客户端才能更新。 内部模块厚度增加等效厚度 地图工坊地形增加草地选项 基于 Lua 的脚本系统重构，可以更加方便的定制游戏玩法，安装 lua 的 mod 与普通 mod 方法一致。编写 lua 请看 ：https://www.yuque.com/chaojiduolajiang/panzerwar/bpig0t 工坊增加按分类搜索 坦克工坊可编辑模块模式下的炮塔转速 修复车库装甲监视显示的入射角与实际存在偏差 第一方内容更新： DIY 地图增加日系风格组合 春季地形增加草地显示 第三方内容更新： 载具数值平衡，模块化优化等海量内容。 由 7500K的灯， gjc133 ， Zero， erhddty ，开坦克的雪风酱 共同完成"
  },
  "manual/release/周报 2023_4_3.html": {
    "href": "manual/release/周报 2023_4_3.html",
    "title": "| Panzer War Document",
    "keywords": "客户端更新： 本次更新为大型更新，需要下载完整客户端才能更新。 联机版本号 +1，防止其他客户端使用旧数据进行多人联机 Lua 增加更多 API 修复工坊的一些问题 包体结构优化，减少包体大小 第三方内容更新： T-72.T-64BM,T-80,M1A1,C1-Ariete,Leopard2A7,Challenger1,Challenger2,ZTZ-96机动修改及修改部分炮塔与履带数据 by 7500K的灯 'IS-1和KV-1ZIS-5模块化及数据调整 by erhddty"
  },
  "manual/release/周报 2023_5_11.html": {
    "href": "manual/release/周报 2023_5_11.html",
    "title": "| Panzer War Document",
    "keywords": "对以下内置载具进行了模块化： M2\"轻型\"，M8猎犬，瓦伦丁III型，三式中战，M60A2\"星际战舰\"，BTR-90，BMP-2，BMD-1，IS-3 优化了特效包性能 增加了一个新的模组下载源 联机版本号 +1，无法与之前版本进行联机，最近由于在推进模块化，联机版本号会经常变动，及时更新游戏 已知 Bug，不能在手机端开启 HDR，否则，会导致渲染错误。 The following vehicle is modulized M2 Light,M8,Valentien III, ChiNu, M60A2,BTR-90,BMP-2,BMD-1,IS-3 The VFX pack is optimized Add new mod download source"
  },
  "manual/release/周报 2023_5_14.html": {
    "href": "manual/release/周报 2023_5_14.html",
    "title": "| Panzer War Document",
    "keywords": "更新日志： 增加车库的后效回放预览功能 更新补丁： 如果已安装旧版本的装甲纷争：决定版客户端，下载更新补丁版本即可 完整客户端：如果手机上未安装装甲纷争：决定版客户端，请下载完整客户端"
  },
  "manual/release/周报 2023_5_3 更新日志.html": {
    "href": "manual/release/周报 2023_5_3 更新日志.html",
    "title": "| Panzer War Document",
    "keywords": "手机版增加对一些带按键输入控制功能的载具的界面支持 增加对特效相关的 Fmod 支持"
  },
  "manual/release/周报 2023_5_7 更新日志.html": {
    "href": "manual/release/周报 2023_5_7 更新日志.html",
    "title": "| Panzer War Document",
    "keywords": "版本代号：背水一战。 增加模块化机制，对以下载具完成了模块化：BT-7，三号E，sdkfz6/2，kv-1(zis-5)，t-34-85，is-1，t-44-100，虎式E，豹式D，酋长MK6。其他载具会在后续更新中完成模块化，模组下载器内大部分载具已完成模块化。 增加对 Mod.io 的支持 增加内置特效包的选项 购买过决定版的用户，登陆账号后将不播放广告，以及获得模组收益解锁，以及 XM-8 的使用权 Add module damage system and modulize the following vehicles: BT-7,PZ-III,SDKFZ6/2,KV-1,T-34-85,IS-1,T-44-100,Tiger E,Panther D, MK6. Other vehicle will be modulized in the future updates. Add mod.io support Add internal vfx pack"
  },
  "manual/release/周报 5_15.html": {
    "href": "manual/release/周报 5_15.html",
    "title": "| Panzer War Document",
    "keywords": "增加装甲，后效回放系统 以下载具模块化： 野牛-1,黄蜂，地狱猫，M7\"牧师\",ISU-152,T-10,59式\"D\"型 Add internal module replay system to armor inspector Modulize the following vehicles Sig-15,Wespe,Hellcat,M7 Persit,ISU-152,T-10,ZTZ-59"
  },
  "manual/release/周报 5.21.html": {
    "href": "manual/release/周报 5.21.html",
    "title": "| Panzer War Document",
    "keywords": "新增载具 BTR 4E 模块化 部分载具进行模块化 丘吉尔-III,豹1\"A5\"型，2S19型自行榴弹炮，BTR-4E,T-90 改进装甲监视界面，区分模块类型颜色 Add new vehicle BTR 4E Modularized following vehicles Churchill III, Leopard 1 A5,2S19 Mista, BTR-4E,T-90 Improve the armor inspector windows and categorize module color"
  },
  "manual/release/周报 6.24 更新日志.html": {
    "href": "manual/release/周报 6.24 更新日志.html",
    "title": "| Panzer War Document",
    "keywords": "彻底弃用内置音效，修复部分情况下场景内多音效播放缺失，全面转为 FMod 音效。飞机引擎改为 FMod。 改进登陆界面背景。 重构画面设置，与操控界面。 增加受击屏幕动画； 伤害指示选项； 改进血条表现； 增加后效回放开关； 增加准星大小设置 提高游戏稳定性。 Fix the lack of multiple sound effects playback in some situations, and fully switch to FMod sound effects. The airplane engine has been changed to FMod. Improve the login screen background. Reconstruct the graphic settings and the control interface. a. Add hit screen animations; b. Damage indicator options; c. Improve health bar display; d. Add a post-effect replay switch; e. Add crosshair size settings Enhance game stability."
  },
  "manual/release/周报 6.26.html": {
    "href": "manual/release/周报 6.26.html",
    "title": "| Panzer War Document",
    "keywords": "增加天气系统质量选项，在高，与机制选项下，动态天气组件会有体积云 增加后处理选项（曝光，饱和度，对比度） 修复摇杆操控方式设置消失 修复部分情况下，设置界面的滑动条的值出现变化 增加是否显示 ATGM 红色三角的设置 图像设置界面增加性能负载条 更新补丁： 如果已安装旧版本的装甲纷争：决定版客户端，下载更新补丁版本即可 完整客户端：如果手机上未安装装甲纷争：决定版客户端，请下载完整客户端"
  },
  "manual/release/周报 6.27.html": {
    "href": "manual/release/周报 6.27.html",
    "title": "| Panzer War Document",
    "keywords": "彻底弃用内置音效，修复部分情况下场景内多音效播放缺失，全面转为 FMod 音效。飞机引擎改为 FMod。 改进登陆界面背景。 重构画面设置，与操控界面。 增加受击屏幕动画； 伤害指示选项； 改进血条表现； 增加后效回放开关； 增加准星大小设置 增加是否显示 ATGM 红色三角的设置 图像设置界面增加性能负载条 车库增加背景音乐。 提高游戏稳定性。 Fix some fmod bugs Add hit screen animation Add option for damage indicator Improve the hp bar Add option for module replay Add option for cross hair size Add option for atgm icon Add graphic performance stress bar Improve game stability"
  },
  "manual/release/周报 6.5 普通版.html": {
    "href": "manual/release/周报 6.5 普通版.html",
    "title": "| Panzer War Document",
    "keywords": "改善车库的装甲监视窗口，增加飞机的模块显示。 装甲厚度，模块显示更加清晰。 模块模式改为基于德马尔公式的穿深计算 增加新飞机 P-51 决定版手游玩家登陆账号后，可使用 M1X Improve the garage armor insepctor window Demerra equation is introduced for module-mode penetration Add new vehicle P-51,M1X,Churchill GC"
  },
  "manual/release/周报 7.23.html": {
    "href": "manual/release/周报 7.23.html",
    "title": "| Panzer War Document",
    "keywords": "多人模式模组支持 20个 多人模式对战人数支持设置 2-30个 修复多人模式使用范围伤害弹种导致敌人隐身 增加不同弹头的转正，跳弹概率细分 增加 tnt 当量对穿深的影响"
  },
  "manual/release/周报 7.30.html": {
    "href": "manual/release/周报 7.30.html",
    "title": "| Panzer War Document",
    "keywords": "更新日志： 增加结算界面，显示本局的伤害，收益与展示自己的载具 修复 HEAT 等弹头的后效角度错误 修复 VT 弹种类型显示错误 **更新补丁： 如果已安装旧版本的装甲纷争：决定版客户端，下载更新补丁版本即可 完整客户端：如果手机上未安装装甲纷争：决定版客户端，请下载完整客户端 ** 已知问题： 飞机在结算界面无转弯，会在后续版本修复"
  },
  "manual/release/周报 7.31.html": {
    "href": "manual/release/周报 7.31.html",
    "title": "| Panzer War Document",
    "keywords": "更新日志： 修复结算界面飞机无待机盘旋动画 修复飞机开火音效丢失 Fmod 允许的同时播放的音效数量提升 （音源多的时候，可能会造成设备帧率降低） **更新补丁： 如果已安装旧版本的装甲纷争：决定版客户端，下载更新补丁版本即可 完整客户端：如果手机上未安装装甲纷争：决定版客户端，请下载完整客户端 ** 值得注意的是，哆啦只是不在国内社交平台继续发言而已，游戏还是正常更新的。游戏过程中遇到 Bug，请开启调试日志，截取最新的几条报错，并点开截图详细堆栈信息。然后发送到 dev@waroftanks.cn 邮箱。 Panzer War Mod agreement has been revised. From 2023/8/1, all newly-made Mods have the official right to be included in the game's built-in Mod Downloader and shared with all players (that is, any Newly made mods should be public and free mods). It is forbidden to distribute Mods on the grounds of payment, and it is forbidden to customize Mods that can be used in a small range. Any mod (module) development author who violates this agreement will have his mod revoked."
  },
  "manual/release/周报 7.8.html": {
    "href": "manual/release/周报 7.8.html",
    "title": "| Panzer War Document",
    "keywords": "Add auto repair which can repair module from damaged to middle damaged. Default time is 5 sec and can adjust in setting. Add manual repair which can fully repair damaged module Add crew substitute system that a crew can help a killed crew to operate tank. Add game mode settings Add mod installation panel Add support for plane in module mod Add hybrid game mode Optimize controls and game 更新日志 本次更新包含对游戏的较大的修改，可能存在 Bug。 坦克模块在被击毁后，可自动修复到黄色，默认修复时间为 5秒。可以在游戏模式的设置中进行调整。 新增修理点数，默认为3个点数，点数恢复为 60秒。可将模块从红修到白。 增加成员替补逻辑，默认会在成员被击杀后，使用最近的成员进行替补。 蓝色的成员表示被替补与处于替补状态中的成员。处于此状态的成员，其效率为原先的 75%。若想手动选择哪些被击杀的成员需要替补，可以关闭设置中的自动替补选项。 设置界面增加游戏模式的选项，此选项在多人模式时候，会以房主的设置为准。 增加未成功安装的模组的分析界面，帮助你了解哪些模组因为某原因未能正常加载，以及新安装的模组的提示界面。 飞机增加对模块模式的支持。 增加血条模块混合模式，此模式下，依然由血条判断是否击杀，但是模块的损坏会导致坦克的性能降低。 操作界面增加透明度的设置。 击杀伤害信息，增加屏幕下方的展示。 Bot 人机逻辑修改，目前只有 轮式与 LT 会与你发生近战。 优化扣血 UI 的血条表现。 小地图增加是否可以开启的选项。 增加载具加载时候的遮罩 增加瞄准按下抬起方式的选项 修复多人模式下 HP 同步错误 **更新补丁： 如果已安装旧版本的装甲纷争：决定版客户端，下载更新补丁版本即可 完整客户端：如果手机上未安装装甲纷争：决定版客户端，请下载完整客户端 ** 游戏更新地址： 链接：https://pan.xunlei.com/s/VNZnUDXku55CWhVQkjCt7cSPA1?pwd=e3mg# 复制这段内容后打开手机迅雷App，查看更方便 修复多人模式后效回放不显示 更新补丁： 如果已安装旧版本的装甲纷争：决定版客户端，下载更新补丁版本即可 完整客户端：如果手机上未安装装甲纷争：决定版客户端，请下载完整客户端"
  },
  "manual/release/周报 8.1.html": {
    "href": "manual/release/周报 8.1.html",
    "title": "| Panzer War Document",
    "keywords": "更新日志： 修复多人模式模块化模式下，后效不生效问题。 （由于最近优化多人模式性能导致把房主端的伤害检测模型也给关了....） 修复部分情况下 ，DIY 存档损坏导致工坊无法正常加载 新增步战车 04A **更新补丁： 如果已安装旧版本的装甲纷争：决定版客户端，下载更新补丁版本即可 完整客户端：如果手机上未安装装甲纷争：决定版客户端，请下载完整客户端 ** 值得注意的是，最近存在恶意截图，造谣游戏停更的玩家，请提防此谣言，游戏还是正常更新的。游戏过程中遇到 Bug，请开启调试日志，截取最新的几条报错，并点开截图详细堆栈信息。然后发送到 dev@waroftanks.cn 邮箱。"
  },
  "manual/release/周报 8.6.html": {
    "href": "manual/release/周报 8.6.html",
    "title": "| Panzer War Document",
    "keywords": "改善游戏在中端机 （以红米 12C 为基准设备）的渲染性能，无法保证低于此基准设备硬件的设备，能够有性能提升。 修复部分设备在加载过程中出现花屏闪烁 修复结算界面的显示上一个载具的履带，飞机错误 UI 修复击穿概率与实际炮弹表现不同 降低多人模式的性能要求 增加热成像 Improve the game performance on middle level hardwares Fix flower screen during playing Add new battle reward scene Fix penetration problems and add ricochet prob Add thermal vision Add 04A tank"
  },
  "manual/release/周报 8.7.html": {
    "href": "manual/release/周报 8.7.html",
    "title": "| Panzer War Document",
    "keywords": "亲们，俄罗斯原神之中国分部更新了！ 装甲纷争 2023.8.7.1 更新日志： 主要针对最近引入的跳弹概率与转正机制的一个修复，修复了在转正和跳弹中的装甲口径比效果与实际相反。之前版本出现了口径越大，跳弹概率越高的 bug ... 在本次更新中进行了修复，并且在查看弹药的界面增加了口径装甲厚度比的滑动条。方便各位查看不同弹头的差异化特性。"
  },
  "manual/release/周报 8.8 决定版更新日志.html": {
    "href": "manual/release/周报 8.8 决定版更新日志.html",
    "title": "| Panzer War Document",
    "keywords": "主要针对最近引入的跳弹概率与转正机制的一个修复，修复了在转正和跳弹中的装甲口径比效果与实际相反。之前 版本出现了口径越大，跳弹概率越高的 bug ... 在本次更新中进行了修复，并且在查看弹药的界面增加了口径装甲厚度比的滑动条。 增加了渲染距离的选项 增加了全局泛光开关的选项 优化了多人模块模式中的性能 **更新补丁： 如果已安装旧版本的装甲纷争：决定版客户端，下载更新补丁版本即可 完整客户端：如果手机上未安装装甲纷争：决定版客户端，请下载完整客户端 **"
  },
  "manual/release/周报 Google 海外 RC.html": {
    "href": "manual/release/周报 Google 海外 RC.html",
    "title": "| Panzer War Document",
    "keywords": "Added: Mech support in Tank Workshop, aircraft modular damage system, module mode combat. Optimized: Aircraft handling, weapon configs, armament icons. Balanced: Aircraft armor, machine gun damage to planes, modern aircraft health, thermal imaging. Fixed: Model errors (Mi-24, AV-8B), landing gear animation, glass transparency, propeller/rotor blur, night lights, SUV control bug. Improved: Armor thickness, internal module resistance, minimap, auto-brake, track skin display, default texture restoration, HE effect absorption. Big update, full client download required. Hinzugefügt: Mech-Unterstützung in der Panzerwerkstatt, modulares Schadenssystem für Flugzeuge, Modulmodus-Kampf. Optimiert: Flugzeughandling, Waffenkonfigurationen, Bewaffnungsicons. Ausgeglichen: Flugzeugpanzerung, Maschinengewehrschaden an Flugzeugen, moderne Flugzeuge Gesundheit, Wärmebildgebung. Behoben: Modellfehler (Mi-24, AV-8B), Fahrwerksanimation, Glasdurchsichtigkeit, Propeller-/Rotor-Unschärfe, Nachtlichter, SUV-Steuerungsfehler. Verbessert: Panzerungsdicke, Widerstand der internen Module, Minikarte, automatische Bremsen, Kettenhautanzeige, Standardtexturwiederherstellung, HE-Effektaufnahme. Großes Update, vollständiger Client-Download erforderlich. 追加：タンクワークショップでのメカ対応、航空機のモジュラー損傷システム、モジュールモード戦闘。最適化：航空機の操作性、武器設定、兵器アイコン。バランス調整：航空機の装甲、航空機への機関銃ダメージ、現代航空機の耐久性、サーマルイメージング。修正：Mi-24およびAV-8Bのモデルエラー、着陸装置アニメーション、ガラスの透明性、プロペラ/ローターのぼかし効果、夜間照明、SUV制御バグ。改善：装甲厚さ、内部モジュールの耐久性、ミニマップ、自動ブレーキ、トラックスキン表示、デフォルトテクスチャの復元、HE効果吸収。大規模なアップデート、完全なクライアントのダウンロードが必要です。 Добавлено: поддержка мехов в Tank Workshop, модульная система повреждений самолетов, боевой режим модуля. Оптимизировано: управление самолетами, конфигурации оружия, значки вооружения. Баланс: броня самолетов, урон пулеметов по самолетам, здоровье современных самолетов, тепловизор. Исправлено: ошибки моделей Mi-24, AV-8B, анимация шасси, прозрачность стекла, размытие пропеллеров/роторов, ночные огни, управление внедорожником. Улучшено: толщина брони, сопротивление внутренних модулей, миникарта, автоматическое торможение, отображение скинов гусениц, восстановление текстур по умолчанию, поглощение эффекта HE. Большое обновление, требуется полная загрузка клиента. เพิ่ม: การสนับสนุนเมคใน Tank Workshop, ระบบความเสียหายแบบโมดูลของเครื่องบิน, การต่อสู้แบบโมดูล ปรับปรุง: ควบคุมเครื่องบิน, การตั้งค่าอาวุธ, ไอคอนอาวุธ สมดุล: บางส่วนของเครื่องบิน, ปืนกลทำลายเครื่องบิน, สุขภาพเครื่องบินรุ่นใหม่, ภาพความร้อน แก้ไข: ข้อผิดพลาดรุ่น Mi-24, AV-8B, แอนิเมชันขาเชิงเครื่อง, ความโปร่งใสของกระจก, เอฟเฟ็กต์เบลอของโพรเพลอ/โรเตอร์, ไฟกลางคืน, ปัญหาการควบคุมรถ SUV ปรับปรุง: ความหนาของเกราะ, ความต้านทานของโมดูลภายใน, แผนที่ขนาดเล็ก, เบรกอัตโนมัติ, การแสดงผิวรางวัล, การกู้คืนตัวอย่างเสื้อผ้า, การดูดซับเอฟเฟ็กต์ HE อัปเดตขนาดใหญ่, ต้องดาวน์โหลดไคลเอนต์เต็มรูปแบบ Додано: підтримка мехів у Tank Workshop, модульна система пошкоджень літаків, бойовий режим модуля. Оптимізовано: управління літаками, конфігурації зброї, іконки озброєння. Баланс: броня літаків, пошкодження кулеметів по літакам, здоров'я сучасних літаків, тепловізійні зображення. Виправлено: помилки моделей Mi-24, AV-8B, анімація шасі, прозорість скла, розмиття пропелерів/роторів, нічні вогні, управління позашляховиком. Покращено: товщина броні, опір внутрішніх модулів, мінікарта, автоматичне гальмування, відображення текстур гусениць, відновлення текстур за замовчуванням, поглинання ефекту HE. Велике оновлення, потрібне повне завантаження клієнта. 新增：坦克工坊支持機甲，飛機模組化傷害系統，模組模式戰鬥。優化：飛機操控，武器配置，武器圖標。平衡：飛機裝甲，機槍對飛機造成傷害，現代飛機生命值，熱成像功能。修復：Mi-24和AV-8B的模型錯誤，起落架動畫，擋風玻璃透明度，螺旋槳/旋翼模糊效果，夜間燈光，SUV操作問題。改進：裝甲厚度，內部模塊抗性，小地圖，自動剎車，履帶顯示，恢復默認材質，HE效果吸收。此次更新為大型更新，需要下載完整客戶端才能更新。 Added: Mech support in Tank Workshop, aircraft modular damage system, module mode combat. Optimized: Aircraft handling, weapon configs, armament icons. Balanced: Aircraft armor, machine gun damage to planes, modern aircraft health, thermal imaging. Fixed: Model errors (Mi-24, AV-8B), landing gear animation, glass transparency, propeller/rotor blur, night lights, SUV control bug. Improved: Armor thickness, internal module resistance, minimap, auto-brake, track skin display, Hinzugefügt: Mech-Unterstützung in der Panzerwerkstatt, modulares Schadenssystem für Flugzeuge, Modulmodus-Kampf. Optimiert: Flugzeughandling, Waffenkonfigurationen, Bewaffnungsicons. Ausgeglichen: Flugzeugpanzerung, Maschinengewehrschaden an Flugzeugen, moderne Flugzeuge Gesundheit, Wärmebildgebung. Behoben: Modellfehler (Mi-24, AV-8B), Fahrwerksanimation, Glasdurchsichtigkeit, Propeller-/Rotor-Unschärfe, Nachtlichter 追加：タンクワークショップでのメカ対応、航空機のモジュラー損傷システム、モジュールモード戦闘。最適化：航空機の操作性、武器設定、兵器アイコン。バランス調整：航空機の装甲、航空機への機関銃ダメージ、現代航空機の耐久性、サーマルイメージング。修正：Mi-24およびAV-8Bのモデルエラー、着陸装置アニメーション、ガラスの透明性、プロペラ/ローターのぼかし効果、夜間照明、SUV制御バグ。 Добавлено: поддержка мехов в Tank Workshop, модульная система повреждений самолетов, боевой режим модуля. Оптимизировано: управление самолетами, конфигурации оружия, значки вооружения. Баланс: броня самолетов, урон пулеметов по самолетам, здоровье современных самолетов, тепловизор. Исправлено: ошибки моделей Mi-24, AV-8B, анимация шасси, прозрачность стекла, размытие пропеллеров/роторов, ночные огни, управление внедорожником. เพิ่ม: การสนับสนุนเมคใน Tank Workshop, ระบบความเสียหายแบบโมดูลของเครื่องบิน, การต่อสู้แบบโมดูล ปรับปรุง: ควบคุมเครื่องบิน, การตั้งค่าอาวุธ, ไอคอนอาวุธ สมดุล: บางส่วนของเครื่องบิน, ปืนกลทำลายเครื่องบิน, สุขภาพเครื่องบินรุ่นใหม่, ภาพความร้อน แก้ไข: ข้อผิดพลาดรุ่น Mi-24, AV-8B, แอนิเมชันขาเชิงเครื่อง, ความโปร่งใสของกระจก, เอฟเฟ็กต์เบลอของโพรเพลอ/โรเตอร์, ไฟกลางคืน, ปัญหาการควบคุมรถ SUV ปรับปรุง: ความหนาของเกราะ, ความต้านทานของโมดูลภายใน, แผนที่ขนาดเล็ก, เบรกอัตโนมัติ, การแสดงผิวรางวัล Додано: підтримка мехів у Tank Workshop, модульна система пошкоджень літаків, бойовий режим модуля. Оптимізовано: управління літаками, конфігурації зброї, іконки озброєння. Баланс: броня літаків, пошкодження кулеметів по літакам, здоров'я сучасних літаків, тепловізійні зображення. Виправлено: помилки моделей Mi-24, AV-8B, анімація шасі, прозорість скла, розмиття пропелерів/роторів, нічні вогні, управління позашляховиком. 新增：坦克工坊支持機甲，飛機模組化傷害系統，模組模式戰鬥。優化：飛機操控，武器配置，武器圖標。平衡：飛機裝甲，機槍對飛機造成傷害，現代飛機生命值，熱成像功能。修復：Mi-24和AV-8B的模型錯誤，起落架動畫，擋風玻璃透明度，螺旋槳/旋翼模糊效果，夜間燈光，SUV操作問題。改進：裝甲厚度，內部模塊抗性，小地圖，自動剎車，履帶顯示，恢復默認材質，HE效果吸收。"
  },
  "manual/tutorial/0-1. 模组工具升级日志.html": {
    "href": "manual/tutorial/0-1. 模组工具升级日志.html",
    "title": "0-1. 模组工具升级日志 | Panzer War Document",
    "keywords": "0-1. 模组工具升级日志 2022/11/30 对项目结构进行了巨大变动，需要根据此文档，对工程进行升级 New Project Migration 新工程迁移 老工程如果要升级 Mod 相关工具，则需要覆盖如下目录 ** MiddleLibLayer** 否则可能会出现意想不到的报错，导致无法正常编译打包。如果无法打包，则点击 Console，将报错堆栈信息发送给开发者。 若存在报错，可考虑整个工程进行覆盖。 You can download files from GitHub if you are not in China. Releases · Doreamonsky/Panzer-War-Lit-Mod alternatively you can download files from npm within package manager 4. 模组工具 NPM 版 更新日志 2023.7.23 修复斜穿公式计算错误 20230723231451-UnityProject.zip 2023.7.18 增加固定穿深的弹头材质，ExplosionWarheadMaterial 细化不同弹种的弹头信息 20230719002036-UnityProject.zip 2023.7.8 弹头材质增加斜穿参数 - Penetration Vs Angle Coff 模块与多炮塔的绑定改为配件 GUID，在 VehicleTextData 上，会根据多炮塔数据自动生成一系列 GUID，在模块上填写对应的 GUID，则内部模块的 debuff 会与对应炮塔进行自动关联 VehicleInfo 中的多年代改成了数组，只要点击一下 VehicleInfo 数据，对应老数据会迁移到新的数组下 20230709145941-UnityProject.zip 2023.6.24 20230624201402-UnityProject.zip 增加飞机 Fmod 工程 2023.4.19 (1.0.10) 20230419234758-UnityProject.zip 修复炮塔带缩放情况下， FFPoint 等节点出现位置偏差 修复 Lua 断点无法识别文件名， 需要把已导入 Unity 的 lua 脚本选中，然后右键 Reimport 一下 2023.4.17 (1.0.8) 20230417220449-UnityProject.zip 修复了 Lua Property 字段部分情况下解析异常 修复了 Common 类型 Lua 脚本 OnStarted 未调用 增加了一个 Common 类型 Lua 脚本 FollowCameraTutorial ，轮播局内载具，再战斗中按 F1 生效 2023.4.16 (1.0.7) 20230416161844-UnityProject.zip 修复了编辑器布局错误 增加了校验工具，检查是否项目存在损坏资源 ![7_F((_9~SUK)OOTVW@Y(%]S.png](./images/20231024_1405198626.png) 目前支持：载具的 LOD 是否丢失，VehicleHitBox 是否丢失 修复 Vehicle Data Editor 重开编辑器后的一些问题 2023.4.15 (1.0.5) 20230415211612-UnityProject.zip 修复了位于 Turret 下的副炮打包时候报错，此 bug 只存在周二以后的编辑器工具中 2023.4.14 (1.0.4) 20230414000710-UnityProject.zip 增加飞机瞄准到目标才允许开火选项 2023.4.12 20230411235459-UnityProject.zip 新增 fmod 音效调试工具 5. Fmod 音效调试工具 飞机炮塔增加是否默认套父物体纠正轴向 2023.4.9 20230409225807-UnityProject.zip 试车场增加对 FPS 武器的支持 试车场增加障碍物 增加 Lua Profiler，用于自己写的 lua 脚本的性能监控。 需要注意耗时在 0.1ms 以上的脚本是否每帧在调用 Lua Profiler 性能监控 2023.4.6 20230406221703-UnityProject.zip 付费mod 打包时候强制检查是否填写了模组包 id 修复炮弹页面文字乱码 修复生成 ui 的 lua 绑定代码错误 2023.4.5 20230405231555-UnityProject.zip 同步更新 API 2023.3.27 20230327002117-UnityProject.zip 修复部分lua 面板没显示 同步 Property 的按钮 瞄具图片与文本支持挂 lua 脚本 2023.3.26 20230326025041-UnityProject.zip 编辑器内试车场增加一键更新数据按钮 Project Setting 窗口增加是否启用优先读取编辑器的本地资源选项 DIY 增加 Lua Behavior 配置 DIY 数据，Text Data 数据，现在都支持从编辑器直接读取，无需重新打包，即可让新数据生效 PropValue类 支持从 Lua 监听事件 self.OnTotalDamageChanged = function(oldVal, newVal) print(tostring(oldVal) .. \" -> \" .. tostring(newVal)) end self.vehicle.basePlayerState.totalDamage:OnValueChanged(\"+\", self.OnTotalDamageChanged) 增加 LuaCommonInstanceData 类，用于做通用脚本 （如多炮塔的 gui 那种） 2023.3.23 20230323014132-UnityProject.zip Lua 编写的载具脚本，可以在不重新打包载具的情况下，优先读取编辑器内已修改的版本 可在载具配置数据上直接挂 Lua 脚本，方便统一管理 载具 Pack 时候，强制检查是否有命名为 MainBody 物体，避免运行时报错 API 文档增加了 PlayerState 相关的说明文档 2023.3.21 20230321001015-UnityProject.zip 增加 Lua 模式的调试场景** ModePlayground.unity** 路径：Packages/com.shanghaiwindy.middlelayer/Tools/RuntimeDebugger/ModePlayground.unity 编辑器内的载具调试工具改名为 VehiclePlayground.unity 路径： Packages/com.shanghaiwindy.middlelayer/Tools/RuntimeDebugger/VehiclePlayground.unity 新增 TeamAPI 方便获取敌我队伍 2023.3.20 20230320000548-UnityProject.zip Lua 侧大改动，全新教程文档 22. Lua 开发 2023.3.15 20230315010900-UnityProject.zip FmodPlayComponent 组件公开，使用文档见： FmodPlayComponent使用说明 增加接口，参考文档。xlua 需要加上 CS.类名 才能正常访问此方法。 如 CS.ShanghaiWindy.Core.API.VehicleAPI Class VehicleAPI 2023.3.14 20230314012421-UnityProject.zip DIY Holder 增加更新 Extra Info 的按钮 Lua 脚本示例放在 MiddleLibLayer\\LuaComponents 文件夹下，默认的 Template-Vehicle 已使用此示例脚本 复制载具数据增加面板自定义复制后的载具 Asset Name 模组包页面提示不要使用默认的名称 2023.3.13 20230313001750-UnityProject.zip ![QU$Q9LVA(I7[MSLVFHP~DJ.png 增加对 Lua 组件的支持 （XLuaComponent），在 UnityProject 的中，给 Template Vehicle 增加了一个示例的旋转代码 Vehicle Data 界面可点击查看生成的预制体 2023.3.6 20230306221606-UnityProject.zip 修复部分情况下，会出现多个 HitBox 编辑窗口 付费模组的 uuid 增加长度校验，防止输错 uuid，导致付费模组无法加载 优化部分界面的显示 2023.3.5 20230305000035-UnityProject.zip 修复部分飞机在打包后游戏不加载，需要重打 BuildPipline 修复编辑模块装甲的界面的厚度显示与实际不一致 2023.3.2 20230302223337-UnityProject.zip 修复的 LOD 生成的缓存文件未清除过期 Mesh 修复了部分情况点击载具的 Pack，跳转到 LOD 的数据 2023.3.1 20230228232907-UnityProject.zip 修复飞机编辑器的炮塔路径错误 修复弹药编辑器一些中文显示错误 HitBox 增加抗破的厚度设置 （游戏内暂时还未生效，等后续版本支持） 2023.2.23 20230223225321-UnityProject.zip 修复弹药架按名字倒序排序 拆解 DIY 时，自动创建共享数据，用于同步两侧数据 2023.2.22 20230222232718-UnityProject.zip 弹药架按名字排序 生成 lod 时候，根据原始物体的layer赋值 2023.2.21 20230221235022-UnityProject.zip 修复了弹药架排序错误的报错 2023.2.18 20230218230027-UnityProject.zip 改进 Vehicle Data 与 Vehicle HitBox 的编辑模式，防止部分情况下 Inspector 失去聚焦的情况下，无法编辑。 2023.2.15 20230215000439-UnityProject.zip 修复去除模组加密勾选项，仍生成带加密信息的模组包 飞机增加一些空引用的判断 修复 DIY 地图导入，地形材质丢失 优化与汉化部分报错信息的显示 2023.2.12 20230212192604-UnityProject.zip 增加 PrefabPackerGroup，可以批量对 坦克，飞机 ，DIY 生成的预制体进行重新生成 在打包流程增加选项，可在打包时候自动重新 Pack 坦克，飞机 ，DIY 增加 lua 的 mono 组件，可以挂载 lua 方法到 gameobject 上进行运行 2023.2.6 20230206225023-UnityProject.zip 增加对 il runtime 的 dll 的打包支持 增加编辑器工具的语言切换，可以仅显示中文，使界面更加清晰 2023.2.2 20230202003547-UnityProject.zip Asset Prop 增加清空引用的选项 飞机编辑器在 Pack 时，会提示哪个物体的引用错误 飞机编辑器增加提示 2023.1.28 常用资源转到共享目录，迁移文档见： 3. Shared Resources 共享资源文件夹 修复使用依赖打包的模组，在实时调试工具内无法正常加载依赖 20230128161856-UnityProject.zip 2023.1.26 载具缩略图改为 Streaming 载具调试工具增加设置界面，资源升到最新 坦克，飞机，DIY Pack 时候，会强制 HitBox 与 模块模型的 R/W 勾上 （未勾上，会导致非等比缩放时，游戏内报 Collision Mesh Data 的错误） DIY 坦克增加 Engine Smoke 数组 20230126143440-UnityProject.zip 2023.1.15 修复了 pack 载具后，再编辑载具会导致 lod 丢失。 同时，编辑载具的速度得到了优化！ 优化了载具的打包速度，以及减小了载具的打包包体大小 20230115203407-UnityProject.zip 2023.1.11 准镜增加图片自定义，准镜增加文字覆盖，文字颜色 DIY 生成 Prefab 的检查删去对旧音效的判空逻辑 20230110234950-UnityProject.zip 2022.1.2 20230102214045-UnityProject.zip 修复一些 Bug 2022.12.18 20221218230119-UnityProject.zip 修复无法对坦克资源进行 Pack Assets 针对轮式载具轮子自动创建 Wrapper，防止因为建模软件的错误轴向导致旋转错误 增加资产导出 Unity Package 的快捷方式，方便反馈问题给开发者。详情见： 27. Send Mod to Devs for Debugging 发送至模组开发者查问题 2022.12.17 20221217013655-UnityProject.zip 增加发布渠道 modpack，mod.io 与 steam 创意工坊 增加创意工坊上传工具包 （工程需要手动添加 package，与 middle layer 添加方式一致） 优化打包勾选依赖情况下的资源依赖 2022.12.14 20221214002534-UnityProject.zip 增加 dds 转 png 自动化流程 2022.12.1 20221201002002-UnityProject.zip DIY 资源引用改为 GUID 引用，且兼容旧版本 ![C7DKBNM}C9MWP{UJ{R6D25.png 2022.11.30 20221130003750-UnityProject.zip Fmod 结构修改 工程结构巨大变动，升级指南见：New Project Migration 新工程迁移 2022.11.27 20221127212849-UnityProject.zip 增加 Fmod 的 Mod 功能支持 2022.11.22 20221123001637-UnityProject.zip 配置数据快速创建与搜索功能 预制自定义贴图，将贴图文件解压到指定目录 预设的 Fmod 音频事件，目前内置了一些坦克的音效。可直接配置在坦克上。 位于：Assets/Res/Vehicles/Data/FMod VehicleTextData 增加额外额外的引擎烟雾的配置点 增加自爆功能，可在 VehicleTextData 配置，或者新增自爆组件 2022.11.6 20221106235336-UnityProject.zip 针对开启加载依赖资源的 BuildPipline，增加了依赖的可视化日志。可通过 log 的搜索，检查资源的冗余。 2022.11.1 20221101000414-UnityProject.zip 支持发射组 支持随主炮，副炮按钮一起开火 简单多炮塔的开火配置增加 Dym 2022.10.30 20221030183719-UnityProject.zip DIY 载具相关组件生成预制体时，将对应生成自动的 LOD。对于已创建的预制体，需要点击重新生成预制体，才可以使 LOD 生效 增加 DIY 载具文件选取的工具，用于批量选择 DIY 载具 选中多个同类型的 DIY 载具配置时，会显示批量操作 正式加入 DIY 的拖挂 2022.10.25 20221025233509-UnityProject.zip 增加 DIY 存档导入为 DIY 载具配置的功能，方便 Mod 开发者在提供配件 Mod 的同时，提供一个预设载具。 增加拖挂的预览 DIY 组件 增加 SRP 材质兼容组件，用于做特效中的模型材质 2022.10.22 20221022014918-UnityProject.zip 修复创建新载具时候，部分情况下载具的名称未写入本地 2022.10.20 20221020154821-UnityProject.zip 修复部分窗口无法展开 2022.10.19 20221019224859-UnityProject.zip 修复载具无法导出贴图 2022.10.18 20221018223117-UnityProject.zip 增加 FireBall 与 Laser 弹种 菜单下拉框本地化处理 特效下拉框本地化处理 项目升级到 Unity 2021.3.9f1 ，若要在编辑器运行载具，则必须升级到此版本，否则无法加载。 2022.9.14 修复编辑器 Bug 20220914210611-UnityProject.zip 2022.9.8 增加 VT 弹 与弹链 20220908142630-UnityProject.zip 2022.8.29 编辑器增加实时调试功能 25. 编辑器实时调试功能 20220829012311-UnityProject.zip 2022.8.21 增加 Mech 的旋转参数 @宝马鸽 增加工具修复 Render 层级错误： https://www.yuque.com/chaojiduolajiang/panzerwar/hh40zx @制杖拉菲 履带编辑器增加节点统一 X 轴功能. 20220821114316-UnityProject.zip 2022.7.12 修复部分情况下弹药架排序导致无法 Pack 载具 附件下载： 20220712232816-UnityProject.zip 2022.5.8 修复 DIY 载具打包，上传失败 增加 ModPackage 构建脚本支持 详情查看文档： https://www.yuque.com/chaojiduolajiang/panzerwar/dkespl 修复依赖资源只对 DIY 内容生效 2022.4.30 增加模组包的 Hash 添加到依赖资源，防止加密模组包之间的资源依赖冲突 修复 飞机，武器的 Vehicle Info 无法打包出来"
  },
  "manual/tutorial/0-2. 模组工具 NPM 版.html": {
    "href": "manual/tutorial/0-2. 模组工具 NPM 版.html",
    "title": "0-2. 模组工具 NPM 版 | Panzer War Document",
    "keywords": "0-2. 模组工具 NPM 版 NPM 版 好处： 通过 Package Manger 管理版本，无需自己下载解压新的工具 可以切任意旧版本工具，方便回退与更新 坏处： 国内部分地方可能访问会比较慢 无法修改模组工具中的任何内容 使用方式 先需要在项目的Packages/manifest.json中，添加middlelayer的源信息，在这个文件的dependencies节点前增加以下代码 | ```json \"scopedRegistries\": [ { \"name\": \"middlelayer\", \"url\": \"https://registry.npmjs.org\", \"scopes\": [ \"com.shanghaiwindy\" ] } ], | | --- | ![image.png](./images/20231024_1405307045.png) 然后通过Unity的Window->Package Manager菜单，打开Package Manager. 如果已安装本地的** Panzer War MiddleLayer (Mod Libs)，**则需要先把本地的从 Package Manager 中移除。然后再安装 NPM 版。 点击 Add package by name... ![image.png](./images/20231024_1405309843.png) 然后输入： **com.shanghaiwindy.middlelayer** 就会自动开始下载并安装。 以上是核心的 Mod 工具的安装说明，还有如下包名可以在需要的时候进行安装： 安装方式也是点击 Add package by name...，然后输入包名 1. 共享的配置和共享的内构模型 包名：[com.shanghaiwindy.middlesharedresources](https://www.npmjs.com/package/com.shanghaiwindy.middlesharedresources) # 更新版本 当存在新版本时候，会在 remove 旁边出现 update 的按钮 ![image.png](./images/20231024_1405308218.png) # 回退版本 点击 See other version，然后选择旧版本进行安装 ![image.png](./images/20231024_1405307228.png)"
  },
  "manual/tutorial/0-3. Shared Resources 共享资源文件夹.html": {
    "href": "manual/tutorial/0-3. Shared Resources 共享资源文件夹.html",
    "title": "0-3. Shared Resources 共享资源文件夹 | Panzer War Document",
    "keywords": "0-3. Shared Resources 共享资源文件夹 Introduction 概述 To simplify resources update, the vfx ,fmod config and hitbox preset has been moved to shared resources. Old project need to delete them and add new package to the project. 为了简化资源的更新流程。特效，fmod 配置，以及伤害模型的预设已经被移到共享资源。旧的工程需要从项目中移除他们，并安装新的包。 1. Download Latest Project 下载最新工程 1. GetStarted 项目初始化 Download the latest project，you can refer this document. 下载最新的工程。 2. Open Your Old Project 打开你的旧工程 **Backup your project **then delete the following folders 备份你的工程，然后删除以下文件夹 UnityProject\\Assets\\Res\\VFX UnityProject\\Assets\\Res\\Vehicles\\Data\\FMod UnityProject\\Assets\\Res\\Vehicles\\Ground\\Data\\VFX UnityProject\\Assets\\Res\\InternalDamage\\Preset And delete these four files 以及删除这四个文件 3. Add new package 添加新包 Add the following package from local. It is located in where you download in Step.1. 添加以下本地 Package 。 他位于本地，且路径为你在步骤.1 你下载的工程路径中。 When package is showed, it means upgrade is finished. 显示如下文字，就说明升级完成 4. Switch picker 切换文件选择器 The classic picker do not support pick files from package. You need to toggle to new picker. 默认的文件选择器并不支持显示包内的资源，你需要切换到最新的 picker。 When using the picker，toggle on Show Package results 在使用 Picker 的时候，勾选 Show Package results"
  },
  "manual/tutorial/0-4. Old Project Migration 旧工程迁移新工程.html": {
    "href": "manual/tutorial/0-4. Old Project Migration 旧工程迁移新工程.html",
    "title": "0-4. Old Project Migration 旧工程迁移新工程 | Panzer War Document",
    "keywords": "0-4. Old Project Migration 旧工程迁移新工程 Introduction 概述 To simplify game editor update. All the codes are removed from project and moved to MiddleLibLayer folder. So, if we want to update game editor, only need to delete old MiddleLibLayer folder and copy new MiddleLibLayer folder to original folder. 为了简化编辑器功能的更新流程，游戏相关的代码与工程进行了分离。 Unity Project 将只包含数据，而游戏相关的代码则放在了 MiddleLibLayer 目录下。若需要使用新的编辑器功能，则只需要删除旧的 MiddleLibLayer 目录，然后复制新的 MiddleLibLayer 到原目录即可。 Old Project Migration 老工程迁移 旧工程定义: UnityProject 文件夹下存在 Runtime-Supports 文件 Q: How to define old project? A: If you have Runtime-Supports folder under UnityProject, then it is an old project. 1. Download Latest Project 下载最新工程 1. GetStarted 项目初始化 Download the latest project，you can refer this document. 下载最新的工程。 2. Open Your Old Project 打开你的旧工程 **Backup your project **then delete the following selected folders 备份你的工程，然后删除如图选中的文件夹 Add the following package from local. It is located in where you download in Step.1. 添加以下本地 Package 。 他位于本地，且路径为你在步骤.1 你下载的工程路径中。 When package is showed, it means upgrade is finished. 显示如下文字，就说明升级完成"
  },
  "manual/tutorial/0-5. Umodpack 升级公示.html": {
    "href": "manual/tutorial/0-5. Umodpack 升级公示.html",
    "title": "0-5. Umodpack 升级公示 | Panzer War Document",
    "keywords": "0-5. Umodpack 升级公示 MiddleLayer 需要更新到最新版本，对加密模组进行升级 或者 重打包，否则最新游戏将无法正常加载。 模组升级 对于已经完成打包的模组，可通过此工具一键升级，无需重写打包。 重打包 也可以重新生成下 modpack，默认就会用最新的 package.json 格式"
  },
  "manual/tutorial/01-1. GetStarted 项目初始化.html": {
    "href": "manual/tutorial/01-1. GetStarted 项目初始化.html",
    "title": "01-1. GetStarted 项目初始化 | Panzer War Document",
    "keywords": "01-1. GetStarted 项目初始化 1. Unity Requirement Unity 准备 Please Install the require game engine to get start! 请安装要求的引擎版本 Unity Engine Requirement Unity 引擎版本要求 2. Software Requirement 软件准备 The following softwares are required: git You can install git from: https://git-scm.com/ 需要以下软件 git 你可以从这里安装 git: https://pc.qq.com/detail/13/detail_22693.html 1. 安装 Git 2. 安装小乌龟 3. Download Mod Project 下载模组项目 Project Link: https://github.com/Doreamonsky/Panzer-War-Lit-Mod/ You can download it by git tool or you can click the blue download button and download ZIP. Unzip the file and you get the mod project. 项目地址(国内源): https://gitlab.waroftanks.cn/Doreamonsky/panzerwar-mods 在你要保存项目的路径下，长按 shift + 右键 ，点击 复制如下命令到 Powershell 窗口 （要安装好 Git 工具） git clone https://gitlab.waroftanks.cn/Doreamonsky/panzerwar-mods.git 比如我在 H盘文件夹下输入的此命令，则在 H盘目录下将创建一个 PanzerWar-Mods 的文件夹，这个就是我们的模组项目工程。 （若对上述操作不是很明白，可以简单查看下 git 相关操作教程） 4. Open Project In Unity 从 Unity 打开项目 You have downloaded our mod project in Step.2. Then, open the unity hub and open folder UnityProject in folder PanzerWar-Lit-Mod 你已经在步骤.2 中下载了我们的模组工程。然后，打开 Unity Hub，打开位于文件夹 PanzerWar-Lit-Mod 下的 UnityProject 文件夹 5. Switch picker 切换文件选择器 When the unity opened, you need to change the file picker. The classic picker do not support pick files from package. You need to toggle to new picker. 当项目打开后，你需要修改默认的文件选择器。默认的文件选择器并不支持显示包内的资源，你需要切换到最新的 picker。 When using the picker，toggle on Show Package results 在使用 Picker 的时候，勾选 Show Package results 6. Finish 结束语 You have finish set up the mod developing environment. You can continue to learn other documents. 你已经完成了模组开发环境的设置，你可以继续其他文档。"
  },
  "manual/tutorial/01-2. Unity Engine Requirement Unity 引擎版本要求.html": {
    "href": "manual/tutorial/01-2. Unity Engine Requirement Unity 引擎版本要求.html",
    "title": "01-2. Unity Engine Requirement Unity 引擎版本要求 | Panzer War Document",
    "keywords": "01-2. Unity Engine Requirement Unity 引擎版本要求 The following softwares are required: Unity 2021.3.17f1 (Must be the same version) You can install Unity from this link: 2021.3.17f1 To install unityhub, use this link https://public-cdn.cloud.unity3d.com/hub/prod/UnityHubSetup.exe If you have unity hub installed, you can install by this link: **unityhub://2021.3.17f1/3e8111cac19d ** Unity 2021.3.17f1 （需要相同版本） 你可以从这里安装 Unity: 2021.3.17f1 安装 unity hub，请使用此连接 https://unity.cn/releases 如果你已经安装了 Unity Hub 则可以在游览器中输入以下连接安装 **unityhub://2021.3.17f1/3e8111cac19d **"
  },
  "manual/tutorial/01-3. Install Git 安装 Git.html": {
    "href": "manual/tutorial/01-3. Install Git 安装 Git.html",
    "title": "01-3. Install Git 安装 Git | Panzer War Document",
    "keywords": "01-3. Install Git 安装 Git Download 下载 To download the official verison of git ,you need to open https://git-scm.com/download/win and click the latest version. 官方版本可以在 Git 官方网站下载。 打开 https://git-scm.com/download/win，下载会自动开始。 如果下载慢，请点击以下文件： Git-2.39.1-64-bit.zip Installation 安装 Click next all the way down 一路点 next 就行了"
  },
  "manual/tutorial/01-4. Install Toroisegit 安装小乌龟.html": {
    "href": "manual/tutorial/01-4. Install Toroisegit 安装小乌龟.html",
    "title": "01-4. Install Toroisegit 安装小乌龟 | Panzer War Document",
    "keywords": "01-4. Install Toroisegit 安装小乌龟 You can install Toroisegit from official web site https://download.tortoisegit.org/tgit/2.13.0.0/ 官方版本可以在 Git 官方网站下载。 打开 https://download.tortoisegit.org/tgit/2.13.0.0/ 如果下载慢，请点击以下文件： TortoiseGit-2.13.0.1-64bit.zip"
  },
  "manual/tutorial/02-1. Basic 基础.html": {
    "href": "manual/tutorial/02-1. Basic 基础.html",
    "title": "02-1. Basic 基础 | Panzer War Document",
    "keywords": "02-1. Basic 基础 Preparation 准备 Assets: Vehicle Model with textures and Vehicle HitBox Vehicle Engine Sounds(Start,Idle,Running) Fire Sound(Near and Far) Recommand softwares for art: Blender 2.7 Blender is a free software for modeling. It can be used for making tank model and hitbox model. You can download it from https://www.blender.org/download/. Substance Painter & Photoshop Set up mod project environment in GetStarteds 资源: 模型，贴图，与载具伤害模型 坦克引擎音效 （包括 启动，待机，运行） 坦克开火音效 （包括近，远） 推荐的美术相关软件 Blender 2.7 Blender 是一个免费的建模软件，你可以在 Steam 上进行下载安装。我们可用 Blender 制作载具的模型与伤害模型。 Substance Painter 与 PhotoShop 设置模组的开发环境 （查看文档 1 项目初始化） Process the Vehicle Model 预处理载具模型 Before get started,you should learn about the 3D model softwares.Blender is recommended because it is free and small.The following tutorial will use Blender as the modeling software. 在开始之前，你应该要掌握至少一个 3D 建模软件的使用。 我推荐你使用 Blender ，因为他免费。 在接下来的教程中，我都将使用 Blender Child-Parent Relationship and naming 父子关系与命名 The wheels,turret,gun and dym(barrel) of the vehicle model should have a correct child-parent relationship and name. The child-parent relationship should like this. 坦克的车轮，炮塔，主炮，炮管设置正确的父子关系。 ** ** ** ** ** ** MainBody LeftWheel l_1-l_n LeftUpperWheel l_1-l_n LeftTrack RightWheel r_1-r_n RightUpperWheel ru_1-ru_n RightTrack Turret Gun Dym You should have objects with names above. You should not miss any of it. LeftWheel,LeftUpperWheel,RightWheel,RightUpperWheel are empty objects. MainBody,Turret,Gun,Dym are model. 你的载具的物体名称需要与上表保持一致，不能遗漏任何一个。 LeftWheel,LeftUpperWheel,RightWheel,RightUpperWheel 是空物体 MainBody,Turret,Gun,Dym 是模型 You can refer the following videos Model pre-process from websites https://youtu.be/M0aoe-EPTjs Preprocessing for Tank Destroyer https://youtu.be/Ex-P-mdSWJk 你可以参考如下的视频 模型分离教程 https://www.bilibili.com/video/BV1U5411x7s3 Create Vehicle HitBox 创建载具伤害模型 The HitBox Model is used for penetration system. You should separate HitBox to pieces. Every piece of HitBox will have their own armor thickness after being imported to the game engine. In addition, It is not recommend to have a very precise hit box model. It will affect performance. 伤害模型用于游戏的击穿系统，你需要将不同装甲数值的模型分成不同的物体。此外，不建议伤害模型面数很高，会影响游戏性能。 HitBox Naming 载具伤害模型命名 There is a naming rule that can automatically set hitbox armor in Unity. Normal Armor: Name_{ArmorValue} Intermittent Armor: Name_{ArmorValue}_Inter Replace {ArmorValue} to armor number such as 100 对于伤害模型，有一个命名规范，会在 Unity 内自动设置装甲数值 普通装甲： 名称_{装甲值} 间隙装甲： 名称_{装甲值}_Inter 替换 {装甲值} 为你想要的数值 比如 100 Model Optimization 模型优化 Number of model faces should not be larger than 20,000. Number of materials should not be larger than 4. Texture should not larger than 2048 x 2048 Number of hitbox faces should not be larger than 5,000 模型面数不应该超过 2万面 模型材质数不应该超过 4个 贴图分辨率不应该超过 2048 x 2048 伤害模型面数不应该超过 5千面 Import Model and set materials 设置模型与材质 Before getting started,you should have a quick view of the basic control of the Unity Engine. Open the project which is mentioned in the 1. GetStarted 项目初始化 . Create a folder in the project window in the Unity Engine,and drag your models into that folder. Set up the materials. 在开始下面步骤之前，你应该先了解 Unity 引擎的一些基础操作。 打开在项目初始化中提及的模组项目环境 1. GetStarted 项目初始化 在项目中创建一个文件夹，将你的模型拖入其中。设置相关材质。 Set Up Collision 设置碰撞 Drag the vehicle model from the project window to the Hierachy window to set up the collision. Add box colldiers to the MainBody and Turret. Modify the size of box collider to suit the the MainBody and Turret. Then,create a subfolder in your folder and name it Collision.Drag your model from the Hierachy Windows into that folder. You can refer the Template-Vehicle folder. 将模型从 Project 窗口拖入 Hierarchy 窗口，进行碰撞的设置。 对 MainBody 与 Turret 物体增加 Box Collider 组件。 根据模型来调整其大小。 注意： MainBody 的 碰撞不可以设置太低，会导致坦克底盘被地形卡住无法移动。 在设置完碰撞后，将模型从 Hierarchy 窗口再拖回至 Project 窗口，保存为预制体（Prefab）。 这个就是你的载具碰撞预制体文件了。你可以参考 Template-Vehicle 示例文件夹。 Create Vehicle Data 创建载具数据 Mod Editor 模组编辑器 You should find Mod/Mod Manager in the top windows bar ,if there are no errors in the console. 你应该可以在顶部菜单栏 Mod / Mod Manager 中打开创建模组的窗口 Click Open Create Vehicle Button 点击 Open Create Vehicle 按钮 Create Vehicle Data Editor 创建载具数据编辑器 Input the name of your vehicle. Then,click Create Vehicle button. The name of the vehicle should only contains alphabet,number and underscore. Do not contain blank ! It will not load on certain platform. 输入载具的名称，然后点击 Create Vehicle 按钮进行创建。载具名称只可以包括中文，字母，数字和下划线。不要包含空格，会导致某些平台加载异常。 These files will be created after you clicked. 当按下按钮后，这些文件会被创建。 In the following,I will guide you how to set them one by one. 接下来我会一步步教你怎么设置如下的组件，你可以按照顺序一一设置。 1. VehicleInfo 坦克描述数据 You can set vehicle name,rank and other basic info in VehicleInfo. 你可以在 VehicleInfo 设置载具的名称，等级以及其他一些基础信息 2. Vehicle HitBox 载具伤害模型 Data Binding 数据设置 Assign the variable External Armor Model with your HitBox model. Click Create Prefab Button. 将你的伤害模型 拖入 External Armor Model 中 点击 生成预制 按钮 Click Open Edit Mode Button 点击 编辑模式 按钮 Edit Mode 编辑模式 Click Generate HitBox Model. You will notice that HitBox Model are generated in the scene. Armor Thickness and Type 装甲厚度与类型 You can set the armor thickness by clicking it. HitBox Parent 伤害模型父子关系 Drag HitBox gameobject to Main,Turret,Gun,Dym depending on its type. 拖拽 HitBox 物体，根据其类型放置到 Main,Turret,Gun,Dym 物体下 Module Place 模块放置 You need to set module if you want it can be damaged in module mode. 如果你需要载具在模块模式下可以被损坏，则需要设置内部模块 Select Module Type and click Spawn Button 选择模块类型，点击放置按钮 Place it to right position and right parent. 将模型放置于正确的位置和父节点下 Module HP 模块血条 Every module has its hidden HP. You can set it individually. Also, you can set it automatically. Set the total hit point and click Auto Assign Internal Module Hit Points. 每个模块有一个隐藏的血条机制，你可以为每个模块独自设置。 此外，你可以设置一个总血量，然后分配给每个模块。 Module Crew 模块载具职业 For crews,you need to toggle on their role 对于成员，你需要设置他们的职业 Module Ammo Shell 模块弹药架 For Ammo Shell, you need to set bounds for ammo shell to control how the ammo shell change when capacity change. 对于弹药架，你需要设置边界，来控制弹药数量变化时，弹药架的变化。 Double click vehicle hitbox prefab and set the internal module component on the AmmoShell gameobject. 双击你载具生成的 VehicleHitBox 的预制体，找到 AmmoShell 物体上挂载的 InternalModule 组件 Click **Add new bounds **button and resize it to fit the ammo shell. Click Create Cache Button to general mesh data. Press Ctrl + S to save the prefab. 点击 **添加新边界 **按钮，调整其大小 点击 **创建模型缓存 **按钮，生成相关数据 点击 Ctrl + S 来保存对预制体的修改 Save prefab 保存预制体 To save the edit of hitbox,you need to click Save as prefab and connect button. 为了保存伤害模型的预制体，你需要点击保存并链接为预制体按钮。 3. Vehicle EngineSound Data 坦克引擎数据 Drag your sound files to the project window. And assign the variables one by one. 将对应的音效文件拖入。 4. Vehicle Text Data 坦克详细参数数据 Create Bullet Related Assets 创建子弹相关资源 We need to create fire sound assets and bullet data assets first. 我们需要先创建开火音效资源，与炮弹资源。 By right clicking the project window,you can create fire sound asset and bullet data asset. 右键点击 Project 窗口，你可以创建开火音效与炮弹资源。 FireSound Asset 炮声资源 Set the variable of Fire Near and Fire Far with fire sound. 拖入相应音效文件。 Bullet Data Asset 子弹 You need to select BulletVFX according to your ammo type. 你需要根据你的炮弹类型，来选择其特效文件。 VehicleTextData 载具详细数据 Set the vehicle data as you wish or according to the picture. Base Data 基础数据 Track 移动 Fire 开火 Turret 炮管 Import Data From Tankgg 从 Tank GG 导入数据 You can import a part of track,turret and gun data from tankgg. You need to add other missing data!!! 你可以从tankgg 导入 一些相关数据，但你需要补齐其他的缺失数据。 5. Vehicle Data 坦克打包数据 Assign the variable MainModel with the one that you have set the collider and click Open Edit Mode. 将设置了 Box Collider 的坦克预制体模型拖入至 MainModel Move and rotate the GameObject with orange icon to the right position and rotation. Then,press 'K' key to save the transform data of the selected GameObject to the vehicle data. Then,Click UnLock Inspector button to exit. 移动与旋转橙色的图标来将对应物体放置于合适的位置，点击 K 来保存相关信息。 点击 **UnLock Inspector **按钮退出 6. Wheel Collider 坦克负重轮 Drag the WheelCollider and the main model into the scene so that you can edit the wheel collider data much more easier.After you set them,right click the variable with blue rect and click apply to prefab XXXX. 将 WheelCollider 和 载具模型拖入场景，然后设置 WheelCollider 的属性，并如图进行保存 You can refer to this picture to set the fiction of the wheel collider. 你可以参考如下设置 7. Vehicle Track Data 坦克履带 Assign the variable Track Mesh. (You can use Panzer_Track_Middle prefab if you don't prepare the single track model) And edit the Track Distance(You can leave it for default value now) Other data are generated by editor itself. So don't touch it unless you know what you are doing. 设置 Track Mesh. (如果你没履带素材，你可使用预制体 Panzer_Track_Middle ) 你可以设置 Track Distance(也可以保持默认数值) 其他数值由编辑器生成，不用碰他们 Drag the GameObject generated by VehicleData to Target Edit Object. Then Click the Load Suspension Data Button. (If you have deleted that GameObject. You can regenerate it by going back to VehicleData. Then Click Open Edit Mode and click UnLock Inspector) For your convenience,you can hide the HitBox from here. 将由 VehicleData 生成的模型拖拽到 Target Edit Object 中 然后 点击 Load Suspension Data 按钮. (如果你已经删除了 VehicleData 生成的模型的模型. 你可以回到 VehicleData. 然后 点击 Open Edit Mode 再点击 UnLock Inspector) 为了你操作方便，可以在这里隐藏伤害模型 Then,Click Create Node. Surround the track with your nodes. 然后,点击 Create Node. 如图，用顶点包围履带. When you have done it,you can click Preview Track. You can remove the static track to view the advacne track more clearly. Click Unlock Inspector when you have finished editing the track. 完成此步骤后，你可以点击 Preview Track 来预览履带 （可移除静态履带获得更好的观察） 编辑完毕履带后点击 Unlock Inspector. 8. Build VehcileData to Prefab 打包载具 Find VehicleData and click Pack Asset. It will generate two prefab located at Assets/Res/Cooked/xxxx_Pre and Assets/Res/Cooked/DedicatedServer/xxxx_Pre For the client,only the first one is useful. You will need to do this build task again if you have changed the hitbox or edit the node transform with orange icon. 找到 VehicleData 然后点击 Pack Asset. 他会创建两个物体 位于 Assets/Res/Cooked/xxxx_Pre and Assets/Res/Cooked/DedicatedServer/xxxx_Pre 第一个是客户端文件，第二个是服务器端文件. 如果你修改了碰撞模型，伤害模型或者橙色物体的位置，都需要重进行此步骤 Create Mod Package 打包模组 Open Mod Manager again. 再次打开 Mod Manager . Name a package. You can't just name it as your vehicle name. You should name it in the following pattern Vehicle-XXXXXX. And click Create Mod Package Button. 命名 package. 你不能以载具名称来命名！！！会加载错误！！！. 你应该用以下方式来命名 Vehicle-XXXX (其中 XXXX 是你的坦克名称). 然后点击 Create Mod Package 按钮. BuildPipline Drag your vehicle info to the linked object to the linked object. And then,click the Build Linked Objects to AssetBundle button. Press Ctrl + Shift + B to select your desired platform. Remember you can't run mods with an incorrect build platform ModPackageData Then click the Linked Mod Package.Edit the infos and click Package Now. You modpackage will be generated at UnityProject\\Build\\Mod-Package. And its extension is modpackage.You can test it with the common installation. 将 vehicle info 加入到 linked object 中. 点击 Ctrl + Shift + B 切换你要的平台. 模组必须使用相同的平台才能运行 然后点击 Build Linked Objects to AssetBundle 按钮. 然后点击 Linked Mod Package.编辑信息然后点击 Package Now. 你的模组文件会生成在 UnityProject\\Build\\Mod-Package. 扩展名为 modpackage. 可用与之前官方模组与社区模组一样的方式进行安装. If you switch the platform. You should go to the BuildPipline and click the Build Linked Objects to AssetBundle button. Then go to the Linked Mod Package and click Package Now. 如果你切换平台需要重开始 BuildPipline 的步骤. If you have any issue during reading this tutorial,you can send an email to me. My E-mail: 403036847@qq.com Or Contact me on VK 如果你在阅读本教程过程中遇到任何问题，都可以 QQ 联系我 QQ:403036847 Special Vehicle Guidance 特别载具指南 Wheel Vehicles 轮式载具 For wheel vehicles,you should prepare the model like this. LeftTrack and RightTrack can be an empty gameobject but it can't be missing. 模型如上图准备 LeftTrack 和 RightTrack 可以是空物体，但不可缺少 You can refer this setting for your wheel vehicles. 轮式载具设置可以参考上图 Slot Gun 机炮 To make gun like M3 Stuart,you can refer this. 参考上图设置 Drum Gun 弹鼓炮 To make drum gun like Progetto 65,you can refer this. 参考上图设置 Advance Gun 弹夹炮 To make advance gun like Bat 25t,you can refer this. 参考上图设置 Multi-Turret 多炮塔 For example,bmd-1 is using the multi-turret mechanic to shoot common bullets and atgm. 以 BMD-1 的副炮导弹为例。 You should first perpare model like this. 你需要按如上结构准备模型。 Then, configure like this. 然后，像这样配置数据。 Be caution! The position of ffpoint and fireeffect can only be set in the inspector. 注意，炮弹发射点与开火特效口由偏移控制。 T-35 example T-35 例子 Hierachy: 父子结构 Vehicle Text Data: 数据参考 Two barrel example ST-II 双管例子 The pivot position of second barrel: 第二个炮管的模型坐标轴 Hierachy: 父子结构 Vehicle Text Data: 数据 Issues you may encounter 你可能遇到的问题 Issues you may encounter 你可能遇到的问题"
  },
  "manual/tutorial/02-10. 反应装甲.html": {
    "href": "manual/tutorial/02-10. 反应装甲.html",
    "title": "02-10. 反应装甲 | Panzer War Document",
    "keywords": "02-10. 反应装甲 Reactive Armor Size ： 表示反应装甲每一块区域的大小。 区域越小，对坦克的保护则越强 Reactive MaxProtect Penetration ： 表示反应装甲最大可以保护多少穿深的炮弹 机制： 反应装甲按区域大小被划分为几个区域， 在反应装甲的一块区域抵挡了一次炮弹后，则失效变为间隙装甲，间隙装甲厚度为 Armor。其他区域不受影响。"
  },
  "manual/tutorial/02-2. SPG _ TD _ Strv 火炮,反坦克，液压悬挂.html": {
    "href": "manual/tutorial/02-2. SPG _ TD _ Strv 火炮,反坦克，液压悬挂.html",
    "title": "02-2. SPG _ TD _ Strv 火炮,反坦克，液压悬挂 | Panzer War Document",
    "keywords": "02-2. SPG _ TD _ Strv 火炮,反坦克，液压悬挂 General 通用 Special turret functions are achieved by turret action. There are three types of turret actions. Spg,StrvTurretAction and TD. You can create it by right click project and click menu like the following picture. 特殊功能的炮塔是通过 Turret Action 的方式实现的。有三种特殊的炮塔，火炮，液压悬挂，与反坦。你可以通过右键点击，寻找下图的菜单进行创建。 Then,go to the vehicletextdata. You can find action data in turret setting. You can pick one of turret action that you have created. 然后，前往 VehicleTextData。你可以在炮塔设置下找到 额外的炮塔事件选项。你可以为他选择一种你刚刚创建的炮塔事件。 SPG 火炮 After create SPGTurretAction. You can change the property of max distance. 创建完成 SPGTurretAction后，你可以修改他的最大射程。 TD 炮塔 No extra property，automatically turn tank into turret range. 没有特殊属性，自动旋转车体到射界范围内。 Strv 液压悬挂"
  },
  "manual/tutorial/02-3. Multi-Fire (Old) - 多炮塔 （旧）.html": {
    "href": "manual/tutorial/02-3. Multi-Fire (Old) - 多炮塔 （旧）.html",
    "title": "02-3. Multi-Fire (Old) - 多炮塔 （旧） | Panzer War Document",
    "keywords": "02-3. Multi-Fire (Old) - 多炮塔 （旧） General 综合 Multi-Fire (Old) system is designed for one turret and one gun. 多炮塔（旧）系统被设计用于对应一个炮塔与炮管。 Child-Parent Relation 父子关系 Suppose we have an ATGM on the turret. We should SubTurret under Turret. Also you need to put SubGun under SubTurret and SubDym under SubTurret. 假设我们在炮塔下面有 ATGM，则我们需要将 SubTurret 放置于 Turret。此外，我们需要将 SubGun 放置于 SubTurret ，将 SubDym 放置于 SubTurret。 Property 属性 Relative Path 相对路径 You need to set the relative path of turret ,gun and dym. 你需要针对炮塔，炮管，炮管活动部分设置他的相对路径。 FFPoint / Effect Start Offset 开火位置偏移 The offset will decide where ffpoint and effect start are. In genereted prefab,you can see the red dumps indicates these points. 偏移值会决定开火位置。 在创建出来的预制体中，你可以看到这些虚节点。 Tank Fire Param 开火设置 The structure is same as the ordinary one. 结构与普通的开火设置一样。 Turret Param 炮塔设置 The structure is same as the ordinary one. 结构与普通的炮塔设置一样。"
  },
  "manual/tutorial/02-4. Material Component 材质组件.html": {
    "href": "manual/tutorial/02-4. Material Component 材质组件.html",
    "title": "02-4. Material Component 材质组件 | Panzer War Document",
    "keywords": "02-4. Material Component 材质组件 For now,you need to upgrade your editor to 2021 version to use this new feature. 目前而言，你需要将你的模组工具升级到 2021 才可以使用此功能 15.Upgrade 2021 Editor 升级 2021 编辑器 General 综述 The game has three version of renderer pipline. To make it possible to build once and run on all version. We need some components to fix material problems. 游戏拥有三种渲染管线版本，为了实现一次打包三个管线正常渲染，我们需要一些中间组件，来帮助我们解决材质兼容的问题。 通用PBR 材质 Shader 支持 Mask Texture 的材质球 切换 Shader 为 SRP-Vehicle-Camouflage A mask for PBR effect. You can refer channel from https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@7.1/manual/Mask-Map-and-Detail-Map.html 一个反光遮罩贴图用于 PBR 效果。贴图通道信息查看 https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@7.1/manual/Mask-Map-and-Detail-Map.html Render component 渲染组件 Core RP MatData Right click the project and select the menu in the picture. 右键工程，选择如菜单的按钮。 Linked Material 链接的材质 Select the material you want to override. 选择你要覆盖的材质 Transparency 透明贴图 Change the alpha of color to make material transparent. 改变颜色的 Alpha 值，实现透明效果。 Add Core RP Mat Component on your mesh renderer. 在你的 mesh renderer 组件上挂载 Core RP Mat 组件。 Select the CoreRPMatData you created previously. You need to make the linked material on CoreRPMatData is one of the mesh renderer that contains the same material. 选择你先前创建的 CoreRPMatData。你需要保证你添加的 linked material 是其节点下某个 Mesh Renderer 所拥有的材质球。"
  },
  "manual/tutorial/02-5. Physic Wheel 物理轮子.html": {
    "href": "manual/tutorial/02-5. Physic Wheel 物理轮子.html",
    "title": "02-5. Physic Wheel 物理轮子 | Panzer War Document",
    "keywords": "02-5. Physic Wheel 物理轮子 Asset Preparation 资源准备 Prefab structure 模型预制体结构 一. 根节点组件 Root Components You should add the following components to root. (SUV node in the picture) 在根节点挂载以下组件 (如图的 SUV 节点) 1. NPhysicCarController 2. RigidBody 3. CenterOfMass 4. NPhyisc 二. 轮子组件 Wheel Components You should add WheelController to every wheel transfrom. 在轮子 Transform 上挂载 WheelController 组件 WheelController 摩擦力组件 Friction Preset 三. 确认组件 Confirm Components The prefab should look like the following picture when all the components are attached. 挂载完所有组件 3D 视窗应如下效果 四. VehicleTextData 设置"
  },
  "manual/tutorial/02-6. Flight 飞机.html": {
    "href": "manual/tutorial/02-6. Flight 飞机.html",
    "title": "02-6. Flight 飞机 | Panzer War Document",
    "keywords": "02-6. Flight 飞机 起落架动画机与动画 动画准备 需要使用 Animation 或者 Blender 等，k三个飞机状态的动画 飞行中动画：起落架收起的常态 降落动画：起落架从收起到展开的过程 降落完毕动画：起落架展开的常态 需要把动画 k 在显示模型上 动画机准备 创建一份 Override 的动画控制器 Controller 选择项目内自带的 BF-110 右侧的三个动画表示用你的动画去覆盖原本动画机的动画 比如这样：用自己的 landing 动画，覆盖默认的 landing 动画 三个都要填上 在模型上增加 Animator 组件"
  },
  "manual/tutorial/02-7. 祝昔的载具 Mod 开发总结.html": {
    "href": "manual/tutorial/02-7. 祝昔的载具 Mod 开发总结.html",
    "title": "02-7. 祝昔的载具 Mod 开发总结 | Panzer War Document",
    "keywords": "02-7. 祝昔的载具 Mod 开发总结 作者：@情绪薫 PW mod制作中可能遇到的问题 首先模型获取途径 第一个Sketchfab - The best 3D viewer on the web，上面有着大量模型，包括付费以及免费模型 第二个游戏中的载具模型 (gamemodels3d.com),上面有WT，WOT，WOTB，AW的大量模型，并且大部分WT模型都包含内构，需要付费注册账号来下载模型 第三个CGTrader - 3D Models for VR / AR and CG projects，上面有着大量付费模型 第四个其他。 接下来分为制作mod中遇到的问题以及制作更好的mod遇到的问题两个方面 制作mod中遇到的问题 模型原点位置的确定 无炮塔坦歼的制作 mod内构在游戏里不显示 在编辑过程中突然看不到hitbox mod在车库中起飞翻转 炮弹击中后产生的弹痕贴图过大 mod在游戏中不显示 制作更好的mod遇到的问题 动画制作 更换实体履带 如何设置不同方向炮塔不同俯仰角 如何给mod设置缩略图 如何设置爆反装甲 如何去除内构模型颜色 如何给mod起名字 如何将多边形炮管变圆 多炮塔设置的例子 配对节点和重力节点的运用 如何解决载具移动停止时的猛烈磕头 一、在制作mod中遇到的问题 1. 模型原点的确定 在blender中，你需要对以下部件设置原点 炮塔turret,设置炮塔原点以确保炮塔绕轴进行水平转动。 （先点击左侧工具栏中的移动然后勾选右上角的原点，父级，然后就可以将物体原点移动到你想要的地方，完成后记得取消勾选原点和父级） 炮盾Gun，将设置炮盾原点以确保坦克炮管俯仰正常 炮管Dym，设置炮管原点来确保炮弹发射位置正确 轮子UpperWheel以及Wheel，右键设置原点在质心体积来确保轮子绕轴旋转 2. 无炮塔坦歼 对于无炮塔坦歼如猎虎，在blender中按shift+a，创建一个空轴来作为其炮塔，按g来移动空轴原点。 3. Mod 制作了内构但游戏里不显示 查看是否勾选配置模块化信息 4. 在编辑过程中突然看不到hitbox 查看hitbox是否隐藏 5. 坦克在车库中起飞翻转 查看是否设置坦克质量 6. 炮弹击中后产生的贴图过大 查看炮弹口径是否填写出错 7. Mod 在游戏内不显示 查看是否有音效未填 二、如何制作更好的 Mod 1. 动画 举例某些坦克上有旋转的雷达 如图在合适的位置创建一个空轴来保证雷达绕此轴旋转，然后将雷达放入空轴中，将空轴移动到炮塔下 接着在unity中将物体拖入左侧栏中，选中该物体的雷达部件，右侧选择animation，animation制作教程可参照下面的视频 https://www.bilibili.com/video/BV1zR4y1G7rt/?share_source=copy_web&vd_source=8d9c532ad7fc3b92734fdeaf32c1ee66 制作完后需要将animator勾选（没有则需要在下方add component选择animator） 最后模型上好贴图并设置碰撞体积放入collision文件夹中保存即可。 2. 实体履带 将履带块模型分离出来后，右键设置原点在质心（体积），接着右键吸附-选中项-游标，将模型角度调整如下，然后ctrl+a应用旋转，保存即可 注意，当你需要设置左右两侧履带模型时，左履带模型需在上图基础上顺时针转动180度后再应用旋转 3. 不同方向炮塔不同俯仰角 大部分坦克在不同方向的俯仰角不同，可以在特殊的俯仰角位置中进行设置 4. 如何给mod设置缩略图 将你的图片放入编辑器后，右侧设置选择sprite和single，再点击下方的apply即可 5. 如何设置爆反装甲 将爆反在HitBox中设置为reactive armor同时在内构中将其设置为内部装甲（你也可建一个内部爆反的模型） 6. Mod 查看装甲时部分装甲透明 有时当你查看一些地方的装甲时，它不会是红绿黄三色之一，而是透明的，这代表着该处法线反了，你需要用按tab进入编辑模式后选中透明处装甲，按shift+n来将法线调正。也可通过这个视频来学习如何修复法线。https://www.bilibili.com/video/BV1xr4y187Fc/?share_source=copy_web&vd_source=8d9c532ad7fc3b92734fdeaf32c1ee66 7. 去除内构模型颜色 有时当你查看内构时，有些内构模型仍然有贴图存在，这时你需要将内构模型拖入unity左侧栏中，点击reset来去除所有贴图，再对模型进行保存 8. 给模型起名字 9. 多边形炮管变圆 有时你所拿到模型它的炮管和其他一些部位是多边形的，你可以在blender中点击模型，然后右键平滑着色来让它变圆 10. 多炮塔例子 其中SubTurret02是炮塔顶部的机枪，我用空轴来作为它的dym 而SubTurret01是共轴机枪，我将三个空轴叠加来作为共轴机枪，并套在Dym下，这使得它将同主炮一同移动，而你不需要设置其他多余的数据（如炮塔俯仰角，转速） 11. 配对节点和重力节点 重力节点意味着履带在该点会受到重力影响而自然下垂 而配对节点则能够使得上下履带随负重轮一同上下运动 如下图使用 12. 如何解决mod启动停止时的猛烈磕头 一是将center of gravity摆放适中同时将其稍微下移（重心越高越不稳定），二是调整wheelcollider中右侧数据来调整摩擦 详情请见此https://blog.csdn.net/weixin_43147385/article/details/124266796"
  },
  "manual/tutorial/02-8. 樱花的坦克抛壳动画.html": {
    "href": "manual/tutorial/02-8. 樱花的坦克抛壳动画.html",
    "title": "02-8. 樱花的坦克抛壳动画 | Panzer War Document",
    "keywords": "02-8. 樱花的坦克抛壳动画 一、Blender内准备 1.我们需要在Blender中设置好退壳装置的旋转位置(如果没有退壳装置，忽略这一步)。以AGS为例，们需要设置物体原点到旋转中心，如图所示： 2.我们将弹壳放入炮塔内，设置为炮管或者炮塔的子级： 注：如果退壳装置旋转轴不是x,y,z轴，以T72A为例，可以设置一个空物体，旋转到和抛壳装置同一个角度，并将退壳装置设置为空物体的子级，这样在unity里我们只需旋转空物体即可，如下图所示： 二、unity内制作 1.首先打开unity的animation组件 2.选定需要制作动画的模型后，点击create创建动画 3.设置你的动画文件名称后，点击保存 4.点击Add Property，可以在Transform中创建位置，旋转，大小三种变换，我们这里选择位置Position，如果需要动画过程中旋转，也可以添加Rotation。 5.动画的制作可以参考如下链接中的视频： https://www.bilibili.com/video/BV17t4y1F7CZ/?spm_id_from=333.788&vd_source=5f5f291242e9ace2af6f7105ccc768bf 在动画制作过程中，我们可以点击下方的curves，调整动画曲线 注：对于旋转轴不是x,y,z的模型，我们需要将坐标系调整到局部坐标下来制作动画，如下图所示： 同时需要调整旋转为四元数旋转模式(需要在没有制作动画之前设置，否则动画过程不会生效，需要重新制作： 三、组件设置 增加Animation组件，如下设置： 2. 点击制作的动画，进入debug模式，勾选Legacy后，返回Normal模式： 保证wrap mode模式为default 3.挂载Lua脚本组件： lua代码如下： local PlayAnimationComponent = class(\"PlayAnimationComponent\") Behavior() Property = { } function PlayAnimationComponent:OnStarted() local animation = self.script:GetNativeComponent(\"Animation\") local ret, vehicle = self.script:TryGetTankInitSystem() if ret then VehicleAPI.RegisterVehicleLoadedEvent(vehicle, function() VehicleAPI.RegisterBulletFiredEvent(vehicle, 0, function() local isPlayed = animation:Play() end) end) end end return PlayAnimationComponent 至此动画制作完成。"
  },
  "manual/tutorial/02-9. Q&A 疑难杂症解决.html": {
    "href": "manual/tutorial/02-9. Q&A 疑难杂症解决.html",
    "title": "02-9. Q&A 疑难杂症解决 | Panzer War Document",
    "keywords": "02-9. Q&A 疑难杂症解决 Issues you may encounter 你可能遇到的问题 Game can't load the vehicle 载具无法正常加载 In this case,the reason might be that the name of your mod package is the same as the vehicle name. This is not allowed. Try another mod package name. For example,the mod package name can be Vehicle-XXXX (XXXX refer to the vehicle name) eg. Vehicle-T-72 这可能是因为你的模组包名和载具名一致导致，尝试修改你的模组包名。比如你载具是 T-72,模组包名可设置为 Vehicle-T-72. Game can't load the vehicle correctly 无法运行载具 In this case,the reason might be that your vehicle assets miss some reference. Please check if the following files are set correctly VehicleEngineSoundData,VehicleHitBox,FireSound Asset,Bullet Data Asset,VehicleTextData,VehicleTrack and VehicleData. You can refer to this document and you can refer to the template vehicle in the project. 查看是否有资源引用丢失。 Can't elevate the gun 无法抬升炮管 In this case,the reason might be that down max angle can't be negative. It should be positive. 查看是否炮管俯角设置为 负值了，应该设置为正值。 Tank Move Strange 坦克移动奇怪 Tank Mass 坦克质量 Do not set a too small or too large mass for the tank 不要质量设置过大或过小 Wheel Collider Mass should not larger than 1000. You can refer this setting. Mass 质量不要超过 1000， 悬挂系数参考如下设置 Model Render Strange 模型渲染奇怪 This may caused by wrong normal direction. You can check the following settings. 这可能是由法线的错误朝向导致，你可以检查如下设置。 Normal Map Type 法线贴图类型 If you imported normal map,you should set the texture type to Normal Map. 如果你导入了法线贴图，则应该设置贴图类型至法线。 Mesh Normal 模型法线 Check face orientation,it should have no red color. Flip the normal of red faces. 检查面朝向，应该没有红色。翻转红色面的法线朝向。 Index out of range 数组越界报错 Ensure all sub turrets bullet data length is not zero！确保所有副炮 BulletData 数组不为 0 祝昔的十万个为什么(1)"
  },
  "manual/tutorial/03. Map Wizard Tutorial 地图教程.html": {
    "href": "manual/tutorial/03. Map Wizard Tutorial 地图教程.html",
    "title": "03. Map Wizard Tutorial 地图教程 | Panzer War Document",
    "keywords": "03. Map Wizard Tutorial 地图教程 The Map Wizard Tool is built for creating custom map easily. 地图创建指引工具可快速用于地图文件的创建，让你专注于地图的创建，而无需关系相关配置信息的生成。 Open the tool 打开工具 You can open this tool from this menu if you have installed the Panzer War Mod SDK correctly. 你可以在顶部菜单栏打开地图工具。 Create the map 创建地图 Change the map name and click Create New Map. (You can keep the default map name) 修改地图名称，点击按钮 Create New Map Then,the new map is created. It is an almost empty map. You can add buildings and terrains into it. And you have to set the tag of the buildings and terrains. You can refer to the default objects.Also,you can add points to the map. Finally,you should click re-build path if you changed something on the map. 随后，你的新地图创建了。这个是一张几乎空的地图。你可以添加建筑与地形到场景中。你可以参考一些默认物体。此外，你可以添加出生点和寻路点到地图上。最后，你如果对地图进行了修改，需要点击 Re-Build Path 按钮。 Build the assets 编译资源 You can find the BuildPipline file in the folder \"ModManager\". It names BuildPipline-Map-YourMapName. And click Build Linked Objects to AssetBundle 你可以在 ModManager 文件夹寻找到地图对应的 BuildPipline 文件夹。 点击 Build Linked Objects to AssetBundle 按钮打包资源。 Package Files 打包文件 You can find the ModPackage file in the folder \"ModManager\". It names Map-YourMapName. Click Package Mod Now. And you can get the .modpack file. 你可以在 ModManager 文件夹寻找到地图对应的 ModPackage 文件夹。点击 Package Mod Now 按钮打包资源。 Extra - Point function 额外 - 功能点 You can add repair and supply point in the map. 通过增加组件和碰撞触发器方式，可以增加补给和维修功能点。"
  },
  "manual/tutorial/04. Multi-Platform Build 多平台打包.html": {
    "href": "manual/tutorial/04. Multi-Platform Build 多平台打包.html",
    "title": "04. Multi-Platform Build 多平台打包 | Panzer War Document",
    "keywords": "04. Multi-Platform Build 多平台打包 1. Description 介绍 Support for both Windows and Android is a must for sharing the Mod to the community.Here is a quick way for you to build two platforms without swtiching the platform. We will need to use soft link. 对于分享模组到社区，支持 Windows 与 Android 的模组文件是必不可少的。为了避免来回切换平台，我们需要将项目进行软连接，建立 Windows 与 Android 同步资源的打包环境。 2.1 Python 工具 import os PRJ_NAME=\"UnityProject\" root= os.getcwd() + \"/\" + PRJ_NAME + \"-Softlink\" subFolders=[\"Assets\",\"Packages\",\"ProjectSettings\"] if not os.path.exists(root): os.mkdir(root) def mkStr(str): tmp = r'\"' + str + r'\"' return tmp for subFolder in subFolders: src = os.getcwd() + \"/\" + PRJ_NAME +\"/\" + subFolder dstFolder = root + \"/\" dst = dstFolder + \"/\" + subFolder if not os.path.exists(dstFolder): os.mkdir(dstFolder) cmd = \"mklink /J\" + \" \" + mkStr(dst) + \" \" + mkStr(src) os.system(cmd) input() 将以上代码放入文本，并改名为 softlink.py 放在 与 UnityProject 同级的目录，然后运行 Python 脚本。 （如果是使用 UnityURPProject，则将 PRJ_NAME=\"UnityProject\" 改为 PRJ_NAME=\"UnityURPProject\"） 2.2 Cmd 命令行式 Suppose you have a Mod project with Windows build platform here. And,you want to build Android platform now. 假设你已经有了一个针对 Windows 平台的打包环境，你想要增加一个 Android 平台的打包环境 First,create a folder somewhere else. Then,open the cmd and cd to that folder. Refer the following picture. 首先，在其他目录下创建一个文件夹。 然后打开 CMD ，用 CD 命令移动到这个文件夹。 参考下图。 Make a folder link，refer command on the picture. 创建一个目录软连接，参考图上的命令。 3. Add in UnityHub 在 Unity Hub 添加项目 Then,you can open this folder in Unity and the files are the same all the time as what in your Windows project. Then you can switch its platform to Android. 然后你就可以给 Unity 额外增加一个项目工程打开，切换为 Android 平台。"
  },
  "manual/tutorial/05. Create Mech 创建机甲.html": {
    "href": "manual/tutorial/05. Create Mech 创建机甲.html",
    "title": "05. Create Mech 创建机甲 | Panzer War Document",
    "keywords": "05. Create Mech 创建机甲 在阅读此文本之前，请务必有普通坦克模组的开发经验。 前期准备 1. 模型 骨骼模型：一个绑定骨骼的机甲模型。 伤害模型：一个将各个关节分离的简易的伤害模型。 2. 动画 你至少需要拥有以下动画： 待机动画 走路动画：笔直向前走路动画，向左的走路动画，向右的走路动画，原地左转的动画，和原地向右的动画。 注：倒退走路动画可以在动画树中，以-1倍的速度播放，实现倒退。 你可以额外制作以下动画: 飞行动画：飞行起步动画，飞行中待机动画，和飞行结束落地动画。 3. 导入引擎动画的设置 动画导入引擎后有相关设置，才可以使机甲符合物理模拟效果。 需要将 Root Transform Position (Y) 中的 Bake Into Pose 勾上。 在 Curve 增加 GravityWeight 属性，并将曲线设置为值为1的水平线。 含脚步落地的动画帧，在 Events 中添加 WalkSound 事件。 载具属性设置 机甲预制体制作 动画控制器。在含有Animator组件的物体上增加 MechAnimatorController 组件 和 CharacterController 组件。 物理碰撞。调整 CharacterController 的属性，使胶囊体底部与脚底一致。 机甲脚底碰撞。在机甲两个脚底均增加 MechLegEndPoint 组件，与BoxCollider 组件。并勾选 BoxCollider 的 isTriiger 属性。若机甲可以飞行，则增加 MechFireBurst 组件,并调整相应参数。 炮塔同步。增加 Turret/Gun/Dym 的空物体。在机甲模型上，上半身旋转控制的位置增加 MechTurretSync 组件，来同步相应位置。 动画树制作 在 Project 新增 Animator Controller 并拖入机甲预制体含Animator的组件上。 增加如下参数。 类型一定要与图中一致。 增加动画状态。 若含飞行的三个状态动画，则一定要与图中的三个Jet开头的动画命名一致。 向前走路（Walk）由多个动画的混合组成（Blend Tree）。 混合使用的参数为 Turn。0.5为笔直向前的动画。 0为向左的走路动画，1为向右的走路动画。可以在中间插入更多动画作补帧，使动画更加自然。 注：倒退动画可以在动画树中，以-1倍的速度播放，实现倒退。 动画转换条件。在下图出现的连线，需要增加如图的条件。 向前走路动画条件: 向后走路动画条件: 向左走路动画条件: 向右走路动画条件: 若含飞行动画，则飞行落地动画条件: 从 Idle 转到其他状态，无需设置 Has Exit Time。其他状态转到 Idle ，则需要设置 Has Exit Time。 注意:游戏的输入为 Walk 与 Turn 。Walk 的范围为 -1到1。Turn的范围为 0到1。 可以根据自己的动画，设置更加复杂的动画切换。 动画系统的条件切换可以在引擎内直接进行调试，可访问 Unity 动画教程了解更多详情。 创建 VehicleData 像普通坦克一样，创建坦克配置参数。然后删除生成的 VehicleTrack 文件。 其他配置信息和坦克一样进行配置即可。 在 VehicleTextData 需要额外关心，设置机甲专用参数。"
  },
  "manual/tutorial/06. Track IK 悬挂架教程.html": {
    "href": "manual/tutorial/06. Track IK 悬挂架教程.html",
    "title": "06. Track IK 悬挂架教程 | Panzer War Document",
    "keywords": "06. Track IK 悬挂架教程 模型准备 从模型上分离悬挂架，并调整为 MainBody 的子物体。朝向通过旋转调整为向前。 在 Unity 3D 载具的碰撞预制中增加一个空物体，并命名为 StandardUCS 在悬挂架模型上添加 TrackIK 组件，并且设置相应的属性。 Target，朝向的负重轮。 Standard UCS，第二步创建的空物体。 注意！所有的悬挂架模型均要设置！"
  },
  "manual/tutorial/07. VFX Mod 特效模组.html": {
    "href": "manual/tutorial/07. VFX Mod 特效模组.html",
    "title": "07. VFX Mod 特效模组 | Panzer War Document",
    "keywords": "07. VFX Mod 特效模组 Identifier 资源标识 通过资源标识，创建特效包的选项，保证可以选择不同的特效包进行切换 如果要在马哥的特效包内，增加自己的自定义键值特效，则使用如下的 Identifier。 解压下方的压缩包，把 asset 文件放入项目路径。 马哥特效-PoolResourceIdentifierData.rar Pool Resource 特效资源 创建 Pool Resource ，关联 Identifier。 添加 Spawn Reses 特效名称：特效的键值，可自定义，然后在 Bullet VFX 中选择自定义的特效键值进行关联 特效物体：特效的预制体 预加载实例数量，在加载场景的时候，预先加载一批特效进内存，减少游戏时的卡顿，但是填写过大的一个数量，会导致加载时间的增加。 填写 -1 则表示运行时根据需求再创建。 生命时长：特效播放的时长，时间到之后会被回收以便下次使用。 请不要填写 0，0 是为了喷火，激光等特殊特效所准备的 特效的使用 在重载中，选择你的特效。如果不使用重载的选项，请务必将你的特效的模组包的放入你的载具依赖的 guid 中。 Build 打包 将 Pool Resource 放入 BuildPipline"
  },
  "manual/tutorial/08. Vehicle Thumbnail 载具缩略图.html": {
    "href": "manual/tutorial/08. Vehicle Thumbnail 载具缩略图.html",
    "title": "08. Vehicle Thumbnail 载具缩略图 | Panzer War Document",
    "keywords": "08. Vehicle Thumbnail 载具缩略图 导入缩略图工具 设置渲染大小 推荐为 640 x 360 ，为游戏的标准的缩略图大小。过大的缩略图会导致严重的内存负担。 设置渲染载具 将载具的预制体拖入列表 在 Assets 同级下的 Others\\Renderering\\Common\\KV-1.png 可以得到渲染图片 将图片导入 Unity，然后拖入此位置"
  },
  "manual/tutorial/09. Sight Mod 瞄具模组 (未汉化).html": {
    "href": "manual/tutorial/09. Sight Mod 瞄具模组 (未汉化).html",
    "title": "09. Sight Mod 瞄具模组 (未汉化) | Panzer War Document",
    "keywords": "09. Sight Mod 瞄具模组 (未汉化) Open the project Right click in the project window and click this. You can refer this setting. Range is the distance to the target at which the notch will be drawn. Number is which text will be placed by the notch. Notch Size is how much to increase the length of the notch from the left. You can preview the sight in the editor. Just click Preview in Editor Button. And then click Play. If you want to draw custom lines,then you can toggle off drawCentralLineVert and drawCentralLineHorz. Attention! Specific Vehicle is for setting the name of your vehicle which needs custom sight. For exporting,click the button 'export sightdata for players'."
  },
  "manual/tutorial/10. Encryption 加密模组 (未汉化).html": {
    "href": "manual/tutorial/10. Encryption 加密模组 (未汉化).html",
    "title": "10. Encryption 加密模组 (未汉化) | Panzer War Document",
    "keywords": "10. Encryption 加密模组 (未汉化) The encryption mod is a way to encourage modders to create high quality mods. You can only create the encryption mods to player if you created your mod without copyright issues. In other word,you can't use models from other games such as World of Tanks / War Thunder to make encryption mods. If you make encryption mods with copyright issues,the developer has rights to close your account and revoke all the keys you have generated. This agreement will affect all the mod package that is created after 2020/7/5. You can purchase models from CGTrader / Unity asset store and other cg stores to create encryption mods. Or you can learn to create model on your own. Enable Encryption in BuildPipline The Build-Pipline file will automatically generate key and iv for your package. Create Mod Pack You can manage your paid mod from 装甲纷争:数据站 Get Uid for ModPackage Set Uid for ModPackage After that,you can build the package as normal. Manage CD-Key Request CD-Key User Active CD-Key"
  },
  "manual/tutorial/11. Covert To DIY Equipment一键转为 DIY 配件.html": {
    "href": "manual/tutorial/11. Covert To DIY Equipment一键转为 DIY 配件.html",
    "title": "11. Covert To DIY Equipment一键转为 DIY 配件 | Panzer War Document",
    "keywords": "11. Covert To DIY Equipment一键转为 DIY 配件 1. DIY Equipment DIY 配件 DIY equipments are in the workshop of Panzer War : DE. DIY equipments are consist of Hull,Turret,Gun and other equipments. DIY 配件为决定版的坦克工坊相关内容，可创建自定义车体，炮塔，炮管和一些其他配件。 2. Auto Convert 一键转换 Click Export As DIY Equipment button. 点击 拆解为 DIY 配件 按钮 Select a folder in your project. Your vehicle data will create DIY Equipment. 选择一个位于你项目内的文件夹。 你的 Vehicle Data 数据将生成 DIY 配件信息。 3. Adjust 调整 Adjust the postion of the model and hitbox. Make sure the pivot of your model in the origin (0,0,0). 调整你的模型和伤害模型的位置，确保他们的轴位于坐标原点 （0，0，0） Adjust the position of Slot Info and Dump Node. Make sure they are in the proper position. 调整插槽信息和虚节点的位置，确保他们位于合适的位置。 4. Build 打包 Right click in the Project windows. And, create a DIYDataBuildAssemble 右键项目窗口。然后，创建 DIYDataBuildAssemble Add DIY equipment generated in Step.2 into BuildMap. 将你在步骤.2 中生成的 DIY 配件加入到打包文件中。 Add this file to your ModBuildPipline. And you can package it. 将此文件添加到你的 ModBuildPipline 文件中，即可正常打包。"
  },
  "manual/tutorial/12. Project Link 项目下载地址.html": {
    "href": "manual/tutorial/12. Project Link 项目下载地址.html",
    "title": "12. Project Link 项目下载地址 | Panzer War Document",
    "keywords": "12. Project Link 项目下载地址 GitHub: https://github.com/Doreamonsky/Panzer-War-Lit-Mod/ 国内源： https://doreamonsky-01.coding.net/public/PanzerWar-Mods/PanzerWar-Mods/git/files"
  },
  "manual/tutorial/13. Destructive Objects 可破坏物体.html": {
    "href": "manual/tutorial/13. Destructive Objects 可破坏物体.html",
    "title": "13. Destructive Objects 可破坏物体 | Panzer War Document",
    "keywords": "13. Destructive Objects 可破坏物体 Model Replacement 模型替换 Structure 结构 The structure of building should like this picture. You should have the same naming. 建筑结构要如图所示。你需要拥有相同的命名。 MainModel 主模型 Then，put the origin model under MainModel (Without any collision) 随后，在 MainModel 下放置自己的初始模型。 （不包含任何碰撞） DestroyedModel 击毁模型 Put the destroyed model under DestroyedModel (Without any collision) 在 DestroyedModel 下放置自己的破损模型。（不包含任何碰撞） CollisionTrigger 碰撞触发器 Put empty gameobject with collider component（Trigger toggle on） under CollisionTrigger 在 CollisionTrigger 下放置自己的带 Collider 组件（将 Trigger 勾上）的空物体。 Parent Transform Setting 父节点设置 Follow this picture to add rigidbody and building component to the prefab. 如图添加组件并设置如图一样的参数。"
  },
  "manual/tutorial/14. Upload to Steam Workshop 上传 Steam 创意工坊.html": {
    "href": "manual/tutorial/14. Upload to Steam Workshop 上传 Steam 创意工坊.html",
    "title": "14. Upload to Steam Workshop 上传 Steam 创意工坊 | Panzer War Document",
    "keywords": "14. Upload to Steam Workshop 上传 Steam 创意工坊 You should read this doc before get started. This will help you to update mods on multi-platform without re-importing all your resources. 在开始之前，你应该了解这个文章，方便你进行多平台的同时更新。（国内创意工坊需要加速器来访问...） 4. Multi-Platform Build 多平台打包 Preparation 准备 You need to build the pipline. And you get a folder with mod resources. 首先，你要打包 Mod 的 Package 获得如下图的模组资源目录。 Mod Upload Tool 模组上传工具 Select mod upload tool from Steam. 从 Steam 选择模组上传工具。 Or from mod project 或者 从模组工程的菜单打开 Create your mod package 创建你的模组包 Input the mod pack file name to create item 输入你的模组名称，然后点击 Create Item 按钮 Copy your mod resources. 拷贝你的模组资源 Copy the prepared mod resources（PanzerWar-Mods\\UnityProject\\Build\\Mod-BuildPipline\\StandaloneWindows64\\StandaloneWindows64_ _ShipSteam） to new folder: SteamLibrary\\steamapps\\common\\Cry of War\\Mod-PW-Uploader\\WorkshopContent<Your item name> 拷贝你准备好的模组资源（PanzerWar-Mods\\UnityProject\\Build\\Mod-BuildPipline\\StandaloneWindows64\\StandaloneWindows64_<你的 ModPack 名称>_ShipSteam）到这个新文件夹r: SteamLibrary\\steamapps\\common\\Cry of War\\Mod-PW-Uploader\\WorkshopContent<你的Item名称> Preview Icon 预览图片 Preview icon should an jpg or png image file size less than 1mb. 预览图片应该是一张 jpg 或者 png，其大小应该小于 1mb. You can click pick icon to select icon faster. 你可以通过点击 Pick Icon 按钮，选择图片。 Basic Information 基础信息 You need to input title and description. 你需要输入标题与简介。 Tag 标签 You can select the following tag to help sorting. Vehicle,Skin,Voice,Map 你可以选择标签如： Vehicle,Skin,Voice,Map 方便进行分类 Visibility 可见性 Visibility will decide who can see your workshop item. Private means only you can see it. Friend means only you and friends can see it. Public means everyone can see it. 可见性会决定谁可以看到你的创意工坊内容。 Private 表示只有你可以看见。Friend 表示你和你的好友可以看到。Public 表示所有人可以看到。 Click Submit to upload 点击提交以上传 F&Q 常见问题 1. You need to accept the Steam Workshop legal agreement for this game before you can upload items! Visit： [https://steamcommunity.com/id/ /myworkshopfiles/](https://steamcommunity.com/id/ /myworkshopfiles/) and accept the legal agreement. Replace in url to your steam id 访问 [https://steamcommunity.com/id/ /myworkshopfiles/](https://steamcommunity.com/id/ /myworkshopfiles/) 然后同意协议，将链接中的 改成你的 Steam ID."
  },
  "manual/tutorial/15.Upgrade 2021 Editor 升级 2021 编辑器.html": {
    "href": "manual/tutorial/15.Upgrade 2021 Editor 升级 2021 编辑器.html",
    "title": "15.Upgrade 2021 Editor 升级 2021 编辑器 | Panzer War Document",
    "keywords": "15.Upgrade 2021 Editor 升级 2021 编辑器 Editor Version 编辑器版本 Unity Edtior version : 2021.3.9f1 Unity 编辑器版本：2021.3.9f1（国际版，不带c结尾） Download: Input url unityhub://2021.3.9f1/ad3870b89536 into your web browser to download official unity from hub. 下载方式: 在游览器内输入 unityhub://2021.3.9f1/ad3870b89536 从 hub 下载官方版本的 Unity."
  },
  "manual/tutorial/16.Voice Pack 语言包.html": {
    "href": "manual/tutorial/16.Voice Pack 语言包.html",
    "title": "16.Voice Pack 语言包 | Panzer War Document",
    "keywords": "16.Voice Pack 语言包 3. VoicePack As Practice 语言包实战"
  },
  "manual/tutorial/17-1. 工具总结.html": {
    "href": "manual/tutorial/17-1. 工具总结.html",
    "title": "17-1. 工具总结 | Panzer War Document",
    "keywords": "17-1. 工具总结 建模工具 Blender Steam 即可下载 https://www.blender.org/ 参考图片 PureRef https://www.pureref.com/ PBR 贴图绘制工具 Substance Painter （要钱的 steam 200多） 逆向工具 用于解包其他游戏，学习其他游戏的美术，与音效等 坦克世界模型导出工具 https://github.com/mikeoverbay/TankExporter 坦克世界模型贴图处理工具 https://github.com/mikeoverbay/Swizzler wwise 音效解包（可用于坦克世界等） https://github.com/Vextil/Wwise-Unpacker WOTB dvpl 逆向 https://github.com/Maddoxkkm/dvpl_converter 坦克世界地图逆向工具 https://github.com/mikeoverbay/nuTerra"
  },
  "manual/tutorial/17-2. 逆向案例 遮罩贴图.html": {
    "href": "manual/tutorial/17-2. 逆向案例 遮罩贴图.html",
    "title": "17-2. 逆向案例 遮罩贴图 | Panzer War Document",
    "keywords": "17-2. 逆向案例 遮罩贴图 以下内容仅用于学习交流，禁止用于商业。 Unity URP 用一张贴图，三个通道对应了三个值，而 WOT 用了两张贴图，所以制作了一个工具将两张贴图的通道信息转化为 Unity URP 支持的通道信息。 工具准备 模型导出工具 https://github.com/mikeoverbay/TankExporter 模型贴图处理工具 https://github.com/mikeoverbay/Swizzler 贴图准备 格式转为 png 环境准备 安装 Python3 安装 Python 包 opencv2 numpy 可参考如下命令行 pip install opencv-python -i https://mirrors.aliyun.com/pypi/simple/ pip install numpy -i https://mirrors.aliyun.com/pypi/simple/ 脚本，打开txt，贴入以下内容，储存为 wgRemap.py # WG 贴图逆向 转为 URP / HDRP Mask 贴图 import os import argparse import cv2 import numpy as np parser = argparse.ArgumentParser(description=\"Wargaming Texture Remap\") parser.add_argument('-d', '--dir', default=\".\") args = parser.parse_args() for root, dirs, files in os.walk(args.dir, topdown=True): for name in files: file = os.path.join(root, name) if \"GMM\" in file and \"meta\" not in file: img = cv2.imread(file) y, x, z = img.shape[0:3] # 获得的是高度、宽度、通道 print(file,\"size:\",y,x) aoImg = cv2.imread(file[:-7] + \"AO.png\") if aoImg is not None: # 尝试同目录下寻找 AO 贴图 aoImg = cv2.resize(aoImg,(x,y)) _,ao,_ = cv2.split(aoImg) else: # Ops... 没有找到 AO 贴图 用单位矩阵代替 ao = np.ones((y,x,1),dtype=np.uint8) b,g,r = cv2.split(img) # g -> Metallic r -> Smoothness empty = np.zeros((y,x,1),dtype=np.uint8) # Unity Mask # Red Metallic # Green Occlusion # Blue Detail mask # Alpha Smoothness channel_list = [empty,ao,g,r] new_image = cv2.merge(channel_list) cv2.imwrite(name, new_image) print(name + \" is write to disk\") 执行案例： python .\\wgRemap.py -d H:\\StreamLine-Process\\R49_SU100Y\\ 贴图配置 切换 Shader 为 SRP-Vehicle-Camouflage 将 AM 放在 BaseMap 将 ANM 放在 BumpMap 将 GMM 放在 MaskMap 4. Mask 贴图编辑器内预览 实际效果"
  },
  "manual/tutorial/17-3. WT 贴图转换.html": {
    "href": "manual/tutorial/17-3. WT 贴图转换.html",
    "title": "17-3. WT 贴图转换 | Panzer War Document",
    "keywords": "17-3. WT 贴图转换 自己解包得到的贴图的流程 贴图 一张 ao 一张 n # War Thunder 完整原始贴图逆向 转为 URP / HDRP Mask 贴图 import os import argparse import cv2 import numpy as np import math parser = argparse.ArgumentParser(description=\"War Thunder Texture Remap\") parser.add_argument('-d', '--dir', default=\".\") args = parser.parse_args() for root, dirs, files in os.walk(args.dir, topdown=True): for name in files: file = os.path.join(root, name) if \"_n\" in file and \"meta\" not in file: img = cv2.imread(file,cv2.IMREAD_UNCHANGED) y, x, z = img.shape[0:3] # 获得的是高度、宽度、通道 print(file,\"size:\",y,x) aoImg = cv2.imread(file[:-6] + \"_ao.png\") if aoImg is not None: # 尝试同目录下寻找 AO 贴图 aoImg = cv2.resize(aoImg,(x,y)) _,ao,_ = cv2.split(aoImg) else: # Ops... 没有找到 AO 贴图 用单位矩阵代替 ao = np.ones((y,x,1),dtype=np.uint8) b,g,r,a = cv2.split(img) # b -> Metallic r -> Smoothness # normal_z = np.sqrt(1-(normal_x*normal_x+normal_y*normal_y)) # Unity Mask # Red Metallic # Green Occlusion # Blue Detail mask # Alpha Smoothness black = np.zeros((y,x,1),dtype=np.uint8) channel_list = [black,ao,b,r] new_image = cv2.merge(channel_list) cv2.imwrite(\"mask_\"+name, new_image) print(name + \" is write to disk\") 网站下载得到的贴图的流程 贴图 一张 specular 的反射贴图 转换后贴图 脚本工具 # WT 贴图逆向 转为 URP / HDRP Mask 贴图 import os import argparse import cv2 import numpy as np from pathlib import Path parser = argparse.ArgumentParser(description=\"War Thunder Texture Remap\") parser.add_argument('-d', '--dir', default=\".\") args = parser.parse_args() for root, dirs, files in os.walk(args.dir, topdown=True): for name in files: file = os.path.join(root, name) if \"_n_s\" in file and \"meta\" not in file: img = cv2.imread(file) y, x, z = img.shape[0:3] # 获得的是高度、宽度、通道 print(file,\"size:\",y,x) b,g,r = cv2.split(img) # empty = np.zeros((y,x,1),dtype=np.uint8) full = np.ones((y,x,1),dtype=np.uint8) * 255 # Unity Mask # Red Metallic # Green Occlusion # Blue Detail mask # Alpha Smoothness channel_list = [empty,full,empty,r] new_image = cv2.merge(channel_list) # cv2.imwrite(name, new_image) cv2.imwrite(Path(name).stem + \".png\", new_image) print(name + \" is write to disk\") 脚本用法 python .\\wtRemap.py -d D:\\Projects\\test\\t-90\\ 4. Mask 贴图编辑器内预览"
  },
  "manual/tutorial/17-4. Mask 贴图合并.html": {
    "href": "manual/tutorial/17-4. Mask 贴图合并.html",
    "title": "17-4. Mask 贴图合并 | Panzer War Document",
    "keywords": "17-4. Mask 贴图合并 购买的模型如果 PBR 贴图是 metallic 与 roughness 两张贴图，则需要合并成一张贴图才可以使用。 贴图转换工具 要将roughness和metallic贴图合并成Unity可用的mask贴图，您可以使用以下几款图像处理软件来实现： Adobe Photoshop： 在Photoshop中，您可以将roughness和metallic贴图分别放置在两个不同的图层上。将roughness贴图的信息存储在新mask贴图的红色通道，将metallic贴图的信息存储在绿色通道。导出新的mask贴图，并在Unity中应用。 GIMP（免费开源图像编辑器）： 与Photoshop类似，您可以在GIMP中将roughness和metallic贴图放置在不同的图层上。将roughness贴图的信息存储在新mask贴图的红色通道，将metallic贴图的信息存储在绿色通道。导出新的mask贴图，并在Unity中应用。 Substance Painter（专业的3D纹理绘制软件）： 在Substance Painter中，您可以将roughness和metallic贴图导入，然后在Substance Painter中，您可以将roughness和metallic贴图导入，然后将它们分别应用到相应的通道。首先创建一个新的填充图层，并在属性面板中为roughness和metallic通道分别分配对应的贴图。接着，创建一个新的导出预设，将红色通道设置为roughness，绿色通道设置为metallic，不需要的通道可以禁用。最后，导出新的mask贴图，并在Unity中应用。 Quixel Mixer（实时纹理编辑器）： 在Quixel Mixer中，新建一个材质，将roughness和metallic贴图导入到对应的通道。然后，创建一个导出预设，将红色通道设置为roughness，绿色通道设置为metallic，不需要的通道可以禁用。导出新的mask贴图，并在Unity中应用。 Krita（免费开源数字绘画软件）： 在Krita中，创建一个新的文档，将roughness和metallic贴图分别导入到不同的图层。然后将图层设置为“红色”和“绿色”通道混合模式。接下来，创建一个新的导出预设，将红色通道设置为roughness，绿色通道设置为metallic。导出新的mask贴图，并在Unity中应用。 这些软件都可以帮助您将roughness和metallic贴图合并成一个Unity可用的mask贴图。根据您的需求和熟悉程度，您可以选择其中的任何一个软件进行操作。 PS 中合并通道 在Adobe Photoshop中，将roughness和metallic贴图合并为Unity可用的mask贴图的步骤如下： 打开Adobe Photoshop，点击“文件”>“打开”，分别打开您的roughness贴图和metallic贴图。 选择roughness贴图，按Ctrl+A（或Cmd+A在Mac上）全选图像，然后按Ctrl+C（或Cmd+C在Mac上）复制图像。 切换到metallic贴图，点击“图像”>“模式”>“RGB颜色”，确保图像处于RGB模式。 点击“图层”>“新建”>“新建图层”，创建一个新的图层。 选择新创建的图层，按Ctrl+V（或Cmd+V在Mac上）粘贴刚刚复制的roughness贴图。 选中新粘贴的图层，点击“图像”>“调整”>“去色”，将图像转换为灰度。 在图层面板中，将新粘贴的图层的混合模式设置为“红色通道”。 点击原始metallic图层，然后点击“图像”>“调整”>“去色”，将图像转换为灰度。 导出新的mask贴图。点击“文件”>“导出”>“另存为”，选择图像格式（如PNG、TGA等），确保“Alpha通道”未选中，然后保存。 现在，您已经成功地将roughness和metallic贴图合并成一个mask贴图，其中红色通道存储了roughness信息，绿色通道存储了metallic信息。您可以将这个新的mask贴图导入Unity，并将其应用到相应的材质。 Mixer 中合并通道 下载地址：https://quixel.com/mixer 在Quixel Mixer中合并roughness和metallic贴图为一个mask贴图的教程如下： 打开Quixel Mixer，创建一个新项目。 在层栏中，点击 \"+\" 按钮创建一个新的填充层（Fill Layer）。 选中刚创建的填充层，在右侧属性面板中找到“材质”部分。这里有几个通道，包括 Albedo、Metallic、Roughness 等。默认情况下，这些通道可能已经启用。您需要根据需求禁用不需要的通道。 点击“Roughness”通道旁边的文件夹图标，然后从您的计算机中选择roughness贴图。贴图将自动应用在通道上。 接下来，点击“Metallic”通道旁边的文件夹图标，然后从您的计算机中选择metallic贴图。贴图将自动应用在通道上。 现在，您已经将roughness和metallic贴图添加到了同一个填充层上。接下来，您需要设置导出预设以正确导出新的mask贴图。 点击右上角的“导出”按钮。在弹出的导出窗口中，您可以选择自定义导出预设。 创建一个新的预设，将红色通道设置为roughness，绿色通道设置为metallic。禁用其他不需要的通道。 保存导出预设，然后选择输出分辨率、文件格式（如 PNG、TGA 等）和输出文件夹。点击“导出”按钮开始导出过程。 现在您已经成功地将roughness和metallic贴图合并成一个mask贴图。其中红色通道存储了roughness信息，绿色通道存储了metallic信息。您可以将这个新的mask贴图导入Unity，并将其应用到相应的材质。 Quixel Mixer提供了一种直观的方式来处理和合并纹理贴图，使您能够以实时的方式预览结果并在导出前对其进行调整。这对于游戏和视觉效果行业的专业人士来说是一个非常实用的工具。 4. Mask 贴图编辑器内预览"
  },
  "manual/tutorial/17-5. Mask 贴图编辑器内预览.html": {
    "href": "manual/tutorial/17-5. Mask 贴图编辑器内预览.html",
    "title": "17-5. Mask 贴图编辑器内预览 | Panzer War Document",
    "keywords": "17-5. Mask 贴图编辑器内预览 Unity 中使用贴图 使用此 Shader Shader Graphs/SRP-Vehicle-Camouflage 在编辑器内预览 PBR 效果： 编辑 Shader 点击 Edit 从 Unlit 改为 Lit 然后点击 Save，Shader 会重新编译。 材质球勾选 Enable Mask 的选项。 在预览完毕后，务必把 Material 改回 unlit。 否则会导致打包大小变大 预览效果 注意事项 在预览完毕后，务必把 Material 改回 unlit。 否则会导致打包大小变大。 在决定版运行时，会自动识别 Mask 贴图，并使用 PBR 的材质球。"
  },
  "manual/tutorial/18-1. 持续构建 （脚本化构建模组）.html": {
    "href": "manual/tutorial/18-1. 持续构建 （脚本化构建模组）.html",
    "title": "18-1. 持续构建 （脚本化构建模组） | Panzer War Document",
    "keywords": "18-1. 持续构建 （脚本化构建模组） 创建持续构建流程，可以更快的进行模组文件的迭代更新，高度自定义打包哪些模组，拷贝至什么文件夹，无需手动操作，也无需打开 Unity 点击任何按钮。 持续构建需要使用 2022 分支项目 2022/5/8 日更新 1. 创建一个 manifest 描述 json modNames 为一个数组，填写你要构建的模组包列表。 copyInfo 会根据平台，将最终生成的文件拷贝到指定目录。(安卓工程则只拷贝安卓文件，Windows 工程则只拷贝 Windows 文件) isPackage 为 true 则拷贝 modpackage 为 false 则拷贝 buildpipline 原始资源（传 Steam 创意工坊用） 案例 TestBuildPipline.json 构建模组包 BuildPipline-Lua-ModeRes 与 BuildPipline-Vehicles ，生成 modpackage 文件。 将安卓平台资源拷贝至 D:/Projects/Android-Ship 将电脑平台资源拷贝至 D:/Projects/Windows-Ship { \"infos\": [ { \"modNames\": [ \"BuildPipline-Lua-ModeRes\", \"BuildPipline-Vehicles\" ], \"copyInfo\": [ { \"platform\": \"Android\", \"dstDir\": \"D:/Projects/Android-Ship\" }, { \"platform\": \"StandaloneWindows64\", \"dstDir\": \"D:/Projects/Windows-Ship\" } ], \"isPackage\" : true } ] } 2. CI 脚本 调用 ShanghaiWindy.Editor.Utility_BuildPipline.DoBuildPiplineManifest 传入 -config 参数 (manifest 路径) 案例 BuildPiplineCI.sh projectDir 为你的 Unity 项目路径 manifestDir 为 步骤.1 中的 manifest 的 json 文件的路径 editorDir 为你的 Unity 安装路径 logPath 为你的打包日志输出路径 （Windows 上执行 bash，可安装一个 git，然后通过 git bash 执行以下脚本） projectDir=\"D:\\Projects\\PanzerWar-URP\" manifestDir=\"D:\\Projects\\PanzerWar-URP\\CLI\\BuildPiplineCI\\TestBuildPipline.json\" editorDir=\"H:\\UnityEditor\\2021.3.0f1\\Editor\\Unity.exe\" logPath=\"D:\\Projects\\PanzerWar-URP\\CLI\\BuildPiplineCI\\log.txt\" $editorDir -projectPath $projectDir -batchmode -quit -executeMethod ShanghaiWindy.Editor.Utility_BuildPipline.DoBuildPiplineManifest -config $manifestDir -logFile $logPath 完整的构建案例，可直接查看 PanzerWar-Mods\\UnityProject\\BuildPiplineCI 文件夹， **调整 **BuildPiplineCI.sh 为自己项目的路径，用 git bash 方式执行即可。 3. Jenkins 集成 Jenkins 安装与配置教程 4. 特殊情况 1. BuildPipline 位于 ModManager 的子文件夹 这种情况，需要 modNames 设置名称时候，也要加上前缀 比如位于 Assets/ModManager/AAAA/BBBB/Vehicle-XXX 则填写 AAAA/BBBB/Vehicle-XXX"
  },
  "manual/tutorial/18-2. Jenkins 安装与配置教程.html": {
    "href": "manual/tutorial/18-2. Jenkins 安装与配置教程.html",
    "title": "18-2. Jenkins 安装与配置教程 | Panzer War Document",
    "keywords": "18-2. Jenkins 安装与配置教程 1. 安装 Jenkins： Jenkins 是一款开源的自动化构建工具，你需要先安装 Jenkins。你可以从 Jenkins 的官方网站 https://www.jenkins.io/download/ 上下载适合你系统的 Jenkins 安装包，按照安装向导进行安装。安装成功后，你可以通过在浏览器中输入 http://localhost:8080/ 访问 Jenkins。 面向小白的详细的安装教程： 在你的服务器或本地计算机上打开一个浏览器，并转到 Jenkins 官方网站：https://www.jenkins.io/download/。 在 Jenkins 的下载页面上，你可以看到不同操作系统的 Jenkins 安装包。选择适合你的操作系统的 Jenkins 安装包下载链接，比如 Windows 系统可以选择 Windows 的 MSI 安装包。 下载完成后，双击安装包打开安装向导。按照向导的提示，选择安装目录、安装类型等设置。默认情况下，Jenkins 会安装在 C:\\Program Files (x86)\\Jenkins 目录下。 在安装过程中，你需要选择安装 Jenkins 的运行环境。你可以选择安装 Jenkins 的 Windows 服务或者作为一个普通的 Windows 程序运行。对于大多数情况，我们建议安装 Jenkins 的 Windows 服务，以便在系统重启后能够自动启动 Jenkins。 安装完成后，Jenkins 会启动并监听默认的 HTTP 端口 8080。你可以在浏览器中输入 http://localhost:8080/ 访问 Jenkins 的 Web 界面。如果你安装了 Jenkins 的 Windows 服务，那么 Jenkins 会在后台自动运行，并且你可以在 Windows 服务列表中找到它，以便在需要的时候手动启动、停止或重启 Jenkins。 在首次启动 Jenkins 时，你需要输入管理员帐号的用户名和密码。Jenkins 会要求你选择安装插件，你可以选择推荐的插件或者手动选择需要安装的插件。安装插件需要一些时间，请耐心等待。 安装完成后，你会看到 Jenkins 的主界面。现在你已经成功安装了 Jenkins，可以开始使用它来构建你的项目。 2. 安装 Unity3D： 在 Jenkins 中打包 Unity3D 项目之前，需要在 Jenkins 服务器上安装 Unity3D。确保安装了适合你项目的 Unity3D 版本。 Unity Engine Requirement Unity 引擎版本要求 3. 安装 Unity3D 插件： 在 Jenkins 中打包 Unity3D 项目，需要安装 Unity3D 插件。打开 Jenkins，进入“插件管理”页面，搜索“Unity3D”并安装。安装成功后，你需要重启 Jenkins。 4. 配置 Jenkins 项目： 进入 Jenkins 项目的“配置”页面。在设置 Unity3D 安装目录路径。 5. 创建 Jenkins 项目： 在 Jenkins 中创建一个新项目。进入 Jenkins 主页，点击“新建项目”按钮，选择“自由风格软件项目”并输入项目名称。 增加一个构建步骤： 选择刚刚配置的 Unity，然后设置如下打包命令 -projectPath <项目路径> -batchmode -quit -executeMethod ShanghaiWindy.Editor.Utility_BuildPipline.DoBuildPiplineManifest -config <配置文件路径>"
  },
  "manual/tutorial/20. 地图工坊素材构建.html": {
    "href": "manual/tutorial/20. 地图工坊素材构建.html",
    "title": "20. 地图工坊素材构建 | Panzer War Document",
    "keywords": "20. 地图工坊素材构建 1. 暂时只支持 URP 建议新开一个模组工程， 然后打开 Package Manager 安装 Universal RP 2. 素材准备 将模型拖入场景，设置坐标 0，0，0。旋转 0，0，0。 添加 碰撞 （Box Collider / Mesh Collider） 模型的层，全部设置为 Building （设置父物体为 Building 有选项勾选全部子物体） 将此模型拖回 Project 窗口，就变成了 Prefab （预制体） 3. 创建数据文件 在已创建的 Prefab 上右键，选择 PropFromSelection，选择保存的路径（请选择在项目内的路径）。 找到创建出来的数据文件，修改渲染类型为 URP，点击更新预制体与更新缩略图 4. 打包 创建 DIYMapDataBuildAssemble，点击自动设置所有打包，将创建的 DIYMapDataBuildAssemble 加到 ModBuildPipline 中。即可正常打包。同时，可以将重复的资源加入到 LinkedObject，勾选加载依赖资源，勾选共享相同材质球，共享相同模型，则会减小模组包体大小。"
  },
  "manual/tutorial/21. UV 自动化工具.html": {
    "href": "manual/tutorial/21. UV 自动化工具.html",
    "title": "21. UV 自动化工具 | Panzer War Document",
    "keywords": "21. UV 自动化工具 推荐工具 https://www.uv-packer.com/ 有效提高 UV Sheet 的使用率 安装方法： 打开 https://www.uv-packer.com/blender/ 下载 Plugin ，与 Program 。安装完 Plugin，将 Program 放置于 Plugin 目录 Program: https://www.uv-packer.com/wp-content/uploads/UV-Packer-Blender-Program_1.01.00.zip Plugin: https://github.com/3d-io/uvpacker-blender-addon/releases"
  },
  "manual/tutorial/22. 战斗服搭建.html": {
    "href": "manual/tutorial/22. 战斗服搭建.html",
    "title": "22. 战斗服搭建 | Panzer War Document",
    "keywords": "22. 战斗服搭建 新版服务器会自动挂载至服务器列表，只需运行服务器，玩家即可加入。 搭建流程如下： 服务器 购买 Cent OS 系统的服务器，或者自己搭建 Cent OS 的虚拟机， 安装流程 打开终端 或者用 VS Code 远程 yum install git -y yum install git-lfs -y git clone https://gitlab.waroftanks.cn/Doreamonsky/Panzer-War-Server.git cd Panzer-War-Server git lfs pull chmod +x Linux_Core.x86_64 nohup ./Linux_Core.x86_64 -clientType Server -batchmode -nographics > server.log 2>&1 & 如果是决定版服务器，第二行的地址改为 https://gitlab.waroftanks.cn/Doreamonsky/Panzer-War-URP-Server.git 运维流程 自启动 将服务器的启动流程写入 /etc/rc.d/rc.local，保证每次服务器重启后，战斗服能自动启动。 命令可参考 nohup /root/Panzer-War-Server/Linux_Core.x86_64 -clientType Server -batchmode -nographics > server.log 2>&1 & 自重启 为了防止服务器内存泄漏，建议设置服务器定时重启 设置凌晨2点重启服务器 crontab -e 0 2 * * * /usr/sbin/reboot 战斗服配置 战斗配置存储为 yaml 格式，启动服务器时候，带参数 -conf <Yaml 配置文件路径> 即可读取自定义战斗服配置参数 serverName: Dedicated Server 独立服务器 mapName: RAND playerCount: 32 botCount: 2 battleRank: 5 battleRankRange: 2 battleLength: 420 isMod: false isModule: false isPVE: false isAutoAim: true isFlight: false shellStrength: High 案例： nohup /root/Panzer-War-Server/Linux_Core.x86_64 -clientType Server -conf /root/Panzer-War-Server-Conf/classic-old-desert.yaml -batchmode -nographics > server.log 2>&1 & serverName: 老沙漠 经典永传 mapName: Desert-Old playerCount: 32 botCount: 2 battleRank: 4 battleRankRange: 2 battleLength: 420 isMod: false isModule: false isPVE: false isAutoAim: true isFlight: false shellStrength: High 多组战斗服配置 单服务器，配置多个 yaml 同时启动服务器。 批量启动战斗服 #!/bin/bash confs=(\"classic-old-desert.yaml\" \"yukon-flight.yaml\" \"modern-war.yaml\") # 配置名称 数组，可任意额外增加配置 serverPath=/root/Panzer-War-Server/Linux_Core.x86_64 # 服务器路径 args=\"-clientType Server -batchmode -nographics\" # 默认参数 log=/root/server.log for conf in ${confs[@]} do confUrl=/root/Panzer-War-Server-Conf/$conf # 配置绝对路径 nohup $serverPath $args -conf $confUrl > /root/server_$conf.log 2>&1 & # 启动服务器 printf \"conf %s is loaded. \" $confUrl sleep 1s # 等待1秒 done 批量关闭战斗服 ps -ef | grep Panzer-War | grep -v grep | awk '{print $2}' | xargs kill -9"
  },
  "manual/tutorial/23. 模型不显示.html": {
    "href": "manual/tutorial/23. 模型不显示.html",
    "title": "23. 模型不显示 | Panzer War Document",
    "keywords": "23. 模型不显示 1. Shader 不兼容 用其他的渲染管线的 Shader 绘制 Material 2. 渲染层级错误 通过点击对应的物体，选择 如图按钮，修复渲染层级"
  },
  "manual/tutorial/25. Runtime Editor Debugger 编辑器实时调试功能.html": {
    "href": "manual/tutorial/25. Runtime Editor Debugger 编辑器实时调试功能.html",
    "title": "25. Runtime Editor Debugger 编辑器实时调试功能 | Panzer War Document",
    "keywords": "25. Runtime Editor Debugger 编辑器实时调试功能 To simplify mod debugging, you can directly run mods in unity editor. 调试 Mod 一直是一件繁琐的事情，所以为了简化 Mod 开发流程，增加了编辑器内直接加载 Mod 的功能。 Legal Policy 法律合规 This project is only for debugging,you should not re-ship this project. Copy right belongs Wang Shijiang (ShanghaiWindy) 本工程仅用于调试，禁止用于二次打包。软件著作权归王诗江所有。 Usage 使用方法 Package Mods 打包模组 Click Build Linked Objects to AssetBundle 点击 编译相关资源 打包你的载具模组 Open Scene and Run 打开场景并运行 场景位于： Packages/com.shanghaiwindy.middlelayer/Tools/RuntimeDebugger/VehiclePlayground.unity 如图所示 选择你需要调试的载具进行使用"
  },
  "manual/tutorial/26-1. New Sound System 新音频系统.html": {
    "href": "manual/tutorial/26-1. New Sound System 新音频系统.html",
    "title": "26-1. New Sound System 新音频系统 | Panzer War Document",
    "keywords": "26-1. New Sound System 新音频系统 The sound system has been improved, now you can use Fmod to customize game sounds. Assets no longer need to be imported into Unity. You only need to provide event name for Unity. 游戏的音频的系统已得到改进，现在可使用第三方工具 Fmod，进行游戏音频的自定义。在游戏侧不再需要导入音频文件，只需要提供 fmod 的事件名称，则可以播放音效。 Get Start 开始 Before start, you will need install Fmod Studio to make sounds and build sound banks. 在开始之前，你需要额外安装 Fmod Studio 来制作音效以及创建 sound banks. 1. Installation 安装 2. Setup Fmod Proj 设置 Fmod 工程 Practices 实战 2. VoicePack As Practice 语言包实战"
  },
  "manual/tutorial/26-2. Installation 安装.html": {
    "href": "manual/tutorial/26-2. Installation 安装.html",
    "title": "26-2. Installation 安装 | Panzer War Document",
    "keywords": "26-2. Installation 安装 1. Download 下载 Please download 2.02.09 version from fmod website (https://www.fmod.com/download#fmodstudio) You will need to register an account to download and it is free to download. 请从 fmod 官网（https://www.fmod.com/download#fmodstudio）下载 2.02.09 版本，你需要注册一个账号来下载，并且是免费的。也可以通过解压以下的 zip 文件，得到安装包。 fmodstudio20209win64-installer.zip 2. Install 安装"
  },
  "manual/tutorial/26-3. Setup Fmod Proj 设置 Fmod 工程.html": {
    "href": "manual/tutorial/26-3. Setup Fmod Proj 设置 Fmod 工程.html",
    "title": "26-3. Setup Fmod Proj 设置 Fmod 工程 | Panzer War Document",
    "keywords": "26-3. Setup Fmod Proj 设置 Fmod 工程 Make sure you have finished this step. 确保你已经完成了此步骤。 1. GetStarted 项目初始化 1. Import to FMod Studio 导入 FMod Studio Create a empty folder name it as what ever you want. The name is FModUGCFolder in our demonstrate. 创建一个任意名字的空文件夹，在本次演示中，我使用了 FModUGCFolder 的名称作为文件夹名称 2. Unity Editor Settting Unity 编辑器设置 When you see all the events, it means everything is imported correctly. 当你看到你的事件名称，这就表明工程已正常设置"
  },
  "manual/tutorial/26-4. VoicePack As Practice 语言包实战.html": {
    "href": "manual/tutorial/26-4. VoicePack As Practice 语言包实战.html",
    "title": "26-4. VoicePack As Practice 语言包实战 | Panzer War Document",
    "keywords": "26-4. VoicePack As Practice 语言包实战 As an example,this chapter will introduce the events in fmod and configs for game. 以语言包为例，讲解从 Fmod 的事件 以及 游戏的音频配置。 1. Import Assets 导入资源 Create a subfolder in crew folder, drag your voice assets into this folder. 在 crew 下创建一个文件夹，然后将音频文件拖入此文件夹。 2. Create Events 创建事件 Create a subfolder in crew/ground. Select a set of existing voice event. Press Ctrl + D to duplicate it and drag it into newly created subfolder. Change the suffix from cn to whatever you want. 在 crew/ground 下创建一个文件夹，选中一份现有的事件，按 ctrl + d 复制并拖入刚刚创建的文件夹，更改事件的结尾名称 将 cn 改成你想要的标识。如图中 cn 改为 jp Select your event. Delete the original sounds from playlist and add your sounds into playlist one by one. 选中事件，将 Playlist 中的音频替换为你的音频。可以删除原有音频，然后将你的音频拖入其中即可。 3. Check Mixer 检查 Mixer Press Ctrl + 2 into Mixer window. Be sure the newly created events are under dialogs group. 按 Ctrl + 2 进入 Mixer 窗口，查看新创建的事件是否在 dialogs 组中 4. Create Sound Bank 创建 SoundBank 在 Banks 中创建一个新的 Bank， Then build all platforms. It will generate bank file at PanzerWar-Mods\\PanzerWar-FMod-UGC-Project\\Build. 然后，打包所有平台的 banks 文件。然后 bank 文件会在 PanzerWar-Mods\\PanzerWar-FMod-UGC-Project\\Build 创建。 Then the work in Fmod Studio is finished. Let's go back to Unity project. 然后，Fmod 侧的工作就结束了，让我们回到 Unity 工程。 5. Create Config 创建配置 Use the following tool to create config faster. 使用以下工具快速创建配置信息 Create Crew Voice Config 创建成员语言配置 Select the events that you created in fmod in previous step. 将创建的事件名称填入对应类型 Create Bank 创建 Bank Select the bank you created and Refresh bank. And you need refresh bank if you changed the event and added the event. Otherwise, the game will not load bank correctly. 选择你创建的 Bank 并且刷新 Bank。并且，每次新增或者修改事件 ，则需要点击刷新 Bank，否则游戏将无法正确加载 Bank 播放音效。 Create Bank BuildPipline 创建 Bank 打包配置 Select the bank file generated by FMod Studio in step.5 选择在步骤.5 由 FMod Studio 生成的 bank 文件 6. Build Config 打包配置 Then, you can build like other mods. 然后，就能和其他 Mod 一样进行打包即可。"
  },
  "manual/tutorial/26-5. Fmod Profiler.html": {
    "href": "manual/tutorial/26-5. Fmod Profiler.html",
    "title": "26-5. Fmod Profiler | Panzer War Document",
    "keywords": "26-5. Fmod Profiler Profiler 是 FMOD Studio 中的一个实用工具，可以实时查看 Unity 引擎中发生的音频事件、内存使用、CPU 使用等信息。要在 FMOD Studio 的 Profiler 中连接 Unity 引擎，请遵循以下步骤： 打开 FMOD Studio：启动 FMOD Studio 并打开你的音频项目。 打开 Profiler：在 FMOD Studio 的顶部菜单栏中，点击 \"Window\"，然后选择 \"Profiler\"。这将打开 Profiler 窗口。 启动 Unity：确保 Unity 项目已打开，并在 Unity 中加载包含 FMOD 插件的场景。 设置连接：回到 Unity，点击顶部菜单栏中的 \"FMOD\"，然后选择 \"Edit Settings\"。在 Inspector 窗口中，展开 \"Live Update\" 部分，并勾选 \"Enable Live Update\"。确保 \"Live Update Port\" 与 FMOD Studio Profiler 中的端口设置相匹配（默认为 9264）。 激活实时更新：在 FMOD Studio 的 Profiler 窗口中，点击 \"Live Update\" 按钮，确保它已激活。激活后，按钮的背景颜色应为绿色。这将允许 FMOD Studio 与 Unity 引擎实时同步音频数据。 连接 Profiler：现在，回到 FMOD Studio 的 Profiler 窗口。点击录制的圆形按钮 开始调试：现在，可以开始在 Unity 中运行你的场景。在 FMOD Studio 的 Profiler 窗口中，你可以实时查看 Unity 引擎中的音频事件、内存使用、CPU 使用等信息，从而更好地分析和调试音量问题。 检查音效 在 FMOD Studio 的 Profiler 中，可以通过以下方法对比并诊断音量问题： 检查事件的实时音量：在 Profiler 窗口的左侧栏中，可以查看正在播放的音频事件。选中其中一个事件，然后在右侧栏中可以看到该事件的实时音量数据。观察音量数据，检查是否有异常波动或值过低的情况。 使用 Mixer 查看音量：在 FMOD Studio 的顶部菜单栏中，点击 \"Window\"，然后选择 \"Mixer\"。这将打开 Mixer 窗口。在 Mixer 中，你可以查看不同总线的音量以及它们之间的关系。请注意，如果 Profiler 中的 \"Live Update\" 已连接到 Unity，Mixer 也会显示实时音量数据。检查各个总线的音量，以确保它们没有低于预期的值。 监听音频：在 Profiler 的 \"Live Update\" 已连接到 Unity 时，你可以实时收听 Unity 中播放的音频。这样，你可以直接比较 FMOD Studio 和 Unity 中的音频效果，并判断音量是否存在问题。 记录并分析：在 Profiler 窗口中，你可以点击 \"Record\" 按钮开始录制音频性能数据。录制完成后，你可以详细分析音量、CPU 使用、内存使用等数据，找出可能的问题所在。 对比预期效果：如果你有音频效果的预期结果（例如，之前的录音或参考音频），你可以将实时播放的音频与预期结果进行对比。这有助于判断音量是否有问题。 通过这些方法，你可以在 FMOD Studio 的 Profiler 中对比并诊断音量问题。请注意，音量问题可能源于 FMOD 项目设置、音频文件的初始音量、Unity 中的音量设置等多种原因。在诊断问题时，请全面检查各个方面的设置。"
  },
  "manual/tutorial/26-6. Fmod 音效调试工具.html": {
    "href": "manual/tutorial/26-6. Fmod 音效调试工具.html",
    "title": "26-6. Fmod 音效调试工具 | Panzer War Document",
    "keywords": "26-6. Fmod 音效调试工具 在 Packages/com.shanghaiwindy.middlelayer/Tools/RuntimeDebugger/FmodPlayground.unity 目录下， 提供了一个 Fmod 音效调试的场景，此环境与游戏真实环境逻辑保持了一致。可用于快速调试不同距离下，fmod 的音效。 开火音效调试 找到 FmodSoundDebugger 物体，选择 Bullet Sound，拖入自己的开火音效，然后点击运行。 然后你就能听到开火音效的循环播放。可以进入 scene 窗口拖动此物体，改变其距离，比如 z值，就可以测试不同距离下的音效强度。"
  },
  "manual/tutorial/27. Send Mod to Devs for Debugging 发送至模组开发者查问题.html": {
    "href": "manual/tutorial/27. Send Mod to Devs for Debugging 发送至模组开发者查问题.html",
    "title": "27. Send Mod to Devs for Debugging 发送至模组开发者查问题 | Panzer War Document",
    "keywords": "27. Send Mod to Devs for Debugging 发送至模组开发者查问题 如果制作的 Mod 在运行时候遇到问题，则需要导出资产，提供给游戏开发者。 步骤： 需要点击 Vehicle Data 与 BuildPipline 上的导出 Unity Package，将导出的 Unity Package 发送至开发者。 开发者联系方式 QQ: 403036847 Mail: dev@waroftanks.cn"
  },
  "manual/tutorial/28-1. Modder Contribution Plan 共创载具 & 地图项目.html": {
    "href": "manual/tutorial/28-1. Modder Contribution Plan 共创载具 & 地图项目.html",
    "title": "28. Modder Contribution Plan 共创载具 & 地图项目 | Panzer War Document",
    "keywords": "28. Modder Contribution Plan 共创载具 & 地图项目 Repository 项目地址 仓库访问需要申请权限，将邮箱发送给开发者。 Vehicle Repository 模组仓库： https://gitlab.waroftanks.cn/modder/panzer-war-community-mods Sound Repository 音效仓库： https://gitlab.waroftanks.cn/modder/Panzer-War-Fmod Map Repository 地图仓库： https://gitlab.waroftanks.cn/modder/ShanghaiWindyMaps Contribution 合作方式 Use git to pull the project and create your own banch. Then push your branch. The developer will merge your branch to master branch. 使用 git 拉取项目，创建你的分支，然后上传提交。 由开发者合入你的分支。 Tutorial 使用项目教程 Video 视频教程 装甲纷争 模组工程项目下载 使用 与提交修改教程_单机游戏热门视频 装甲纷争 模组工程 编写自定义脚本 以及调整载具数值_哔哩哔哩_bilibili Text 文本教程 1. Install Git 安装 Git 安装 Git 2. Install Toroisegit 安装小乌龟 Git 2. 安装小乌龟 3. Pull Project 拉取项目 Click Git clone after installed Toroisegit. 在安装完小乌龟 Git 后，在菜单栏由 Git Clone... Open our repository and click clone. Copy the https link. 打开我们的项目地址，点击克隆，复制 https 的连接 Paste it into url 输入到 url Fillin the account in our gitlab. 输入在 gitlab 的账号与密码 4. Open the Project 打开项目 The main file is located at Assets/Res/Vehicles/Ground/Data 主要项目的文件位于： Assets/Res/Vehicles/Ground/Data 路径 5. Commit Changes 提交修改 You can view this video 可查看此视频流程 Git 创建提交.mp4 After creating the changes to the project, you need to create your own branch and commit changes. 当自己完成了对工程的修改后，需要创建一个属于你的分支，然后再提交你的修改。 Create the branch. (Right click in the project folder!) 创建分支 （请确保是在项目的文件夹内点击右键） Fill in the branch name. The branch name should be XXX-mod 输入你的分支名称，按照你的修改内容决定分支名称。如：为 xxx 坦克修改了 xxx 内容 Switch to your branch 然后切换到项目分支 Toggle on your changes and commit. If some changes are not modified by yourself. Then do not toggle 勾选自己的修改项，然后点击 commit。 如果看到有文件不是自己修改的，别勾选。 Click Push 点击 Push Confirm the branch name and click ok. 确认下分支名称，然后点击 OK You can push many commits to your branch. As long as the modification is done. You can notify the developer to merge your changes to the game. 你可以在自己创建的分支进行多次的修改提交，在觉得自己的分支修改没问题后，通知开发者合并自己的分支。开发者会检查是否内容可以合入 master 主分支。在修改的内容被合入 master 主分支后，可执行下面一个步骤 回到最新的项目。 6. Sync to the latest 同步项目到最新 After your changes are merged into master. You need to switch back to master and pull the latest project. The master branch contains your changes and others changes. 在自己的分支被合入 master 主分支后，需要切回 master 分支，然后拉取最新工程。此时，工程会包含你的修改，以及一些其他人的修改。 Switch back to master branch. 切回 master 分支 Pull the latest files Pull 拉取最新的文件 Now, the project is the latest. 此时，工程就变成最新的了。若需要在最新的工程进行修改，请重复步骤.5 的提交流程，创建新的分支提交即可。 If some error poped. Then click stash changes and then pull. 若拉取过程中出现了报错，则点击 Stash Changes 按钮，然后再点击 Pull。 After pull then click stash pop 在 Pull 执行完毕后，点击 使用编辑器内 Git 工具 创建分支并提交修改 拉取最新项目 切换回 master 分支，然后点击下载并覆盖。 注意事项 配置文件报错 若存在配置文件显示 Missing，请和开发者反馈是哪个文件。"
  },
  "manual/tutorial/28-2. 上传，命名，美术规范.html": {
    "href": "manual/tutorial/28-2. 上传，命名，美术规范.html",
    "title": "28-2. 上传，命名，美术规范 | Panzer War Document",
    "keywords": "28-2. 上传，命名，美术规范 1. 上传规范 每个分支，都应该尽量少的修改内容。 小到： 以一个坦克或飞机的修改为一个分支。切记，不要在一个分支内，提交大量的载具修改，然后再进行合并，此类合并将无法通过。 2. 命名规范 任何的文件应该以大写字母开头，然后接小写字母如： 任何的文件，都应该有一个清晰明确的名称，而非一串乱码之类的 尽量不要拼错单词 3. 在原本模型上进行修改，应替换 Fbx 而非新增 Fbx 导出新的 fbx，覆盖原本的 fbx 文件。 此步骤可在建模软件导出时候覆盖，或者在文件夹中复制进行覆盖。无法在 Unity 编辑器内直接完成。如果在 fbx 内新增模型，则将新的 fbx 拖入空场景，然后复制新增部分到原本老的预制体内。 切记，不要因为对 fbx 新增一块区域的模型，就只是新增一个 fbx 文件。 会导致 XXX_fix.fbx XXX_fix2.fbx ... 这样的情况，导致项目文件混乱。 4. 法线图与 RGB 图不要用一张，不要设置 Normal 强度 解决方法： 在建模软件里不要将 RGB 图引用给 Normal，也不要设置 Normal 强度 如：Blender 中删除以下节点 以及删除以下节点 5. 避免重复的材质球 重复的材质球指的是 相同的贴图，但是使用了不同的材质球。这个会造成渲染压力的增加。 重复的材质球出现的情况一般是在 Blender 里使用了 ctrl c + ctrl v。 我们建议使用 shift +d 的方式复制物体，以避免创建重复的材质球。 对于已经创建了的重复材质球，则需要手动的在 Blender 里，把引用的材质球都换成相同的，以避免重复。 下拉框可以看目前还有哪些材质有重复，一般重复的材质都会以 .001,.002 结尾。 可以在上面的搜索框，搜索重复的材质名称"
  },
  "manual/tutorial/28-3. DIY 地图工程导入.html": {
    "href": "manual/tutorial/28-3. DIY 地图工程导入.html",
    "title": "28-3. DIY 地图工程导入 | Panzer War Document",
    "keywords": "28-3. DIY 地图工程导入 拉取 DIY 素材 本仓库包含 DIY 地图的美术素材以及 DIY 地图的配置文件。 导入 Yaml 配置是必备的。 使用 git 拉取项目： https://gitlab.waroftanks.cn/modder/ShanghaiWindyMaps 打开 URP 工程场景 确保拉取了默认的 Mod 工程，然后使用 Unity 打开 UnityURPProject 文件夹 导入包 打开 Package Manager，导入本地的 DIY 素材包 选中这两个文件夹下的 package.json 正确安装后，素材和配置都会显示已经装配至工程 导入 DIY 地图的 Yaml，位于游戏的 saves 文件夹下 导入后，可以对场景进行编辑与修改。可以通过打包成 Mod 场景的方式，将此地图发布。 若只是改了位置，也可以选择导出地图的 Yaml ![Z)I}X%YXY9]N)IJ4LLLW{WT.png](./images/20231024_1406136369.png)"
  },
  "manual/tutorial/28-4. 地图共创.html": {
    "href": "manual/tutorial/28-4. 地图共创.html",
    "title": "28-4. 地图共创 | Panzer War Document",
    "keywords": "28-4. 地图共创 首先，确保已经拉取了载具的工程 https://gitlab.waroftanks.cn/modder/panzer-war-community-mods 额外拉取地图，与公共资源的仓库代码 https://gitlab.waroftanks.cn/modder/ShanghaiWindyMaps https://gitlab.waroftanks.cn/modder/ShanghaiWindyPublicResources 如图放置文件夹，三个项目放在相同文件夹下 使用 Unity 打开位于 Panzer-War-Community-Mods 下的 OfficialURPMaps 资源路径 内置地图 Packages/com.shanghaiwindy.urpmaps/Scenes DIY 地图配件 Packages/com.shanghaiwindy.diymapconfigs 上传修改 注意：如果修改了其中的资源，请检查是不是三个文件夹下的资源都改了，还是改了其中一个。务必不要漏掉上传。 请使用小乌龟进行上传，不要使用内置的 git 工具。 注意创建分支。"
  },
  "manual/tutorial/29. 模组贴图组.html": {
    "href": "manual/tutorial/29. 模组贴图组.html",
    "title": "29. 模组贴图组 | Panzer War Document",
    "keywords": "29. 模组贴图组 CompressedPackageBuildPiplineData 创建一个 CompressedPackageBuildPiplineData 的数据 设置贴图组的名称 （用户界面显示的贴图组名称，以及文件夹名称） 打包文件配置自定义的贴图文件，需要保持与原坦克的贴图名字以及格式后缀一致"
  },
  "manual/tutorial/30. LRM 服务器搭建.html": {
    "href": "manual/tutorial/30. LRM 服务器搭建.html",
    "title": "30. LRM 服务器搭建 | Panzer War Document",
    "keywords": "30. LRM 服务器搭建 选择 Cent OS sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm sudo yum install dotnet-sdk-5.0 cd /root/LRM-Node/ nohup dotnet LRM.dll & vi /etc/rc.local /root/runAllServer.sh >/server.log 2>&1 crontab -e 0 2 * * * /usr/sbin/reboot"
  },
  "manual/tutorial/X. 模组开发问题归档.html": {
    "href": "manual/tutorial/X. 模组开发问题归档.html",
    "title": "X. 模组开发问题归档 | Panzer War Document",
    "keywords": "X. 模组开发问题归档 归档一些最近遇到的 Mod 开发问题 1. 地图空气碰撞 选中所有物体，然后查看是否有绿色的碰撞框覆盖该区域。 检查是不是复制时候，多复制了一个 mesh collider，或者把 mesh collider 与显示模型放在了不同地方 2. 悬挂回弹慢，转弯翻车 检查 Wheel Collider 配置 这个是默认的悬挂配置 3. 地图炮弹碰撞与显示层级 4. Blender 材质球重复问题 尽量减少出现重复的材质球 ctrl c + ctrl v ![B]0XR__9M5$SN0C0~DC9TOA.png](./images/20231024_1406279018.png) shift + d ![ZKAIGC]72{LRKLZMXQXKC.png](./images/20231024_1406272469.png) 这个各位用 blender 时候注意下，尽量用 shift + d 的方式复制物体，不然会导致重复的材质球的出现"
  }
}